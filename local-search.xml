<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>HUST操作系统实验四</title>
    <link href="/2021/12/14/OS%E5%AE%9E%E9%AA%8C4/"/>
    <url>/2021/12/14/OS%E5%AE%9E%E9%AA%8C4/</url>
    
    <content type="html"><![CDATA[<h1 id="实验四：设备管理和文件管理"><a href="#实验四：设备管理和文件管理" class="headerlink" title="实验四：设备管理和文件管理"></a>实验四：设备管理和文件管理</h1><p><img src="/2021/12/14/OS%E5%AE%9E%E9%AA%8C4/MyBlog\source_posts\OS实验4\实验要求.png" srcset="/img/loading.gif" lazyload alt="实验要求"></p><h2 id="1-Linux内核模块编写、安装、卸载"><a href="#1-Linux内核模块编写、安装、卸载" class="headerlink" title="1.Linux内核模块编写、安装、卸载"></a>1.Linux内核模块编写、安装、卸载</h2><p><img src="/2021/12/14/OS%E5%AE%9E%E9%AA%8C4/MyBlog\source_posts\OS实验4\1.png" srcset="/img/loading.gif" lazyload alt="1"></p><p>在用户态下编程，可以通过main()来传递命令行参数，同样，在编写内核模块时，可以通过module_param来实现向模块中传入参数。</p><figure class="highlight reasonml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs reasonml">#define <span class="hljs-keyword">module</span><span class="hljs-constructor">_param(<span class="hljs-params">name</span>, <span class="hljs-params">type</span>, <span class="hljs-params">perm</span>)</span>                <br><span class="hljs-keyword">module</span><span class="hljs-constructor">_param_named(<span class="hljs-params">name</span>, <span class="hljs-params">name</span>, <span class="hljs-params">type</span>, <span class="hljs-params">perm</span>)</span><br></code></pre></div></td></tr></table></figure><p>module_param使用了3个参数：变量名，变量类型，以及一个权限掩码来做一个辅助的sysfs入口。</p><p>变量类型支持：bool,invbool(与bool相反，为真对应false，为假对应true)，charp(字符指针)，int，long，short，uint，ulong，ushort。</p><p>module_param支持单个参数，如果参数为数组的话，可以使用：</p><figure class="highlight reasonml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs reasonml"><span class="hljs-keyword">module</span><span class="hljs-constructor">_param_array(<span class="hljs-params">name</span>,<span class="hljs-params">type</span>,<span class="hljs-params">num</span>,<span class="hljs-params">perm</span>)</span>;<br></code></pre></div></td></tr></table></figure><p>name为数组名（参数名），type为数组元素的类型，num为数组元素的个数，模块加载者拒绝比数组能放下的多的值，perm为权限值。</p><p>perm为一个权限值，表示此参数在sysfs文件系统中所对应的文件节点的属性。你应当使用 &lt;linux/stat.h&gt; 中定义的值. 这个值控制谁可以存取这些模块参数在 sysfs 中的表示.当perm为0时，表示此参数不存在 sysfs文件系统下对应的文件节点。 否则, 模块被加载后，在/sys/module/ 目录下将出现以此模块名命名的目录, 带有给定的权限.。权限在include/linux/stat.h中有定义。</p><ul><li>编写module_pa.c:</li></ul><figure class="highlight reasonml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs reasonml">#<span class="hljs-keyword">include</span> &lt;linux/init.h&gt;<br>#<span class="hljs-keyword">include</span> &lt;linux/<span class="hljs-keyword">module</span>.h&gt;<br>#<span class="hljs-keyword">include</span> &lt;linux/kernel.h&gt;<br><span class="hljs-constructor">MODULE_LICENSE(<span class="hljs-string">&quot;GPL&quot;</span>)</span>;<br><span class="hljs-constructor">MODULE_AUTHOR(<span class="hljs-string">&quot;ziyikee&quot;</span>)</span>;<br>static <span class="hljs-built_in">char</span> *name;<br><span class="hljs-keyword">module</span><span class="hljs-constructor">_param(<span class="hljs-params">name</span>,<span class="hljs-params">charp</span>,0644)</span>;<br>static <span class="hljs-built_in">int</span> __init hello<span class="hljs-constructor">_init(<span class="hljs-params">void</span>)</span>&#123;<br>        printk(<span class="hljs-string">&quot;Hello,%s\n&quot;</span>,name);<br>        return <span class="hljs-number">0</span>; <br>&#125;     <br>static void __exit hello<span class="hljs-constructor">_exit(<span class="hljs-params">void</span>)</span>&#123;<br>        printk(<span class="hljs-string">&quot;Goodbye,%s\n&quot;</span>,name);<br>    <br>&#125;   <br><span class="hljs-keyword">module</span><span class="hljs-constructor">_init(<span class="hljs-params">hello_init</span>)</span>;<br><span class="hljs-keyword">module</span><span class="hljs-constructor">_exit(<span class="hljs-params">hello_exit</span>)</span>;<br></code></pre></div></td></tr></table></figure><ul><li>编写Makefile：</li></ul><figure class="highlight makefile"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs makefile">KERNEL_PATH := /lib/modules/<span class="hljs-variable">$(<span class="hljs-built_in">shell</span> uname -r)</span>/build<br>PWD := <span class="hljs-variable">$(<span class="hljs-built_in">shell</span> pwd)</span><br>MODULE_NAME := module_pa<br><br>obj-m := <span class="hljs-variable">$(MODULE_NAME)</span>.o<br><br><span class="hljs-section">all:</span><br>        <span class="hljs-variable">$(MAKE)</span> -C <span class="hljs-variable">$(KERNEL_PATH)</span> M=<span class="hljs-variable">$(PWD)</span><br><br><span class="hljs-section">clean:</span><br>        rm -rf .*.cmd *.o *.mod.c *.order *.symvers *.tmp *.ko<br></code></pre></div></td></tr></table></figure><ul><li>执行<code>make</code>命令：</li></ul><figure class="highlight awk"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs awk">root@zykk-VMware:<span class="hljs-regexp">/usr/</span>OS<span class="hljs-comment"># make</span><br>make -C <span class="hljs-regexp">/lib/m</span>odules<span class="hljs-regexp">/5.10.1/</span>build M=<span class="hljs-regexp">/usr/</span>OS<br>make[<span class="hljs-number">1</span>]: 进入目录“<span class="hljs-regexp">/usr/</span>src/linux-<span class="hljs-number">5.10</span>.<span class="hljs-number">1</span>”<br>  CC [M]  <span class="hljs-regexp">/usr/</span>OS/module_pa.o<br>  MODPOST <span class="hljs-regexp">/usr/</span>OS/Module.symvers<br>  LD [M]  <span class="hljs-regexp">/usr/</span>OS/module_pa.ko<br>make[<span class="hljs-number">1</span>]: 离开目录“<span class="hljs-regexp">/usr/</span>src/linux-<span class="hljs-number">5.10</span>.<span class="hljs-number">1</span>”<br></code></pre></div></td></tr></table></figure><ul><li>使用命令<code>insmod 文件名.ko 参数名=参数值</code>，加载模块：</li></ul><figure class="highlight awk"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs awk">root@zykk-VMware:<span class="hljs-regexp">/usr/</span>OS<span class="hljs-comment"># insmod module_pa.ko name=zhengyike</span><br></code></pre></div></td></tr></table></figure><ul><li>使用命令<code>lsmod | grep 文件名</code>，查看加载的模块：</li></ul><figure class="highlight awk"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs awk">root@zykk-VMware:<span class="hljs-regexp">/usr/</span>OS<span class="hljs-comment"># lsmod |grep module_pa</span><br>module_pa              <span class="hljs-number">16384</span>  <span class="hljs-number">0</span><br></code></pre></div></td></tr></table></figure><ul><li>使用命令<code>dmesg</code>，查看日志文件中模块输出的内容：</li></ul><p><img src="/2021/12/14/OS%E5%AE%9E%E9%AA%8C4/MyBlog\source_posts\OS实验4\查看日志内容.png" srcset="/img/loading.gif" lazyload alt="查看日志内容"></p><ul><li>使用命令<code>rmmod 文件名.ko</code>，移除模块，移除后可使用<code>lsmod</code>再次查看是否移除成功</li></ul><h2 id="2-编写Linux驱动程序并编程应用程序测试1"><a href="#2-编写Linux驱动程序并编程应用程序测试1" class="headerlink" title="2. 编写Linux驱动程序并编程应用程序测试1"></a>2. 编写Linux驱动程序并编程应用程序测试1</h2><p><img src="/2021/12/14/OS%E5%AE%9E%E9%AA%8C4/MyBlog\source_posts\OS实验4\2.png" srcset="/img/loading.gif" lazyload alt="2"></p><p>在写之前先看一下下面两个博客，一个给出了具体的实现和一些前置知识，另一个给出了用户态与内核态交换数据的函数及其原理。</p><p><a href="https://blog.csdn.net/hanp_linux/article/details/90474432">写一个完整的Linux驱动程序访问硬件并写应用程序进行测试</a></p><p><a href="https://blog.csdn.net/zqixiao_09/article/details/50858946?spm=1001.2101.3001.6650.1&utm_medium=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~default-1.nonecase&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~default-1.nonecase">Linux 字符设备驱动开发基础（三）</a></p><ul><li>首先编写驱动程序mymodule.c:</li></ul><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;linux/kernel.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;linux/module.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;linux/cdev.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;linux/fs.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;asm/uaccess.h&gt;</span></span><br><br><span class="hljs-keyword">dev_t</span> devno;<br><span class="hljs-keyword">int</span> major = <span class="hljs-number">255</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> DEVNAME[] = <span class="hljs-string">&quot;hello_device&quot;</span>;<br><span class="hljs-keyword">int</span> data[<span class="hljs-number">2</span>];<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">hello_open</span><span class="hljs-params">(struct inode * ip, struct file * fp)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">printk</span>(<span class="hljs-string">&quot;%s : %d\n&quot;</span>, __func__, __LINE__);<br>    <br>    <span class="hljs-comment">/* 一般用来做初始化设备的操作 */</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">hello_close</span><span class="hljs-params">(struct inode * ip, struct file * fp)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">printk</span>(<span class="hljs-string">&quot;%s : %d\n&quot;</span>, __func__, __LINE__);<br>    <br>    <span class="hljs-comment">/* 一般用来做和open相反的操作，open申请资源，close释放资源 */</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">ssize_t</span> <span class="hljs-title">hello_read</span><span class="hljs-params">(struct file * fp,<span class="hljs-keyword">char</span> __user * buf, <span class="hljs-keyword">size_t</span> count, <span class="hljs-keyword">loff_t</span> * loff)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> ret;<br>    <br>    <span class="hljs-comment">/* 将用户需要的数据从内核空间data写到用户空间(buf) */</span><br>    <span class="hljs-built_in">printk</span>(<span class="hljs-string">&quot;%s : %d\n&quot;</span>, __func__, __LINE__);<br>    <span class="hljs-keyword">if</span> ((ret = <span class="hljs-built_in">copy_to_user</span>(buf, data, count)))<br>    &#123;<br>        <span class="hljs-built_in">printk</span>(<span class="hljs-string">&quot;copy_to_user err\n&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    &#125;<br>    <span class="hljs-built_in">printk</span>(<span class="hljs-string">&quot;读出两个数：%d，%d，计算两数之和为：%d\n&quot;</span>,data[<span class="hljs-number">0</span>],data[<span class="hljs-number">1</span>],data[<span class="hljs-number">0</span>]+data[<span class="hljs-number">1</span>]);<br>    <span class="hljs-keyword">return</span> count;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">ssize_t</span> <span class="hljs-title">hello_write</span><span class="hljs-params">(struct file * fp, <span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> __user * buf, <span class="hljs-keyword">size_t</span> count, <span class="hljs-keyword">loff_t</span> * loff)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> ret;<br>   <br>    <span class="hljs-comment">/*将用户的buf的内容写到内核空间的data中*/</span> <br>    <span class="hljs-built_in">printk</span>(<span class="hljs-string">&quot;%s : %d\n&quot;</span>, __func__, __LINE__);<br>    <span class="hljs-keyword">if</span> ((ret = <span class="hljs-built_in">copy_from_user</span>(data, buf, count)))<br>    &#123;<br>        <span class="hljs-built_in">printk</span>(<span class="hljs-string">&quot;copy_from_user err\n&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    &#125;<br>    <span class="hljs-built_in">printk</span>(<span class="hljs-string">&quot;写入两个数：%d，%d\n&quot;</span>,data[<span class="hljs-number">0</span>],data[<span class="hljs-number">1</span>]);<br>    <span class="hljs-keyword">return</span> count;<br>&#125;<br><br><span class="hljs-comment">/* 2. 分配file_operations结构体 */</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">file_operations</span> <span class="hljs-title">hello_fops</span> =</span> &#123;<br>    .owner = THIS_MODULE,<br>    .open  = hello_open,<br>    .release = hello_close,<br>    .read = hello_read,<br>    .write = hello_write<br>&#125;;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">cdev</span> <span class="hljs-title">cdev</span>;</span><br><br><span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> <span class="hljs-title">hello_init</span><span class="hljs-params">(<span class="hljs-keyword">void</span>)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> ret;<br>    <span class="hljs-built_in">printk</span>(<span class="hljs-string">&quot;%s : %d\n&quot;</span>, __func__, __LINE__);<br>    <br>    <span class="hljs-comment">/* 1. 生成并注册设备号 */</span><br>    devno = <span class="hljs-built_in">MKDEV</span>(major, <span class="hljs-number">0</span>);<br>    ret  = <span class="hljs-built_in">register_chrdev_region</span>(devno, <span class="hljs-number">1</span>, DEVNAME);<br>    <span class="hljs-keyword">if</span> (ret != <span class="hljs-number">0</span>)<br>    &#123;<br>        <span class="hljs-built_in">printk</span>(<span class="hljs-string">&quot;%s : %d fail to register_chrdev_region\n&quot;</span>, __func__, __LINE__);<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    &#125;<br>    <br>    <span class="hljs-comment">/* 3. 分配、设置、注册cdev结构体 */</span><br>    cdev.owner = THIS_MODULE;<br>    ret = <span class="hljs-built_in">cdev_add</span>(&amp;cdev, devno, <span class="hljs-number">1</span>);<br>    <span class="hljs-built_in">cdev_init</span>(&amp;cdev, &amp;hello_fops);<br>    <span class="hljs-keyword">if</span> (ret &lt; <span class="hljs-number">0</span>)<br>    &#123;<br>        <span class="hljs-built_in">printk</span>(<span class="hljs-string">&quot;%s : %d fail to cdev_add\n&quot;</span>, __func__, __LINE__);<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    &#125;<br>    <span class="hljs-built_in">printk</span>(<span class="hljs-string">&quot;success!\n&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">hello_exit</span><span class="hljs-params">(<span class="hljs-keyword">void</span>)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">printk</span>(<span class="hljs-string">&quot;%s : %d\n&quot;</span>, __func__, __LINE__);<br>      <br>    <span class="hljs-comment">/* 释放资源 */</span><br>    <span class="hljs-built_in">cdev_del</span>(&amp;cdev);<br>    <span class="hljs-built_in">unregister_chrdev_region</span>(devno, <span class="hljs-number">1</span>);<br>&#125;<br><br><span class="hljs-built_in">MODULE_LICENSE</span>(<span class="hljs-string">&quot;GPL&quot;</span>);<br><span class="hljs-built_in">module_init</span>(hello_init);<br><span class="hljs-built_in">module_exit</span>(hello_exit);<br></code></pre></div></td></tr></table></figure><p>上述代码是我根据博客的进行了修改，只对两个整数进行操作，因此内核态只用了一个大小为2的int数组，<strong>注意：在内核态是不允许对用户态的数据进行操作的，比如hello_read函数中传进来的用户态指针buf，你不能在内核态的代码里去操作他，否则会出现BUG，程序会被kill调</strong>。如果严格按照要求来的话，只需要修改read中的代码，copy一个两数之和就可以。</p><ul><li><p>编写Makefile，代码与task1相同，修改一下输出的文件名就可以</p></li><li><p>编写测试代码test2.c：</p></li></ul><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;unistd.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;sys/stat.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;sys/types.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;fcntl.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">char</span> argc, <span class="hljs-keyword">char</span> * argv[])</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> fd;<br>    <span class="hljs-keyword">int</span> ret;<br>    <span class="hljs-keyword">int</span> buf[<span class="hljs-number">2</span>] = &#123;<span class="hljs-number">2</span>,<span class="hljs-number">3</span>&#125;;<br>    <span class="hljs-keyword">int</span> buf1[<span class="hljs-number">2</span>] = &#123;<span class="hljs-number">0</span>,<span class="hljs-number">0</span>&#125;;   <br>     <span class="hljs-comment">/* 将要打开的文件的路径通过main函数的参数传入 */</span><br>    <span class="hljs-keyword">if</span> (argc != <span class="hljs-number">2</span>)<br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Usage: %s &lt;filename&gt;\n&quot;</span>, argv[<span class="hljs-number">0</span>]);<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    &#125;<br>    <br>    fd = <span class="hljs-built_in">open</span>(argv[<span class="hljs-number">1</span>], O_RDWR);<br>    <span class="hljs-keyword">if</span> (fd &lt; <span class="hljs-number">0</span>)<br>    &#123;<br>        <span class="hljs-built_in">perror</span>(<span class="hljs-string">&quot;fail to open file\n&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    &#125;<br>    <span class="hljs-comment">/* write data */</span><br>    ret = <span class="hljs-built_in">write</span>(fd, buf, <span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(buf));<br>    <span class="hljs-keyword">if</span> (ret &lt; <span class="hljs-number">0</span>)<br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;write  err!\n&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    &#125;<br>     <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;读数据前，buf1:&#123;%d,%d&#125;\n&quot;</span>,buf1[<span class="hljs-number">0</span>],buf1[<span class="hljs-number">1</span>]);<br>    ret = <span class="hljs-built_in">read</span>(fd,buf1,<span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(buf1));<br>   <span class="hljs-keyword">if</span>(ret&lt;<span class="hljs-number">0</span>)  <br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;read  err!\n&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    &#125;<br>         <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;读数据后，buf1:&#123;%d,%d&#125;\n&quot;</span>,buf1[<span class="hljs-number">0</span>],buf1[<span class="hljs-number">1</span>]);<br>    <span class="hljs-built_in">close</span>(fd);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><ul><li>进行一些列操作：</li></ul><figure class="highlight awk"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs awk"><span class="hljs-regexp">//</span>生成mymodule.ko<br>make <br><span class="hljs-regexp">//</span>安装驱动<br>insmod mymodule.ko  <br><span class="hljs-regexp">//</span>查看是否安装成功<br>lsmod |grep mymodule  或者  cat <span class="hljs-regexp">/proc/</span>devices  查看对应的设备号和名字<br><span class="hljs-regexp">//</span>创建设备节点和设备挂钩<br>mknod  <span class="hljs-regexp">/dev/</span>hello  c  <span class="hljs-number">255</span> <span class="hljs-number">0</span><br>/*当我们执行insmod后驱动就被安装到了内核中，但是我们要想访问驱动，必须先创建设备节点，通过设备节点来访问驱动，设备节点其实就是个文件，文件类型是c–字符设备文件。<br><span class="hljs-regexp">/dev/</span>hello：要创建的设备节点的名字及路径，一般都在/dev目录下创建。<br>c： 表示要创建一个字符设备。<br><span class="hljs-number">255</span> <span class="hljs-number">0</span>：主设备号和次设备号，表示创建的这个设备节点和对应设备号是(<span class="hljs-number">255</span>，<span class="hljs-number">0</span>)的这个设备关联，这样访问这个设备节点就可以通过设备号唯一确定一个设备了。<br>*/<br><span class="hljs-regexp">//</span>编译测试程序，运行测试程序并将设备文件作为参数<br>gcc  -o test2 test2.c<br>.<span class="hljs-regexp">/test2  /</span>dev/hello<br></code></pre></div></td></tr></table></figure><ul><li><p>测试结果如下：</p><p>为了可以确保read函数确实读到了数据，我在read函数读取设备文件到buf1的前后分别打印了buf1的数组内容，通过对比可以看出，read函数确实将数据读到了buf1。</p></li></ul><p><img src="/2021/12/14/OS%E5%AE%9E%E9%AA%8C4/MyBlog\source_posts\OS实验4\测试结果1.png" srcset="/img/loading.gif" lazyload alt="测试结果1"></p><p><img src="/2021/12/14/OS%E5%AE%9E%E9%AA%8C4/MyBlog\source_posts\OS实验4\测试结果2.png" srcset="/img/loading.gif" lazyload alt="测试结果2"></p><h2 id="3-编写Linux驱动程序并编程应用程序测试2"><a href="#3-编写Linux驱动程序并编程应用程序测试2" class="headerlink" title="3. 编写Linux驱动程序并编程应用程序测试2"></a>3. 编写Linux驱动程序并编程应用程序测试2</h2><p><img src="/2021/12/14/OS%E5%AE%9E%E9%AA%8C4/MyBlog\source_posts\OS实验4\3.png" srcset="/img/loading.gif" lazyload alt="3"></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>数据库系统概论</title>
    <link href="/2021/12/12/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E8%AE%BA/"/>
    <url>/2021/12/12/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E8%AE%BA/</url>
    
    <content type="html"><![CDATA[<h1 id="数据库系统概论"><a href="#数据库系统概论" class="headerlink" title="数据库系统概论"></a>数据库系统概论</h1><h2 id="一-绪论"><a href="#一-绪论" class="headerlink" title="一.绪论"></a>一.绪论</h2><h3 id="1-1-四个概念"><a href="#1-1-四个概念" class="headerlink" title="1.1 四个概念"></a>1.1 四个概念</h3><ul><li><p>数据(Data)</p><p>数据是数据库中存储的基本对象，是描述事务的符号记录，如数字，文字，图像等。</p><p>数据的含义为数据的语义，数据与其语义是不可分的。</p><p>数据是有结构的：记录是计算机存储数据的一种格式或方法。</p></li><li><p>数据库(DB)</p><p>数据库是长期存储在计算机内，有组织的，可共享的大量数据集合。</p><p>特征：数据按照一定的数据模型组织，描述和储存；可为各种用户共享，冗余度小，，易扩展；数据独立性高</p></li><li><p>数据库管理系统(DBMS)</p><p>位于用户应用和操作系统之间的一层数据管理软件，属于系统软件，基础软件平台，区别于应用软件。</p><p>用来科学的组织和存储数据，高效的获取和维护数据。</p><p>主要功能：</p><ul><li>数据定义：提供数据定义语言（DDL），定义数据对象</li><li>数据组织，存储，管理：如何组织，管理，如何实现数据间的联系</li><li>数据操作：提供数据操作语言(DML)，增删改查</li><li>事务管理和运行管理：数据的安全，完整，并发，故障恢复</li></ul></li><li><p>数据库系统(DBS)</p><p>指在计算机系统中引入数据库后的系统构成，由数据库，数据库管理系统，应用程序，数据库管理员(DBA)构成</p></li></ul><h3 id="1-2-数据模型"><a href="#1-2-数据模型" class="headerlink" title="1.2 数据模型"></a>1.2 数据模型</h3><p>数据模型是对现实世界数据特征的抽象，是数据库系统的核心和基础</p><ul><li><p>概念模型</p><p>按用户的观点对数据和信息进行建模，用于数据库设计</p></li><li><p>逻辑模型和物理模型</p><ul><li>逻辑模型：按照计算机系统的观点对数据建模，用于DBMS实现，主要有：网状模型，层次模型，关系模型，OOD模型，对象关系数据模型，半结构化数据模型</li><li>物理模型：对数据最底层的抽象，描述数据在系统内（磁盘上）的表示方法和存取方法</li></ul></li></ul><hr><ul><li><p>实体：客观存在并可互相区别的事物，人，事，物</p></li><li><p>属性：实体的某一特性</p></li><li><p>码：唯一标识实体的属性集</p></li><li><p>实体型：用实体名及其属性名集合来抽象和刻画的同类实体，如学生，打工人，牛马</p></li><li><p>实体集：同一类实体的集合称为实体集</p></li><li><p>实体内部联系：组成实体的各属性间的联系</p></li><li><p>实体之间联系：不同实体集间的联系</p></li></ul><hr><p>数据模型：严格定义的一组概念集合，包括三部分：</p><ul><li>数据结构，系统的静态特性</li><li>数据操作，系统的动态特性</li><li>完整性约束</li></ul><p>使用数据结构的类型来命名数据模型：网状，层状等等。</p><p>数据操作：增删改查，查询语言（Query），数据更新（DML）。</p><p>数据的完整性约束条件：一组完整性规则集合，数据模型中数据及其联系所具有的制约和依存规则</p><hr><ul><li><p>层次模型：一对多的父子联系，除根节点外，都仅有一个双亲节点，任何记录值只有按其路径查看，没有一个子女的记录值能够脱离双亲记录值而独立存在。无双亲就不能插入子女记录，删除双亲，相应的子女也要删除。</p></li><li><p>网状模型：基本与层次模型一致，允许一个以上的节点无双亲，一个节点可以有多余一个的双亲</p></li><li><p>关系模型：一张表</p><ul><li>关系：一个关系通常对应一张表</li><li>元组：表中的一行为一个元祖</li><li>属性：表中的一列为一个属性，每个属性去一个属性名</li><li>主码：码键，来自表中的某个属性组，唯一确定一个元组</li><li>域：一组具有相同数据类型的值的结合，属性的取值范围来自某个域，如年领域，性别域</li><li>分量：元组中的一个属性值，<strong>每个分量是不可分的数据项</strong>，不允许小表嵌入大表</li><li>关系模式：对关系的描述：关系名（属性1，属性2，~~~~~ ，属性n）</li></ul></li></ul><h3 id="1-3-数据库系统结构"><a href="#1-3-数据库系统结构" class="headerlink" title="1.3 数据库系统结构"></a>1.3 数据库系统结构</h3><ul><li><p>模式(Schema)：对数据库全体数据的逻辑结构和特征的形式描述，一般某个应用的数据库有一个模式，是数据库系统模式结构的核心</p><p>定义模式：DDL定义数据的逻辑结构，以某种数据模型为基础，定义数据之间的联系，定义与数据的的安全性，完整性的要求</p></li><li><p>实例(Instance)：数据库某一时刻的状态，模数的一个具体值</p></li></ul><p>三级模式结构：</p><p><img src="/2021/12/12/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E8%AE%BA/%E4%B8%89%E7%BA%A7%E6%A8%A1%E5%BC%8F%E7%BB%93%E6%9E%84.png" srcset="/img/loading.gif" lazyload alt="三级模式结构"></p><ul><li><p>外模式：数据库用户使用的<strong>局部</strong>数据的逻辑结构和特征的描述，数据库用户的数据视图。外模式是模式的子集，反映不同用户的应用需求，对模式中的某一数据，不同的外模式中结构，类型，长度，保密级别等都可以不同。一个外模式可以为多个应用程序使用，但一个应用程序只能使用一个外模式。就是用户视图的意思。</p></li><li><p>内模式：也叫存储模式，是数据物理结构和存储方式的描述，是数据在数据库内部的表示形式，比如记录的存储方式是顺序存储还是堆存储，索引组织是B+树还是Hash，数据是否压缩等。一个数据库只有一个内模式。</p></li><li><p>外模式/模式映像：从模式到外模式的映像，对于每个外模式均存在一个这样的映像，定义外模式与模式之间的对应关系，映像定义通常包含在各种外模式的表述中。可保证数据的逻辑独立性，当模式改变时，DBA对外模式/模式映像做相应改变，外模式不变。应用程序依靠数据的外模式编写，应用程序不必修改，保证了数据与程序的逻辑独立性</p></li><li><p>模式/内模式映像：定义了数据全局逻辑结构与存储结构之间的对应关系，数据库中模式/内模式映像是唯一的，保证了数据的物理独立性。比如数据的存储结构发生变化，修改映像即可，保证模式不变。</p></li></ul><h3 id="1-4-数据库系统组成"><a href="#1-4-数据库系统组成" class="headerlink" title="1.4 数据库系统组成"></a>1.4 数据库系统组成</h3><p><img src="/2021/12/12/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E8%AE%BA/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E7%BB%84%E6%88%90.png" srcset="/img/loading.gif" lazyload alt="数据库系统组成"></p><h2 id="二-关系数据库"><a href="#二-关系数据库" class="headerlink" title="二.关系数据库"></a>二.关系数据库</h2><h3 id="2-1-关系数据结构"><a href="#2-1-关系数据结构" class="headerlink" title="2.1 关系数据结构"></a>2.1 关系数据结构</h3><ul><li><p>域：一组具有相同数据类型的值的集合，如整数，介于某个取值范围的整数，（男，女）。</p></li><li><p>笛卡尔积：</p><figure class="highlight cos"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cos">给定一组域D1,D2,D3.<span class="hljs-built_in">..Dn</span>,允许其中某些域是相同的，D1,D2,..<span class="hljs-built_in">..Dn</span>的笛卡尔积为：<br>D1*D2*.<span class="hljs-built_in">..Dn</span> = &#123;(d1,d2,.<span class="hljs-built_in">..dn</span>) | di属于Di，i = <span class="hljs-number">1</span>,<span class="hljs-number">2</span>,.<span class="hljs-built_in">..n</span>&#125;<br>所有域的所有取值任意组合<br>笛卡尔积可以看成是关系的域<br>笛卡尔积可表示为一张二维表，表汇中的每行为一个元祖，表中的每列为一个域<br></code></pre></div></td></tr></table></figure></li><li><p>基数：Di为某个有限集，其中元素的个数为基数，笛卡尔积的基数为参与的所有域的基数乘积。</p></li><li><p><img src="/2021/12/12/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E8%AE%BA/%E7%AC%9B%E5%8D%A1%E5%B0%94%E7%A7%AF.png" srcset="/img/loading.gif" lazyload alt="笛卡尔积"></p></li></ul><p><img src="/2021/12/12/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E8%AE%BA/%E7%AC%9B%E5%8D%A1%E5%B0%94%E7%A7%AF%E7%9A%84%E4%BA%8C%E7%BB%B4%E8%A1%A8%E8%A1%A8%E7%A4%BA.png" srcset="/img/loading.gif" lazyload alt="笛卡尔积的二维表表示"></p><ul><li><p>关系：D1 * D2 * …Dn的<strong>子集</strong>叫做在域D1,D2,….Dn上的关系，表示为</p><p>R(D1,D2,…..Dn)，R为关系名，n为关系的目或度。</p><p><strong>必须是子集才有价值，必须取出有实际意义的元组来构造关系</strong></p></li><li><p>元组：关系中的每个元素(d1,d2,…dn)叫做一个n元组</p></li><li><p>属性：关系中不同列可以对应相同的域，为了加以区分，给每个列取名为属性，n目关系有n个属性</p></li><li><p>码：</p><ul><li>候选码：若关系中的某一属性组的值能唯一的标识一个元组，则称该属性组为候选码，若某个关系模式中的所有属性组是这个关系模式的候选码，则称为为全码。</li></ul></li></ul><p><img src="/2021/12/12/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E8%AE%BA/%E5%85%B3%E7%B3%BB%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%80%A7%E8%B4%A8.png" srcset="/img/loading.gif" lazyload alt="关系的基本性质"></p><p>​    下图不满足关系的基本性质：</p><p><img src="/2021/12/12/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E8%AE%BA/%E9%94%99%E8%AF%AF.png" srcset="/img/loading.gif" lazyload alt="错误"></p><ul><li>关系模式是型(静态的)，关系是值(动态的)，关系模式是对关系的描述<ul><li>元组集合的结构<ul><li>属性构成</li><li>属性来自的域</li><li>属性与域之间的映像关系</li></ul></li><li>完整性约束条件</li></ul></li></ul><p><img src="/2021/12/12/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E8%AE%BA/%E5%85%B3%E7%B3%BB%E6%A8%A1%E5%BC%8F.png" srcset="/img/loading.gif" lazyload alt="关系模式"></p><ul><li><p>关系数据库：在某一给定的应用领域中，所有关系的集合构成一个关系数据库。</p></li><li><p>关系数据库的型与值</p><ul><li><p>关系数据库的型:关系数据库模式，是对关系数据库的描述</p></li><li><p>关系数据库的值:关系模式在某一时刻对应的关系的集合，通常称为关系数据库</p></li></ul></li></ul><hr><h3 id="2-2-关系完整性约束"><a href="#2-2-关系完整性约束" class="headerlink" title="2.2 关系完整性约束"></a>2.2 关系完整性约束</h3><ul><li><p>实体完整性和参照完整性</p><p>关系模型必须满足的完整性约束条件称为关系的两个不变性，<strong>必须满足</strong></p><ul><li>实体完整性：关系的主属性不能为空值，候选码/主码不为空</li><li>参照完整性：在关系模型中，实体与实体间的联系都是用关系描述的，因此存在着关系关系间的引用</li></ul></li></ul><p><img src="/2021/12/12/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E8%AE%BA/%E5%A4%96%E7%A0%81.png" srcset="/img/loading.gif" lazyload alt="外码"></p><p><img src="/2021/12/12/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E8%AE%BA/%E5%8F%82%E7%85%A7%E5%AE%8C%E6%95%B4%E6%80%A7%E8%A7%84%E5%88%99.png" srcset="/img/loading.gif" lazyload alt="参照完整性规则"></p><ul><li>用户定义的完整性：由用户根据实际应用需求去定义约束，关系模型提供定义和检验这类完整性的机制，由数据库系统来完成，不需要应用程序来完成。</li></ul><hr><h3 id="2-3-关系代数"><a href="#2-3-关系代数" class="headerlink" title="2.3 关系代数"></a>2.3 关系代数</h3><p>主要是认识一些符号和定义，直接看图，懒得打公式：</p><p><img src="/2021/12/12/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E8%AE%BA/1.png" srcset="/img/loading.gif" lazyload alt="1"></p><p><img src="/2021/12/12/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E8%AE%BA/2.png" srcset="/img/loading.gif" lazyload alt="2"></p><p><img src="/2021/12/12/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E8%AE%BA/3.png" srcset="/img/loading.gif" lazyload alt="3"></p><p><img src="/2021/12/12/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E8%AE%BA/4.png" srcset="/img/loading.gif" lazyload alt="4"></p><p><img src="/2021/12/12/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E8%AE%BA/5.png" srcset="/img/loading.gif" lazyload alt="5"></p><p>并，交，差运算和一般的集合运算一致。</p><p><img src="/2021/12/12/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E8%AE%BA/6.png" srcset="/img/loading.gif" lazyload alt="6"></p><p>两个关系做笛卡尔积简单来说就是属性列合并，元组乘积匹配。</p><h3 id="2-4-专门的关系运算"><a href="#2-4-专门的关系运算" class="headerlink" title="2.4 专门的关系运算"></a>2.4 专门的关系运算</h3><ul><li><p>选择：</p><p>相当于where做条件选择，从关系R中选取逻辑表达式F为真的元组，<strong>对行进行选择</strong></p><p><img src="/2021/12/12/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E8%AE%BA/%E9%80%89%E6%8B%A9.png" srcset="/img/loading.gif" lazyload alt="选择"></p><p>下面的示例就是对行进行选择，选出年龄小于20的学生，注意要记住相应的符号表示形式：</p><p><img src="/2021/12/12/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E8%AE%BA/%E9%80%89%E6%8B%A9%E7%A4%BA%E4%BE%8B.png" srcset="/img/loading.gif" lazyload alt="选择示例"></p></li><li><p>投影：</p><p><strong>对列进行选择</strong>，从原属性组中选出一些属性组成新的属性组，形成新的关系</p><p><img src="/2021/12/12/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E8%AE%BA/%E6%8A%95%E5%BD%B1.png" srcset="/img/loading.gif" lazyload alt="投影"></p><p>下面的示例就是选出了列中的Sdept列想成了新的关系：</p><p><img src="/2021/12/12/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E8%AE%BA/%E6%8A%95%E5%BD%B1%E7%A4%BA%E4%BE%8B.png" srcset="/img/loading.gif" lazyload alt="投影示例"></p></li><li><p>连接：</p><p> 相当于mysql中的join运算，将满足两个表之间某种条件的元组(行)选出来。</p><p><img src="/2021/12/12/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E8%AE%BA/%E8%BF%9E%E6%8E%A5.png" srcset="/img/loading.gif" lazyload alt="连接"></p><p>下面的示例就是现将RS做笛卡尔积，在选择出满足条件C&lt;E的行：</p><p><img src="/2021/12/12/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E8%AE%BA/%E8%BF%9E%E6%8E%A5%E7%A4%BA%E4%BE%8B.png" srcset="/img/loading.gif" lazyload alt="连接示例"></p><p><img src="/2021/12/12/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E8%AE%BA/%E8%BF%9E%E6%8E%A5%E6%93%8D%E4%BD%9C.png" srcset="/img/loading.gif" lazyload alt="连接操作"></p><p>两种常见的连接：</p><p><img src="/2021/12/12/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E8%AE%BA/%E7%AD%89%E5%80%BC%E8%BF%9E%E6%8E%A5.png" srcset="/img/loading.gif" lazyload alt="等值连接"></p><p><img src="/2021/12/12/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E8%AE%BA/%E8%87%AA%E7%84%B6%E8%BF%9E%E6%8E%A5.png" srcset="/img/loading.gif" lazyload alt="自然连接"></p><p>在进行连接运算时，执行过程其实和join一样，一个外表，一个内表，根据限制条件去筛选罢了</p><p>自然连接：直接通过两个关系中相同的属性组去进行连接，并且显示结果中不会显示相同的重复属性组，比如下图，直接利用R和S中都有的B属性去进行等值连接：</p><p><img src="/2021/12/12/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E8%AE%BA/%E8%87%AA%E7%84%B6%E8%BF%9E%E6%8E%A5%E7%A4%BA%E4%BE%8B.png" srcset="/img/loading.gif" lazyload alt="自然连接示例"></p><hr><p><img src="/2021/12/12/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E8%AE%BA/%E6%82%AC%E6%B5%AE%E5%85%83%E7%BB%84.png" srcset="/img/loading.gif" lazyload alt="悬浮元组"></p><p><img src="/2021/12/12/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E8%AE%BA/%E5%A4%96%E8%BF%9E%E6%8E%A5.png" srcset="/img/loading.gif" lazyload alt="外连接"></p><p>如果不加左右约束的外连接的话，就是将左边和右边的悬浮数组都保留了，并在相应没有值的地方填上NULL：</p></li></ul><p><img src="/2021/12/12/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E8%AE%BA/%E4%B8%8D%E5%8A%A0%E6%9D%A1%E4%BB%B6%E7%9A%84%E5%A4%96%E8%BF%9E%E6%8E%A5.png" srcset="/img/loading.gif" lazyload alt="不加条件的外连接"></p><p>加上左右约束的话就只显示左边或右边的悬浮元祖了：</p><p><img src="/2021/12/12/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E8%AE%BA/%E5%B7%A6%E5%A4%96%E8%BF%9E%E6%8E%A5%E5%92%8C%E5%8F%B3%E5%A4%96%E8%BF%9E%E6%8E%A5.png" srcset="/img/loading.gif" lazyload alt="左外连接和右外连接"></p><ul><li><p>除运算：</p><p><img src="/2021/12/12/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E8%AE%BA/%E9%99%A4%E8%BF%90%E7%AE%97.png" srcset="/img/loading.gif" lazyload alt="除运算"></p><p>除运算既包括对行的操作，又包含对列的操作</p><p>除运算结果中的属性集就是R中那些不在S中存在的属性，Y是R和S共有的属性组，R把这些共有的去除，剩下的R独有的是X属性组，除运算的结果就是这些R独有的。这完成了对列的操作。</p><p>对行的操作就是X中的那些行中，分量x的象集必须包含所有S在Y上的投影集合，这完成了对行的操作。示例：</p><p><img src="/2021/12/12/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E8%AE%BA/%E9%99%A4%E8%BF%90%E7%AE%97%E7%A4%BA%E4%BE%8B.png" srcset="/img/loading.gif" lazyload alt="除运算示例"></p><p><img src="/2021/12/12/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E8%AE%BA/%E9%99%A4%E8%BF%90%E7%AE%97%E7%A4%BA%E4%BE%8B2.png" srcset="/img/loading.gif" lazyload alt="除运算示例2"></p></li></ul><h3 id="2-5-关系演算"><a href="#2-5-关系演算" class="headerlink" title="2.5 关系演算"></a>2.5 关系演算</h3><p>主要包括元组关系演算语言和域关系型演算语言，其实就是规定了某种数据操作的某种格式，根据格式各部分所代表的内容理解语义即可，不写了，直接看书，应该不考。</p><h2 id="三-关系型数据库标准语言SQL"><a href="#三-关系型数据库标准语言SQL" class="headerlink" title="三. 关系型数据库标准语言SQL"></a>三. 关系型数据库标准语言SQL</h2><p>使用SQL语句进行各种操作，直接看Mysql必知必会，跳过</p><h2 id="四-数据库安全性"><a href="#四-数据库安全性" class="headerlink" title="四. 数据库安全性"></a>四. 数据库安全性</h2><h3 id="4-1-数据库安全控制"><a href="#4-1-数据库安全控制" class="headerlink" title="4.1 数据库安全控制"></a>4.1 数据库安全控制</h3><p>数据库安全控制的常用方法：</p><ul><li><p>用户身份鉴别：对使用数据库的用户身份进行鉴别，比如输入用户标识和用户口令</p></li><li><p>存取控制：定义用户的权限，用户能操控那些数据；合法权限检查，判断用户的操作是否符合权限。用户权限定义和合法检查机制组成了DBMS的存取控制子系统。</p></li><li><p>自主存取控制(DAC): 用户对不同的数据对象有不同的存储权限，不同用户对同一对象也有不同的权限，用户还可将其拥有的存取权限转授给其他用户。通过SQL的GRANT和REVOKE语句实现</p><ul><li><p>数据库角色：定义一组拥有相同权限的一类用户为一个角色，定义角色的存取权限，再将该角色赋予别的用户，简化授权和回收过程。</p><p><img src="/2021/12/12/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E8%AE%BA/%E5%88%9B%E5%BB%BA%E8%A7%92%E8%89%B2.png" srcset="/img/loading.gif" lazyload alt="创建角色"></p><p><img src="/2021/12/12/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E8%AE%BA/%E8%A7%92%E8%89%B2%E6%8E%88%E6%9D%83.png" srcset="/img/loading.gif" lazyload alt="角色授权"></p><p><img src="/2021/12/12/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E8%AE%BA/%E8%A7%92%E8%89%B2%E5%9B%9E%E6%94%B6.png" srcset="/img/loading.gif" lazyload alt="角色回收"></p><p><img src="/2021/12/12/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E8%AE%BA/%E8%87%AA%E4%B8%BB%E5%AD%98%E5%8F%96%E6%8E%A7%E5%88%B6%E7%9A%84%E7%BC%BA%E7%82%B9.png" srcset="/img/loading.gif" lazyload alt="自主存取控制的缺点"></p></li></ul></li></ul><p>​                本质上就是因为获得自主存取控制权限的用户其实就拥有了权限下的所有信息，相当于他                自己的信息，他就可以将这些信息再泄露给其他人</p><ul><li><p>强制存取控制：保证更高程度的安全行，用户不能直接感知和进行控制</p><p>将DBMS所管理的全部实体分为主体和客体两类：</p><ul><li>主体：被管理的实际用户，代表用户的各进程</li><li>客体：系统中的被动实体，受主体操控：文件，表，索引，视图</li></ul><p>对于主体和客体，DBMS为每个实例指派一个敏感度级别：如绝密，机密，可信，公开。</p><p>主体的敏感度标记成为许可证级别，客体的敏感度标记成为密级。</p><p>强制存取控制规则：</p><ul><li><p>仅当主体的许可证级别大于或等于客体的密级时，该主体才能读取相应的客体</p></li><li><p>仅当主体的许可证级别小于或等于客体的密级时，该主体才能写相应的客体。防止将原来密级高的数据恶意降级为公开的数据</p><p><img src="/2021/12/12/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E8%AE%BA/%E5%BC%BA%E5%88%B6%E5%AD%98%E5%8F%96%E6%8E%A7%E5%88%B6.png" srcset="/img/loading.gif" lazyload alt="强制存取控制"></p><p><img src="/2021/12/12/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E8%AE%BA/%E7%BB%84%E5%90%88%E4%BD%BF%E7%94%A8%E6%9E%84%E6%88%90%E5%AE%89%E5%85%A8%E6%A3%80%E6%9F%A5.png" srcset="/img/loading.gif" lazyload alt="组合使用构成安全检查"></p></li></ul></li><li><p>视图控制：通过定义相关的视图限制用户操作数据的范围和存取权限</p></li><li><p>审计：对用户进行的操作进行监控</p></li><li><p>数据加密：加密存储和加密传输</p></li></ul><h2 id="五-数据库完整性"><a href="#五-数据库完整性" class="headerlink" title="五. 数据库完整性"></a>五. 数据库完整性</h2><p>数据的正确性：数据是符合显示世界语义，反映了当前实际状况的(实体完整性)</p><p>数据的相容性：数据库同一对象在不同关系表中的数据是符合逻辑的(参照完整性)</p><p><img src="/2021/12/12/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E8%AE%BA/%E5%AE%89%E5%85%A8%E6%80%A7%E4%B8%8E%E5%AE%8C%E6%95%B4%E6%80%A7%E7%9A%84%E5%8C%BA%E5%88%AB.png" srcset="/img/loading.gif" lazyload alt="安全性与完整性的区别"></p><p>三个方面：</p><ul><li><p>完整性约束规则定义</p></li><li><p>完整性约束检查</p></li><li><p>违约处理：拒绝或级联操作（级联修改或级联删除）或设置为空值</p><p><img src="/2021/12/12/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E8%AE%BA/%E5%8F%82%E7%85%A7%E5%AE%8C%E6%95%B4%E6%80%A7%E8%BF%9D%E7%BA%A6%E5%A4%84%E7%90%86.png" srcset="/img/loading.gif" lazyload alt="参照完整性违约处理"></p></li></ul><p>用户完整性约束：针对某一具体应用的数据满足的语义要求，有DBMS来提供定义和检验用户定义完整性的机制，不必有应用程序来承担。包括元组上的约束和属性上的约束。</p><p>在建表时定义属性上的约束条件：</p><ul><li>列值非空(NOT NULL)</li><li>列值唯一(UNIQUE)</li><li>检查列值是否满足一个条件表达式(CHEACK)</li></ul><p>属性上的约束条件检查和违约处理：</p><ul><li>插入元组或修改属性的值时，关系数据库管理系统检查属性上的约束条件是否被满足</li><li>如果不满足则操作被拒绝执行</li></ul><p>元组上的约束条件：</p><p><img src="/2021/12/12/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E8%AE%BA/%E5%85%83%E7%BB%84%E4%B8%8A%E7%9A%84%E7%BA%A6%E6%9D%9F%E6%9D%A1%E4%BB%B6.png" srcset="/img/loading.gif" lazyload alt="元组上的约束条件"></p><p>元组上的约束条件检查和违约处理与属性的相关处理一样。</p><p><img src="/2021/12/12/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E8%AE%BA/%E5%AE%8C%E6%95%B4%E6%80%A7.png" srcset="/img/loading.gif" lazyload alt="完整性"></p><p>断言：用于定义复杂的用户定义完整性</p><p><img src="/2021/12/12/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E8%AE%BA/%E6%96%AD%E8%A8%80%E5%88%9B%E5%BB%BA.png" srcset="/img/loading.gif" lazyload alt="断言创建"></p><p><img src="/2021/12/12/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E8%AE%BA/%E6%96%AD%E8%A8%80%E5%AE%9A%E4%B9%89.png" srcset="/img/loading.gif" lazyload alt="断言定义"></p><p><img src="/2021/12/12/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E8%AE%BA/%E6%96%AD%E8%A8%80%E7%A4%BA%E4%BE%8B.png" srcset="/img/loading.gif" lazyload alt="断言示例"></p><p>触发器：</p><p><img src="/2021/12/12/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E8%AE%BA/%E8%A7%A6%E5%8F%91%E5%99%A8%E5%AE%9A%E4%B9%89.png" srcset="/img/loading.gif" lazyload alt="触发器定义"></p><p>触发器的创建：</p><p><img src="/2021/12/12/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E8%AE%BA/%E8%A7%A6%E5%8F%91%E5%99%A8%E5%88%9B%E5%BB%BA.png" srcset="/img/loading.gif" lazyload alt="触发器创建"></p><p>触发器示例：</p><p><img src="/2021/12/12/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E8%AE%BA/%E8%A7%A6%E5%8F%91%E5%99%A8%E7%A4%BA%E4%BE%8B.png" srcset="/img/loading.gif" lazyload alt="触发器示例"></p><p>第五章总结：</p><p><img src="/2021/12/12/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E8%AE%BA/%E7%AC%AC%E4%BA%94%E7%AB%A0%E6%80%BB%E7%BB%93.png" srcset="/img/loading.gif" lazyload alt="第五章总结"></p><h2 id="六-关系数据理论"><a href="#六-关系数据理论" class="headerlink" title="六. 关系数据理论"></a>六. 关系数据理论</h2><h3 id="6-1-关系数据理论"><a href="#6-1-关系数据理论" class="headerlink" title="6.1 关系数据理论"></a>6.1 关系数据理论</h3><p>如何构造一个好的关系模式：</p><p><img src="/2021/12/12/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E8%AE%BA/6.1.1.png" srcset="/img/loading.gif" lazyload alt="6.1.1"></p><p>数据依赖：谁可以确定谁：</p><p><img src="/2021/12/12/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E8%AE%BA/6.1.2.png" srcset="/img/loading.gif" lazyload alt="6.1.2"></p><p>数据依赖是通过一个关系中属性间值的相等与否体现出来的数据间的相互关系，是数据内在的性质，是语义的体现。主要有以下几个类型：</p><ul><li>函数依赖(Functional Dependency，简记为FD)</li><li>多值依赖(Multivalued Dependency，简记为MVD)</li><li>连接依赖</li><li>………</li></ul><p>不合适的数据依赖，会造成插入异常、删除异常、更新异常和数据冗余问题。</p><hr><p>关系模式的简化：</p><p><img src="/2021/12/12/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E8%AE%BA/6.1.3.png" srcset="/img/loading.gif" lazyload alt="6.1.3"></p><p>举例：</p><p><img src="/2021/12/12/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E8%AE%BA/6.1.4.png" srcset="/img/loading.gif" lazyload alt="6.1.4"></p><h3 id="6-2-规范化"><a href="#6-2-规范化" class="headerlink" title="6.2 规范化"></a>6.2 规范化</h3><h4 id="6-2-1-函数依赖"><a href="#6-2-1-函数依赖" class="headerlink" title="6.2.1 函数依赖"></a>6.2.1 函数依赖</h4><p><img src="/2021/12/12/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E8%AE%BA/6.2.1.1.png" srcset="/img/loading.gif" lazyload alt="6.2.1.1"></p><p>函数依赖不是指关系模式R中的某个或某些关系实例r满足的约束条件，而是指R的所有关系实例r均要满足的约束条件，所以不能根据现有的关系实例来确实关系模式R存在某种函数依赖。</p><p><img src="/2021/12/12/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E8%AE%BA/6.2.1.2.png" srcset="/img/loading.gif" lazyload alt="6.2.1.2"></p><h4 id="6-2-2-平凡函数依赖和非平凡函数依赖"><a href="#6-2-2-平凡函数依赖和非平凡函数依赖" class="headerlink" title="6.2.2 平凡函数依赖和非平凡函数依赖"></a>6.2.2 平凡函数依赖和非平凡函数依赖</h4><p><img src="/2021/12/12/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E8%AE%BA/6.2.2.1.png" srcset="/img/loading.gif" lazyload alt="6.2.2.1"></p><h4 id="6-2-3-完全函数依赖和部分函数依赖"><a href="#6-2-3-完全函数依赖和部分函数依赖" class="headerlink" title="6.2.3 完全函数依赖和部分函数依赖"></a>6.2.3 完全函数依赖和部分函数依赖</h4><p><img src="/2021/12/12/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E8%AE%BA/6.2.3.1.png" srcset="/img/loading.gif" lazyload alt="6.2.3.1"></p><h4 id="6-2-4-传递函数依赖"><a href="#6-2-4-传递函数依赖" class="headerlink" title="6.2.4 传递函数依赖"></a>6.2.4 传递函数依赖</h4><p><img src="/2021/12/12/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E8%AE%BA/6.2.4.1.png" srcset="/img/loading.gif" lazyload alt="6.2.4.1"></p><h4 id="6-2-5-码"><a href="#6-2-5-码" class="headerlink" title="6.2.5 码"></a>6.2.5 码</h4><p><img src="/2021/12/12/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E8%AE%BA/6.2.5.1.png" srcset="/img/loading.gif" lazyload alt="6.2.5.1"></p><p><img src="/2021/12/12/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E8%AE%BA/6.2.5.2.png" srcset="/img/loading.gif" lazyload alt="6.2.5.2"></p><p><img src="/2021/12/12/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E8%AE%BA/6.2.5.3.png" srcset="/img/loading.gif" lazyload alt="6.2.5.3"></p><p>主码和外部码一起提供了表示关系间联系的手段</p><h3 id="6-3-范式"><a href="#6-3-范式" class="headerlink" title="6.3 范式"></a>6.3 范式</h3><p>范式是符合某一种级别的关系模式的集合。</p><p>关系数据库中的关系必须满足一定的要求，满足不同程度要求的为不同的范式。</p><p>范式种类：</p><ul><li>第一范式(1NF)</li><li>第二范式(2NF)</li><li>第三范式(3NF)</li><li>BC范式(BCNF,Boyce和Codd共同提出的范式)</li><li>第四范式(4NF)</li><li>第五范式(5NF)</li></ul><p><img src="/2021/12/12/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E8%AE%BA/6.3.1.png" srcset="/img/loading.gif" lazyload alt="6.3.1"></p><h4 id="6-3-1-第一范式"><a href="#6-3-1-第一范式" class="headerlink" title="6.3.1 第一范式"></a>6.3.1 第一范式</h4><p>1NF：如果一个关系模式R的所有属性都是不可分的基本数据项，则R属于1NF。就是分量不可分割。</p><p>第一范式是对关系模式的最起码的要求。不满足第一范式的数据库模式不能成为关系数据模式。</p><p>但是满足第一范式的关系模式并不一定是一个好的关系模式，可能会存在各种冲突，或相关操作效率不高。</p><h4 id="6-3-2-第二范式"><a href="#6-3-2-第二范式" class="headerlink" title="6.3.2 第二范式"></a>6.3.2 第二范式</h4><p>2NF：若关系模式R属于1NF，并且每一个非主属性都完全依赖与R的码，则R∈2NF。</p><p><img src="/2021/12/12/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E8%AE%BA/6.3.2.1.png" srcset="/img/loading.gif" lazyload alt="6.3.2.1"></p><p>上述关系存在很多问题：插入异常(插入后某些值为空)，删除异常(删除某些信息会导致其他信息一并删除)，数据冗余度大(某一个属性值较多，需要多次存储，其他的属性也要跟着存储)，修改复杂(同数据冗余度大)。</p><p>改进为2NF：</p><p><img src="/2021/12/12/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E8%AE%BA/6.3.2.2.png" srcset="/img/loading.gif" lazyload alt="6.3.2.2"></p><p><img src="/2021/12/12/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E8%AE%BA/6.3.2.3.png" srcset="/img/loading.gif" lazyload alt="6.3.2.3"></p><h4 id="6-3-3-第三范式"><a href="#6-3-3-第三范式" class="headerlink" title="6.3.3 第三范式"></a>6.3.3 第三范式</h4><p><img src="/2021/12/12/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E8%AE%BA/6.3.3.1.png" srcset="/img/loading.gif" lazyload alt="6.3.3.1"></p><p>2NF中可能存在传递依赖。改进：</p><p><img src="/2021/12/12/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E8%AE%BA/6.3.3.2.png" srcset="/img/loading.gif" lazyload alt="6.3.3.2"></p><p><img src="/2021/12/12/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E8%AE%BA/6.3.3.3.png" srcset="/img/loading.gif" lazyload alt="6.3.3.3"></p><p>在分解后的关系模式中，既没有非主属性对码的部分函数依赖，也没有非主属性对码的传递函数依赖，进一步改善了关系模式。</p><p>第三范式(3NF)：在2NF的基础上，解决了传递依赖的问题</p><p><img src="/2021/12/12/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E8%AE%BA/6.3.3.4.png" srcset="/img/loading.gif" lazyload alt="6.3.3.4"></p><ul><li>若R∈3NF,则R的每一个非主属性既不部分函数依赖于候选码，也不传递函数依赖于候选码。</li><li>如果R∈3NF，则R ∈2NF。</li><li>采用投影分解法将一个2NF的关系分解为多个3NF的关系，可以在一定程度上解决原2NF关系中存在的插入异常、删除异常、数据冗余度大、修改复杂等问题。</li><li>将一个2NF关系分解为多个3NF的关系后，并不能完全消除关系模式中的各种异常情况和数据冗余。</li></ul><h4 id="6-3-4-BC范式"><a href="#6-3-4-BC范式" class="headerlink" title="6.3.4 BC范式"></a>6.3.4 BC范式</h4><p>累了，看ppt吧</p><p><img src="/2021/12/12/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E8%AE%BA/6.3.4.1.png" srcset="/img/loading.gif" lazyload alt="6.3.4.1"></p><p><img src="/2021/12/12/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E8%AE%BA/6.3.4.2.png" srcset="/img/loading.gif" lazyload alt="6.3.4.2"></p><p><img src="/2021/12/12/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E8%AE%BA/6.3.4.3.png" srcset="/img/loading.gif" lazyload alt="6.3.4.3"></p><p><img src="/2021/12/12/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E8%AE%BA/6.3.4.4.png" srcset="/img/loading.gif" lazyload alt="6.3.4.4"></p><p><img src="/2021/12/12/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E8%AE%BA/6.3.4.5.png" srcset="/img/loading.gif" lazyload alt="6.3.4.5"></p><p><img src="/2021/12/12/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E8%AE%BA/6.3.4.6.png" srcset="/img/loading.gif" lazyload alt="6.3.4.6"></p><p><img src="/2021/12/12/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E8%AE%BA/6.3.4.7.png" srcset="/img/loading.gif" lazyload alt="6.3.4.7"></p>]]></content>
    
    
    <categories>
      
      <category>HUST</category>
      
    </categories>
    
    
    <tags>
      
      <tag>HUST</tag>
      
      <tag>DB</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Log4j远程代码执行漏洞复现</title>
    <link href="/2021/12/11/Log4j%E8%BF%9C%E7%A8%8B%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/"/>
    <url>/2021/12/11/Log4j%E8%BF%9C%E7%A8%8B%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="Apache-Log4j高危漏洞"><a href="#Apache-Log4j高危漏洞" class="headerlink" title="Apache-Log4j高危漏洞"></a>Apache-Log4j高危漏洞</h1><p>看热闹不嫌事大🤣🤣🤣，尝试复现一下</p><hr><p>Apache Log4j2是一个基于Java的日志记录工具。该工具重写了Log4j框架，并且引入了大量丰富的特性。我们可以控制日志信息输送的目的地为控制台、文件、GUI组件等，通过定义每一条日志信息的级别，能够更加细致地控制日志的生成过程。该日志框架被大量用于业务系统开发，用来记录日志信息。</p><p>2021年12月9日，经阿里安全团队验证，Log4j-2中存在JNDI注入漏洞，当程序将用户输入的数据被日志记录时，即可触发此漏洞，成功利用此漏洞可以在目标服务器上执行任意代码。鉴于此漏洞危害较大，建议客户尽快采取措施防护此漏洞。</p><p><strong>漏洞影响版本：</strong><code>Apache Log4j 2.x &lt;= 2.14.1</code></p><p><strong>漏洞级别：</strong> <strong>严重！！</strong></p><hr><ul><li><p>先来新建一个Maven项目，pom.xml文件中导入存在漏洞的Log4j版本：</p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- https://search.maven.org/ --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.logging.log4j<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>log4j-core<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.14.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-comment">&lt;!-- https://search.maven.org/ --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.logging.log4j<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>log4j-api<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></div></td></tr></table></figure></li><li><p>新建一个java文件，具体测试代码如下，先正常尝试一下：</p><figure class="highlight arduino"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs arduino"><span class="hljs-keyword">import</span> org.apache.logging.log4j.LogManager;<br><span class="hljs-keyword">import</span> org.apache.logging.log4j.Logger;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Log4j</span> &#123;</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> Logger logger = LogManager.<span class="hljs-built_in">getLogger</span>(Log4j.class);<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">String</span>[] args)</span> </span>&#123;<br>        <span class="hljs-keyword">String</span> username = <span class="hljs-string">&quot;This is a message&quot;</span>;<br>        logger.<span class="hljs-built_in">error</span>(username);<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>运行一下：</p><p><img src="/2021/12/11/Log4j%E8%BF%9C%E7%A8%8B%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/%E6%AD%A3%E5%B8%B8%E6%83%85%E5%86%B5.png" srcset="/img/loading.gif" lazyload alt="正常情况"></p></li></ul><p>​        可见通过使用Log4j的相关函数，可以实现在运行中打印相关日志。</p><ul><li><p>做点手脚，将uername的字符串内容换成<code>$&#123;java:os&#125;</code>,运行一下：</p><p><img src="/2021/12/11/Log4j%E8%BF%9C%E7%A8%8B%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/%E6%81%B6%E6%84%8F%E6%B3%A8%E5%85%A5.png" srcset="/img/loading.gif" lazyload alt="恶意注入"></p></li></ul><p>​    他竟然把我们的字符串内容当成命令执行了！！这还了得！！😡😡</p><p>​    后续复现需要搭后台服务，我搞了半天也没成功，就这样吧😭😭😭</p>]]></content>
    
    
    <categories>
      
      <category>安全</category>
      
    </categories>
    
    
    <tags>
      
      <tag>安全</tag>
      
      <tag>漏洞复现</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>HUST操作系统实验3</title>
    <link href="/2021/12/07/OS%E5%AE%9E%E9%AA%8C%E4%B8%89/"/>
    <url>/2021/12/07/OS%E5%AE%9E%E9%AA%8C%E4%B8%89/</url>
    
    <content type="html"><![CDATA[<h1 id="实验三-内存管理"><a href="#实验三-内存管理" class="headerlink" title="实验三.内存管理"></a>实验三.内存管理</h1><p><img src="/2021/12/07/OS%E5%AE%9E%E9%AA%8C%E4%B8%89/%E5%AE%9E%E9%AA%8C%E8%A6%81%E6%B1%82.png" srcset="/img/loading.gif" lazyload alt="实验要求"></p><h2 id="3-1理解程序局部性原理"><a href="#3-1理解程序局部性原理" class="headerlink" title="3.1理解程序局部性原理"></a>3.1理解程序局部性原理</h2><p><img src="/2021/12/07/OS%E5%AE%9E%E9%AA%8C%E4%B8%89/3.1.png" srcset="/img/loading.gif" lazyload alt="3.1"></p><p><strong>以下部分为错误尝试：</strong></p><hr><p>为了实现在Linux上查看系统的缺页次数，需要使用到一个工具SAR (System Activity Reporter系统活动情况报告).</p><p>SAR是目前 <a href="http://lovesoo.org/tag/linux">Linux</a> 上最为全面的系统<a href="http://lovesoo.org/tag/%E6%80%A7%E8%83%BD%E5%88%86%E6%9E%90">性能分析</a>工具之一，可以从多方面对系统的活动进行报告，包括：文件的读写情况、系统调用的使用情况、<a href="http://lovesoo.org/tag/%E7%A3%81%E7%9B%98">磁盘</a><a href="http://lovesoo.org/tag/io">I/O</a>、<a href="http://lovesoo.org/tag/cpu">CPU</a>效率、<a href="http://lovesoo.org/tag/%E5%86%85%E5%AD%98">内存</a>使用状况、进程活动及IPC有关的活动等。</p><ul><li>安装SAR</li></ul><figure class="highlight x86asm"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs x86asm"><span class="hljs-number">1</span>.使用<span class="hljs-keyword">sar</span> -help判断当前系统是否已经安装<span class="hljs-keyword">sar</span>，若已经安装，则可以直接使用<br><span class="hljs-number">2</span>.若当前系统中无<span class="hljs-keyword">sar</span>，则使用命令yum install sysstat<br><span class="hljs-number">3</span>.安装完sysstat工具后，便可使用<span class="hljs-keyword">sar</span>命令<br></code></pre></div></td></tr></table></figure><ul><li>使用SAR获取系统缺页信息</li></ul><figure class="highlight less"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs less">例如，每<span class="hljs-selector-tag">10</span>秒采样一次，连续采样<span class="hljs-selector-tag">3</span>次，监控内存分页：<br>使用命令：<br><span class="hljs-selector-tag">sar</span> <span class="hljs-selector-tag">-B</span> <span class="hljs-selector-tag">10</span> <span class="hljs-selector-tag">3</span><br>输出项说明：<br><span class="hljs-selector-tag">pgpgin</span>/<span class="hljs-selector-tag">s</span>：表示每秒从磁盘或<span class="hljs-selector-tag">SWAP</span>置换到内存的字节数(KB)<br><span class="hljs-selector-tag">pgpgout</span>/<span class="hljs-selector-tag">s</span>：表示每秒从内存置换到磁盘或<span class="hljs-selector-tag">SWAP</span>的字节数(KB)<br><span class="hljs-selector-tag">fault</span>/<span class="hljs-selector-tag">s</span>：每秒钟系统产生的缺页数,即主缺页与次缺页之和(major + minor)<br><span class="hljs-selector-tag">majflt</span>/<span class="hljs-selector-tag">s</span>：每秒钟产生的主缺页数.<br><span class="hljs-selector-tag">pgfree</span>/<span class="hljs-selector-tag">s</span>：每秒被放入空闲队列中的页个数<br><span class="hljs-selector-tag">pgscank</span>/<span class="hljs-selector-tag">s</span>：每秒被<span class="hljs-selector-tag">kswapd</span>扫描的页个数<br><span class="hljs-selector-tag">pgscand</span>/<span class="hljs-selector-tag">s</span>：每秒直接被扫描的页个数<br><span class="hljs-selector-tag">pgsteal</span>/<span class="hljs-selector-tag">s</span>：每秒钟从<span class="hljs-selector-tag">cache</span>中被清除来满足内存需要的页个数<br>%<span class="hljs-selector-tag">vmeff</span>：每秒清除的页(pgsteal)占总扫描页(pgscank+pgscand)的百分比<br></code></pre></div></td></tr></table></figure><p>SAR命令详解，参考链接：<a href="https://www.cnblogs.com/zcx-python/p/9001630.html">linux sar命令详解</a></p><p>经过实验发现SAR命令并不能满足我的需求，因为他检测的是整个系统的情况，而且是分时采样的到的结果，无法满足我检测单个进程中的缺页情况</p><hr><p><strong>正确尝试:</strong></p><p>使用命令：</p><p><code>ps -eo min_flt,maj_flt,pid,%cpu,%mem,pagein,args --sort=min_flt</code></p><p>可以查看当前正在运行的进程各自的缺页情况，显示结果中MINFLT为页分配时的缺页，MAJFLT为磁盘读写时的缺页，然后依次是PID，CPU占用，内存占用，从磁盘加载页面到物理内存。</p><p>该命令测出的是正在运行的程序的缺页情况，因此可令测试程序执行完后，休眠几秒，在未结束时，执行上面的命令，获取本次测试程序的缺页情况。</p><p>为充分展示由于局部性原理而造成的差异，下面进行几组对比实验：</p><ul><li>数组较小，内外循环次数一致</li></ul><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;unistd.h&gt;</span></span><br><span class="hljs-keyword">int</span> array[<span class="hljs-number">2048</span>][<span class="hljs-number">2048</span>];<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>,j=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;i&lt;=<span class="hljs-number">2000</span>;i++)&#123;<br>        <span class="hljs-keyword">for</span>(j=<span class="hljs-number">0</span>;j&lt;=<span class="hljs-number">2000</span>;j++)&#123;<br>           array[i][j] = <span class="hljs-number">0</span>;<br>         &#125; <br>    &#125;     <br>   <span class="hljs-built_in">sleep</span>(<span class="hljs-number">10</span>); <br>   <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;OK\n&quot;</span>);<br>   <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;             <br>&#125;  <br></code></pre></div></td></tr></table></figure><p><img src="/2021/12/07/OS%E5%AE%9E%E9%AA%8C%E4%B8%89/test1.png" srcset="/img/loading.gif" lazyload alt="test1"></p><p>可以看到，本次运行，缺页次数：4171</p><ul><li>数组较大，内外循环次数一致：</li></ul><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;unistd.h&gt;</span></span><br><span class="hljs-keyword">int</span> array[<span class="hljs-number">20480</span>][<span class="hljs-number">20480</span>];<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>,j=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;i&lt;=<span class="hljs-number">20000</span>;i++)&#123;<br>        <span class="hljs-keyword">for</span>(j=<span class="hljs-number">0</span>;j&lt;=<span class="hljs-number">20000</span>;j++)&#123;<br>           array[i][j] = <span class="hljs-number">0</span>;<br>         &#125; <br>    &#125;     <br>   <span class="hljs-built_in">sleep</span>(<span class="hljs-number">10</span>); <br>   <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;OK\n&quot;</span>);<br>   <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;             <br>&#125;  <br></code></pre></div></td></tr></table></figure><p><img src="/2021/12/07/OS%E5%AE%9E%E9%AA%8C%E4%B8%89/test2.png" srcset="/img/loading.gif" lazyload alt="test2"></p><p>本次运行，缺页次数：400190</p><ul><li>数组较大，外层大循环，内层小循环：</li></ul><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;unistd.h&gt;</span></span><br><span class="hljs-keyword">int</span> array[<span class="hljs-number">20480</span>][<span class="hljs-number">20480</span>];<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>,j=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;i&lt;=<span class="hljs-number">20000</span>;i++)&#123;<br>        <span class="hljs-keyword">for</span>(j=<span class="hljs-number">0</span>;j&lt;=<span class="hljs-number">200</span>;j++)&#123;<br>           array[i][j] = <span class="hljs-number">0</span>;<br>         &#125; <br>    &#125;     <br>   <span class="hljs-built_in">sleep</span>(<span class="hljs-number">10</span>); <br>   <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;OK\n&quot;</span>);<br>   <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;             <br>&#125;  <br></code></pre></div></td></tr></table></figure><p><img src="/2021/12/07/OS%E5%AE%9E%E9%AA%8C%E4%B8%89/test3.png" srcset="/img/loading.gif" lazyload alt="test3"></p><p>本次运行，缺页次数：20171</p><ul><li>数组较大，外层小循环，内层大循环:</li></ul><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;unistd.h&gt;</span></span><br><span class="hljs-keyword">int</span> array[<span class="hljs-number">20480</span>][<span class="hljs-number">20480</span>];<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>,j=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;i&lt;=<span class="hljs-number">200</span>;i++)&#123;<br>        <span class="hljs-keyword">for</span>(j=<span class="hljs-number">0</span>;j&lt;=<span class="hljs-number">20000</span>;j++)&#123;<br>           array[i][j] = <span class="hljs-number">0</span>;<br>         &#125; <br>    &#125;     <br>   <span class="hljs-built_in">sleep</span>(<span class="hljs-number">10</span>); <br>   <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;OK\n&quot;</span>);<br>   <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;             <br>&#125;  <br></code></pre></div></td></tr></table></figure><p><img src="/2021/12/07/OS%E5%AE%9E%E9%AA%8C%E4%B8%89/test4.png" srcset="/img/loading.gif" lazyload alt="test4"></p><p>本次运行，缺页次数：4170</p><p>根据上述此次不同情况的程序运行结果，可以看到，随着访问数据量的增大，缺页次数也在增大。</p><p>在访问数据量相同的情况下，访问更多顺序存储的数据，缺页次数会更少，体现了空间局部性原理。</p><h2 id="3-2-模拟实现OPT和LRU淘汰算法"><a href="#3-2-模拟实现OPT和LRU淘汰算法" class="headerlink" title="3.2 模拟实现OPT和LRU淘汰算法"></a>3.2 模拟实现OPT和LRU淘汰算法</h2><p><img src="/2021/12/07/OS%E5%AE%9E%E9%AA%8C%E4%B8%89/3.2.png" srcset="/img/loading.gif" lazyload alt="3.2"></p><p>实现代码：<a href="https://github.com/ziyikee/LRU-FIFO-OPT-/tree/master">HUST操作系统试验：LRU,FIFO,OPT算法模拟 (github.com)</a></p><h2 id="3-3-利用pagemap计算虚拟地址对应的物理地址"><a href="#3-3-利用pagemap计算虚拟地址对应的物理地址" class="headerlink" title="3.3 利用pagemap计算虚拟地址对应的物理地址"></a>3.3 利用pagemap计算虚拟地址对应的物理地址</h2><p><img src="/2021/12/07/OS%E5%AE%9E%E9%AA%8C%E4%B8%89/3.3%E8%A6%81%E6%B1%82.png" srcset="/img/loading.gif" lazyload alt="3.3要求"></p><p>网上嫖来修改之后的代码，重复代码较多，可以修改一下将打印信息放在求物理地址函数内部：</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;sys/types.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;unistd.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;sys/stat.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;fcntl.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdint.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string.h&gt;</span></span><br><span class="hljs-keyword">bool</span> flag =<span class="hljs-literal">true</span>;<br><span class="hljs-keyword">char</span> pagemap_path[<span class="hljs-number">100</span>]; <span class="hljs-comment">//保存pagemap的路径</span><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> a1 = <span class="hljs-number">100</span>;<span class="hljs-comment">//全局常量</span><br><span class="hljs-keyword">int</span> a2 = <span class="hljs-number">200</span>;<br><span class="hljs-comment">//计算虚拟地址对应的地址，传入虚拟地址vaddr，通过paddr传出物理地址,通过v_index传出页号，通过p_index传出页框</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">mem_addr</span><span class="hljs-params">(<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span>   vaddr, <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span>   *v_index,<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span> *paddr,<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span>  *p_index)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span>   pageSize =(<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span>)<span class="hljs-built_in">getpagesize</span>();<span class="hljs-comment">//调用此函数获取系统设定的页面大小</span><br><br>    <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span>   v_pageIndex = vaddr / pageSize;<span class="hljs-comment">//计算此虚拟地址相对于0x0的经过的页面数</span><br>    *v_index = v_pageIndex;  <span class="hljs-comment">//获取页号</span><br>    <span class="hljs-keyword">uint64_t</span>   v_offset = v_pageIndex * <span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(<span class="hljs-keyword">uint64_t</span>);<span class="hljs-comment">//计算在/proc/pid/page_map文件中的偏移量</span><br>    <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span>   page_offset = vaddr % pageSize;<span class="hljs-comment">//计算虚拟地址在页面中的偏移量</span><br>    <span class="hljs-keyword">uint64_t</span>  item = <span class="hljs-number">0</span>;<span class="hljs-comment">//存储对应项的值</span><br><br>    <span class="hljs-keyword">int</span> fd = <span class="hljs-built_in">open</span>(pagemap_path, O_RDONLY);<span class="hljs-comment">//以只读方式打开/proc/pid/page_map</span><br>    <span class="hljs-keyword">if</span>(fd == <span class="hljs-number">-1</span>)<span class="hljs-comment">//判断是否打开失败</span><br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;open /proc/self/pagemap error\n&quot;</span>);<br>        flag = <span class="hljs-literal">false</span>;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">if</span>(<span class="hljs-built_in">lseek</span>(fd, v_offset, SEEK_SET) == <span class="hljs-number">-1</span>)<span class="hljs-comment">//将游标移动到相应位置，即对应项的起始地址且判断是否移动失败</span><br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;sleek error\n&quot;</span>);<br>        flag = <span class="hljs-literal">false</span>;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">if</span>(<span class="hljs-built_in">read</span>(fd, &amp;item, <span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(<span class="hljs-keyword">uint64_t</span>)) != <span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(<span class="hljs-keyword">uint64_t</span>))<span class="hljs-comment">//读取对应项的值，并存入item中，且判断读取数据位数是否正确</span><br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;read item error\n&quot;</span>);<br>        flag = <span class="hljs-literal">false</span>;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>        <span class="hljs-keyword">if</span>((((<span class="hljs-keyword">uint64_t</span>)<span class="hljs-number">1</span> &lt;&lt; <span class="hljs-number">63</span>) &amp; item) == <span class="hljs-number">0</span>)<span class="hljs-comment">//判断present是否为0</span><br>       &#123;        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;page present is 0\n&quot;</span>);<br>                flag = <span class="hljs-literal">false</span>;<br>                <span class="hljs-keyword">return</span> ;<br>    &#125;<br><br>        <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span> phy_pageIndex = (((<span class="hljs-keyword">uint64_t</span>)<span class="hljs-number">1</span> &lt;&lt; <span class="hljs-number">55</span>) - <span class="hljs-number">1</span>) &amp; item;<span class="hljs-comment">//计算物理页号，即取item的bit0-54</span><br>        *p_index = phy_pageIndex;<span class="hljs-comment">//获取页框</span><br><br>        *paddr = (phy_pageIndex * pageSize) + page_offset;<span class="hljs-comment">//再加上页内偏移量就得到了物理地址</span><br>        <span class="hljs-built_in">close</span>(fd);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> b1 = <span class="hljs-number">100</span>;<span class="hljs-comment">//局部变量</span><br>    <span class="hljs-keyword">int</span> b2 = <span class="hljs-number">100</span>;<br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> c1 = <span class="hljs-number">100</span>;<span class="hljs-comment">//局部静态变量</span><br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> c2 = <span class="hljs-number">100</span>;<br>    <span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> d1 = <span class="hljs-number">100</span>;<span class="hljs-comment">//局部常量</span><br>    <span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> d2 =<span class="hljs-number">100</span>;<br><br>    <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span>  phy = <span class="hljs-number">0</span>;<span class="hljs-comment">//物理地址</span><br>    <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span>  v_index = <span class="hljs-number">0</span>;<span class="hljs-comment">//虚拟页号</span><br>    <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span>  p_index = <span class="hljs-number">0</span>;<span class="hljs-comment">//物理页框</span><br><br>    <span class="hljs-keyword">double</span>  *p1 = (<span class="hljs-keyword">double</span>*)<span class="hljs-built_in">malloc</span>(<span class="hljs-number">10000</span>*<span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(<span class="hljs-keyword">double</span>));<span class="hljs-comment">//动态内存</span><br>    <span class="hljs-keyword">double</span>  *p2 = (<span class="hljs-keyword">double</span>*)<span class="hljs-built_in">malloc</span>(<span class="hljs-number">10000</span>*<span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(<span class="hljs-keyword">double</span>));<br><br>    <span class="hljs-keyword">int</span> g = <span class="hljs-built_in">getpid</span>();<span class="hljs-comment">//获取进程id</span><br>    <span class="hljs-keyword">char</span> buf[<span class="hljs-number">10</span>];<br>    <span class="hljs-built_in">sprintf</span>(buf,<span class="hljs-string">&quot;%d&quot;</span>,g);<br>    <span class="hljs-built_in">strcat</span>(pagemap_path,<span class="hljs-string">&quot;/proc/&quot;</span>);<br>    <span class="hljs-built_in">strcat</span>(pagemap_path,buf);<br>    <span class="hljs-built_in">strcat</span>(pagemap_path,<span class="hljs-string">&quot;/pagemap&quot;</span>);<span class="hljs-comment">//拼接文件路径</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;当前进程id：%d\n&quot;</span>,<span class="hljs-built_in">getpid</span>());<br>    <span class="hljs-built_in">mem_addr</span>((<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span> )&amp;b2, &amp;v_index, &amp;phy, &amp;p_index);<br>    <span class="hljs-built_in">mem_addr</span>((<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span> )&amp;a1, &amp;v_index, &amp;phy, &amp;p_index);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;全局常量a1：virtual addr = %lx , virtual index = %lx , physical addr = %lx , physical index = %lx\n&quot;</span>,(<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span>)&amp;a1, v_index, phy, p_index);<br>    <span class="hljs-built_in">mem_addr</span>((<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span>)&amp;a2, &amp;v_index, &amp;phy, &amp;p_index);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;全局变量a2：virtual addr = %lx , virtual index = %lx , physical addr = %lx , physical index = %lx\n&quot;</span>,(<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span>)&amp;a2, v_index, phy, p_index);<br><br>    <span class="hljs-built_in">mem_addr</span>((<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span>)&amp;b1, &amp;v_index, &amp;phy, &amp;p_index);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;局部变量b1：virtual addr = %lx , virtual index = %lx , physical addr = %lx , physical index = %lx\n&quot;</span>, (<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span>)&amp;b1, v_index, phy, p_index);<br>    <span class="hljs-built_in">mem_addr</span>((<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span>)&amp;b2, &amp;v_index, &amp;phy, &amp;p_index);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;局部变量b2：virtual addr = %lx , virtual index = %lx , physical addr = %lx , physical index = %lx\n&quot;</span>, (<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span> )&amp;b2, v_index, phy, p_index);<br><br>    <span class="hljs-built_in">mem_addr</span>((<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span>)&amp;c1, &amp;v_index, &amp;phy, &amp;p_index);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;局部静态变量c1：virtual addr = %lx , virtual index = %lx , physical addr = %lx , physical index = %lx\n&quot;</span>, (<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span>)&amp;c1, v_index, phy, p_index);<br>    <span class="hljs-built_in">mem_addr</span>((<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span>)&amp;c2, &amp;v_index, &amp;phy, &amp;p_index);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;局部静态变量c2：virtual addr = %lx , virtual index = %lx , physical addr = %lx , physical index = %lx\n&quot;</span>, (<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span>)&amp;c2, v_index, phy, p_index);<br><br>    <span class="hljs-built_in">mem_addr</span>((<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span> )&amp;d1, &amp;v_index, &amp;phy, &amp;p_index);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;局部常量d1：virtual addr = %lx , virtual index = %lx , physical addr = %lx , physical index = %lx\n&quot;</span>, (<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span>)&amp;d1, v_index, phy, p_index);<br>    <span class="hljs-built_in">mem_addr</span>((<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span>)&amp;d2, &amp;v_index, &amp;phy, &amp;p_index);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;局部常量d2：virtual addr = %lu , virtual index = %lx , physical addr = %lx , physical index = %lx\n&quot;</span>, (<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span>)&amp;d2, v_index, phy, p_index);<br><br>    <span class="hljs-built_in">mem_addr</span>((<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span>)p1, &amp;v_index, &amp;phy, &amp;p_index);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;动态内存p1：virtual addr = %lx , virtual index = %lx , physical addr = %lx , physical index = %lx\n&quot;</span>, (<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span>)p1, v_index, phy, p_index);<br>    <span class="hljs-built_in">mem_addr</span>((<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span>)p2, &amp;v_index, &amp;phy, &amp;p_index);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;动态内存p2：virtual addr = %lx , virtual index = %lx , physical addr = %lx , physical index = %lx\n&quot;</span>, (<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span>)p2, v_index, phy, p_index);<br><br>    <span class="hljs-built_in">free</span>(p1);<br>    <span class="hljs-built_in">free</span>(p2);<br><br>    <span class="hljs-built_in">sleep</span>(<span class="hljs-number">100000</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>编译运行结果如下：</p><p><img src="/2021/12/07/OS%E5%AE%9E%E9%AA%8C%E4%B8%89/3.3.1.png" srcset="/img/loading.gif" lazyload alt="运行结果对比"></p><p>从上图可以看出，不同pid的进程，只有全局常量的物理地址和物理页号相同，其他的地址均不相同。（这里不知为何同样的代码，直接&amp;取地址，虚拟地址竟然不一样。。。）</p><p><strong>如何通过扩充实验验证不同进程的共享库具有同一物理地址？</strong></p><p>直接使用上述代码对函数名取地址的方法不可行，计算出来不同进程的共享库地址是相同的，但是自定义的函数地址也相同，不是很合理。</p><p>更改一下代码，采用另一种方式进行验证：</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;sys/types.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;unistd.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;sys/stat.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;fcntl.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdint.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string.h&gt;</span></span><br><br><span class="hljs-comment">//计算虚拟地址对应的地址，传入虚拟地址vaddr，通过paddr传出物理地址,通过v_index传出页号，通过p_index传出页框</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">mem_addr</span><span class="hljs-params">(<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span> pid,<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span>  vaddr, <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span>  *v_index,<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span> *paddr,<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span> *p_index)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span>  pageSize =(<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span>)<span class="hljs-built_in">getpagesize</span>();<span class="hljs-comment">//调用此函数获取系统设定的页面大小</span><br><br>    <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span>  v_pageIndex = vaddr / pageSize;<span class="hljs-comment">//计算此虚拟地址相对于0x0的经过的页面数</span><br>    *v_index = v_pageIndex;  <span class="hljs-comment">//获取页号</span><br>    <span class="hljs-keyword">uint64_t</span>  v_offset = v_pageIndex * <span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(<span class="hljs-keyword">uint64_t</span>);<span class="hljs-comment">//计算在/proc/pid/page_map文件中的偏移量</span><br>    <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span>  page_offset = vaddr % pageSize;<span class="hljs-comment">//计算虚拟地址在页面中的偏移量</span><br>    <span class="hljs-keyword">uint64_t</span> item = <span class="hljs-number">0</span>;<span class="hljs-comment">//存储对应项的值</span><br><br>    <span class="hljs-keyword">char</span> path[<span class="hljs-number">200</span>];<br>    <span class="hljs-built_in">sprintf</span>(path,<span class="hljs-string">&quot;%s%lu%s&quot;</span>,<span class="hljs-string">&quot;/proc/&quot;</span>,pid,<span class="hljs-string">&quot;/pagemap&quot;</span>);<br>    <span class="hljs-keyword">int</span> fd = <span class="hljs-built_in">open</span>(path, O_RDONLY);<span class="hljs-comment">//以只读方式打开/proc/pid/page_map</span><br>    <span class="hljs-keyword">if</span>(fd == <span class="hljs-number">-1</span>)<span class="hljs-comment">//判断是否打开失败</span><br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;open /proc/self/pagemap error\n&quot;</span>);<br>        flag = <span class="hljs-literal">false</span>;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">if</span>(<span class="hljs-built_in">lseek</span>(fd, v_offset, SEEK_SET) == <span class="hljs-number">-1</span>)<span class="hljs-comment">//将游标移动到相应位置，即对应项的起始地址且判断是否移动失败</span><br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;sleek error\n&quot;</span>);<br>        flag = <span class="hljs-literal">false</span>;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">if</span>(<span class="hljs-built_in">read</span>(fd, &amp;item, <span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(<span class="hljs-keyword">uint64_t</span>)) != <span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(<span class="hljs-keyword">uint64_t</span>))<span class="hljs-comment">//读取对应项的值，并存入item中，且判断读取数据位数是否正确</span><br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;read item error\n&quot;</span>);<br>        flag = <span class="hljs-literal">false</span>;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-built_in">is_bigendian</span>())&#123;<span class="hljs-comment">//da duan</span><br>        <span class="hljs-keyword">if</span>((((<span class="hljs-keyword">uint64_t</span>)<span class="hljs-number">1</span> &lt;&lt; <span class="hljs-number">63</span>) &amp; item) == <span class="hljs-number">0</span>)<span class="hljs-comment">//判断present是否为0</span><br>        &#123;<br>                <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;page present is 0\n&quot;</span>);<br>                flag = <span class="hljs-literal">false</span>;<br>                <span class="hljs-keyword">return</span> ;<br>        &#125;<br>        <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span> phy_pageIndex = (((<span class="hljs-keyword">uint64_t</span>)<span class="hljs-number">1</span> &lt;&lt; <span class="hljs-number">55</span>) - <span class="hljs-number">1</span>) &amp; item;<span class="hljs-comment">//计算物理页号，即取item的bit0-54</span><br>        *p_index = phy_pageIndex;<span class="hljs-comment">//获取页框</span><br><br>        *paddr = (phy_pageIndex * pageSize) + page_offset;<span class="hljs-comment">//再加上页内偏移量就得到了物理地址</span><br>    &#125;<span class="hljs-keyword">else</span>&#123; <span class="hljs-comment">//xiao duan</span><br>        <span class="hljs-keyword">if</span>((((<span class="hljs-keyword">uint64_t</span>)<span class="hljs-number">1</span>&lt;&lt;<span class="hljs-number">63</span>) &amp; item) == <span class="hljs-number">0</span>)<span class="hljs-comment">//判断present是否为0</span><br>        &#123;<br>                <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;page present is 0\n&quot;</span>);<br>                flag = <span class="hljs-literal">false</span>;<br>                <span class="hljs-keyword">return</span> ;<br>        &#125;<br>        <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span> phy_pageIndex = (<span class="hljs-number">0xfffffffffffffe00</span>) &amp; item;<span class="hljs-comment">//计算物理页号，即取item的bit0-54</span><br>        *p_index = phy_pageIndex;<span class="hljs-comment">//获取页框</span><br>        *paddr = (phy_pageIndex * pageSize) + page_offset;<span class="hljs-comment">//再加上页内偏移量就得到了物理地址    </span><br>    &#125;<br>    <span class="hljs-built_in">close</span>(fd);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">int</span> argc,<span class="hljs-keyword">char</span>* argv[])</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span>  phy = <span class="hljs-number">0</span>;<span class="hljs-comment">//物理地址</span><br>    <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span>  v_index = <span class="hljs-number">0</span>;<span class="hljs-comment">//虚拟页号</span><br>    <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span>  p_index = <span class="hljs-number">0</span>;<span class="hljs-comment">//物理页框</span><br>    <span class="hljs-built_in">mem_addr</span>(<span class="hljs-built_in">atoi</span>(argv[<span class="hljs-number">1</span>]), (<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span>)<span class="hljs-built_in">strtol</span>(argv[<span class="hljs-number">2</span>],<span class="hljs-literal">NULL</span>,<span class="hljs-number">16</span>),&amp;v_index, &amp;phy, &amp;p_index);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;virtual addr = %s , virtual index = %lx , physical addr = %lx , physical index = %lx\n&quot;</span>, argv[<span class="hljs-number">2</span>], v_index, phy, p_index);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>首先运行同一份代码的两个进程，pid分别为23884和24133，查看他们各自的maps，如图：</p><p><img src="/2021/12/07/OS%E5%AE%9E%E9%AA%8C%E4%B8%89/3.3.2.png" srcset="/img/loading.gif" lazyload alt="3.3.2"></p><p><img src="/2021/12/07/OS%E5%AE%9E%E9%AA%8C%E4%B8%89/3.3.3.png" srcset="/img/loading.gif" lazyload alt="3.3.3"></p><p>可以看到他们都使用了ld-2.27.so共享库，我们将两个进程的pid和共享库虚拟地址值作为参数，输入上述代码编译好的程序中，求他们的物理地址和物理页框号，运行结果如下：</p><p><img src="/2021/12/07/OS%E5%AE%9E%E9%AA%8C%E4%B8%89/3.3.4.png" srcset="/img/loading.gif" lazyload alt="ld-2.27.so"></p><p>从上图可以看到，不同进程链接同一个共享库，他们各自的虚拟地址不同，但是对应同一个物理地址。测试其他的库，依然可以看到同一个共享库的物理地址相同，如图：</p><p><img src="/2021/12/07/OS%E5%AE%9E%E9%AA%8C%E4%B8%89/3.3.5.png" srcset="/img/loading.gif" lazyload alt="libdl-2.27.so"></p>]]></content>
    
    
    <categories>
      
      <category>HUST</category>
      
    </categories>
    
    
    <tags>
      
      <tag>HUST</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>实现分布式ID</title>
    <link href="/2021/12/03/%E5%AE%9E%E7%8E%B0%E5%88%86%E5%B8%83%E5%BC%8FID/"/>
    <url>/2021/12/03/%E5%AE%9E%E7%8E%B0%E5%88%86%E5%B8%83%E5%BC%8FID/</url>
    
    <content type="html"><![CDATA[<div class="note note-success">            <p>转载自<a href="https://github.com/Snailclimb/JavaGuide/blob/main/docs/distributed-system/distributed-id.md">JavaGuide</a></p>          </div><div class="note note-info">            <p>将来面试必然会遇到此类问题</p>          </div><h1 id="分布式-ID"><a href="#分布式-ID" class="headerlink" title="分布式 ID"></a>分布式 ID</h1><h2 id="分布式-ID-介绍"><a href="#分布式-ID-介绍" class="headerlink" title="分布式 ID 介绍"></a>分布式 ID 介绍</h2><h3 id="何为-ID？"><a href="#何为-ID？" class="headerlink" title="何为 ID？"></a>何为 ID？</h3><p>日常开发中，我们需要对系统中的各种数据使用 ID 唯一表示，比如用户 ID 对应且仅对应一个人，商品 ID 对应且仅对应一件商品，订单 ID 对应且仅对应一个订单。</p><p><img src="/2021/12/03/%E5%AE%9E%E7%8E%B0%E5%88%86%E5%B8%83%E5%BC%8FID/1.png" srcset="/img/loading.gif" lazyload alt="1"></p><p>我们现实生活中也有各种 ID，比如身份证 ID 对应且仅对应一个人、地址 ID 对应且仅对应</p><p>简单来说，<strong>ID 就是数据的唯一标识</strong>。</p><h3 id="何为分布式-ID？"><a href="#何为分布式-ID？" class="headerlink" title="何为分布式 ID？"></a>何为分布式 ID？</h3><p>分布式 ID 是分布式系统下的 ID。分布式 ID 不存在与现实生活中，属于计算机系统中的一个概念。</p><p>我简单举一个分库分表的例子。</p><p>我司的一个项目，使用的是单机 MySQL 。但是，没想到的是，项目上线一个月之后，随着使用人数越来越多，整个系统的数据量将越来越大。</p><p>单机 MySQL 已经没办法支撑了，需要进行分库分表（推荐 Sharding-JDBC）。</p><p>在分库之后， 数据遍布在不同服务器上的数据库，数据库的自增主键已经没办法满足生成的主键唯一了。<strong>我们如何为不同的数据节点生成全局唯一主键呢？</strong></p><p><img src="https://oscimg.oschina.net/oscnet/up-d78d9d5362c71f4713a090baf7ec65d2b6d.png" srcset="/img/loading.gif" lazyload></p><p>这个时候就需要生成<strong>分布式 ID</strong>了。</p><h3 id="分布式-ID-需要满足哪些要求"><a href="#分布式-ID-需要满足哪些要求" class="headerlink" title="分布式 ID 需要满足哪些要求?"></a>分布式 ID 需要满足哪些要求?</h3><p><img src="https://img-blog.csdnimg.cn/20210610082309988.png" srcset="/img/loading.gif" lazyload></p><p>分布式 ID 作为分布式系统中必不可少的一环，很多地方都要用到分布式 ID。</p><p>一个最基本的分布式 ID 需要满足下面这些要求：</p><ul><li><strong>全局唯一</strong> ：ID 的全局唯一性肯定是首先要满足的！</li><li><strong>高性能</strong> ： 分布式 ID 的生成速度要快，对本地资源消耗要小。</li><li><strong>高可用</strong> ：生成分布式 ID 的服务要保证可用性无限接近于 100%。</li><li><strong>方便易用</strong> ：拿来即用，使用方便，快速接入！</li></ul><p>除了这些之外，一个比较好的分布式 ID 还应保证：</p><ul><li><strong>安全</strong> ：ID 中不包含敏感信息。</li><li><strong>有序递增</strong> ：如果要把 ID 存放在数据库的话，ID 的有序性可以提升数据库写入速度。并且，很多时候 ，我们还很有可能会直接通过 ID 来进行排序。</li><li><strong>有具体的业务含义</strong> ：生成的 ID 如果能有具体的业务含义，可以让定位问题以及开发更透明化（通过 ID 就能确定是哪个业务）。</li><li><strong>独立部署</strong> ：也就是分布式系统单独有一个发号器服务，专门用来生成分布式 ID。这样就生成 ID 的服务可以和业务相关的服务解耦。不过，这样同样带来了网络调用消耗增加的问题。总的来说，如果需要用到分布式 ID 的场景比较多的话，独立部署的发号器服务还是很有必要的。</li></ul><h2 id="分布式-ID-常见解决方案"><a href="#分布式-ID-常见解决方案" class="headerlink" title="分布式 ID 常见解决方案"></a>分布式 ID 常见解决方案</h2><h3 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h3><h4 id="数据库主键自增"><a href="#数据库主键自增" class="headerlink" title="数据库主键自增"></a>数据库主键自增</h4><p>这种方式就比较简单直白了，就是通过关系型数据库的自增主键产生来唯一的 ID。</p><p><img src="https://img-blog.csdnimg.cn/20210610081957287.png" srcset="/img/loading.gif" lazyload></p><p>以 MySQL 举例，我们通过下面的方式即可。</p><p><strong>1.创建一个数据库表。</strong></p><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> `sequence_id` (<br>  `id` <span class="hljs-type">bigint</span>(<span class="hljs-number">20</span>) unsigned <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> AUTO_INCREMENT,<br>  `stub` <span class="hljs-type">char</span>(<span class="hljs-number">10</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">&#x27;&#x27;</span>,<br>  <span class="hljs-keyword">PRIMARY</span> KEY (`id`),<br>  <span class="hljs-keyword">UNIQUE</span> KEY `stub` (`stub`)<br>) ENGINE<span class="hljs-operator">=</span>InnoDB <span class="hljs-keyword">DEFAULT</span> CHARSET<span class="hljs-operator">=</span>utf8mb4;<br></code></pre></div></td></tr></table></figure><p><code>stub</code> 字段无意义，只是为了占位，便于我们插入或者修改数据。并且，给 <code>stub</code> 字段创建了唯一索引，保证其唯一性。</p><p><strong>2.通过 <code>replace into</code> 来插入数据。</strong></p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">BEGIN;<br><span class="hljs-function">REPLACE INTO <span class="hljs-title">sequence_id</span> <span class="hljs-params">(stub)</span> <span class="hljs-title">VALUES</span> <span class="hljs-params">(<span class="hljs-string">&#x27;stub&#x27;</span>)</span></span>;<br><span class="hljs-function">SELECT <span class="hljs-title">LAST_INSERT_ID</span><span class="hljs-params">()</span></span>;<br>COMMIT;<br></code></pre></div></td></tr></table></figure><p>插入数据这里，我们没有使用 <code>insert into</code> 而是使用 <code>replace into</code> 来插入数据，具体步骤是这样的：</p><p>1)第一步： 尝试把数据插入到表中。</p><p>2)第二步： 如果主键或唯一索引字段出现重复数据错误而插入失败时，先从表中删除含有重复关键字值的冲突行，然后再次尝试把数据插入到表中。</p><p>这种方式的优缺点也比较明显：</p><ul><li><strong>优点</strong> ：实现起来比较简单、ID 有序递增、存储消耗空间小</li><li><strong>缺点</strong> ： 支持的并发量不大、存在数据库单点问题（可以使用数据库集群解决，不过增加了复杂度）、ID 没有具体业务含义、安全问题（比如根据订单 ID 的递增规律就能推算出每天的订单量，商业机密啊！ ）、每次获取 ID 都要访问一次数据库（增加了对数据库的压力，获取速度也慢）</li></ul><h4 id="数据库号段模式"><a href="#数据库号段模式" class="headerlink" title="数据库号段模式"></a>数据库号段模式</h4><p>数据库主键自增这种模式，每次获取 ID 都要访问一次数据库，ID 需求比较大的时候，肯定是不行的。</p><p>如果我们可以批量获取，然后存在在内存里面，需要用到的时候，直接从内存里面拿就舒服了！这也就是我们说的 <strong>基于数据库的号段模式来生成分布式 ID。</strong></p><p>数据库的号段模式也是目前比较主流的一种分布式 ID 生成方式。像滴滴开源的<a href="https://github.com/didi/tinyid/wiki/tinyid%E5%8E%9F%E7%90%86%E4%BB%8B%E7%BB%8D">Tinyid</a> 就是基于这种方式来做的。不过，TinyId 使用了双号段缓存、增加多 db 支持等方式来进一步优化。</p><p>以 MySQL 举例，我们通过下面的方式即可。</p><p><strong>1.创建一个数据库表。</strong></p><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> `sequence_id_generator` (<br>  `id` <span class="hljs-type">int</span>(<span class="hljs-number">10</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>  `current_max_id` <span class="hljs-type">bigint</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;当前最大id&#x27;</span>,<br>  `step` <span class="hljs-type">int</span>(<span class="hljs-number">10</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;号段的长度&#x27;</span>,<br>  `version` <span class="hljs-type">int</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;版本号&#x27;</span>,<br>  `biz_type`    <span class="hljs-type">int</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;业务类型&#x27;</span>,<br>   <span class="hljs-keyword">PRIMARY</span> KEY (`id`)<br>) ENGINE<span class="hljs-operator">=</span>InnoDB <span class="hljs-keyword">DEFAULT</span> CHARSET<span class="hljs-operator">=</span>utf8mb4;<br></code></pre></div></td></tr></table></figure><p><code>current_max_id</code> 字段和<code>step</code>字段主要用于获取批量 ID，获取的批量 id 为： <code>current_max_id ~ current_max_id+step</code>。</p><p><img src="https://img-blog.csdnimg.cn/20210610081149228.png" srcset="/img/loading.gif" lazyload></p><p><code>version</code> 字段主要用于解决并发问题（乐观锁）,<code>biz_type</code> 主要用于表示业余类型。</p><p><strong>2.先插入一行数据。</strong></p><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `sequence_id_generator` (`id`, `current_max_id`, `step`, `version`, `biz_type`)<br><span class="hljs-keyword">VALUES</span><br>(<span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">100</span>, <span class="hljs-number">0</span>, <span class="hljs-number">101</span>);<br></code></pre></div></td></tr></table></figure><p><strong>3.通过 SELECT 获取指定业务下的批量唯一 ID</strong></p><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> `current_max_id`, `step`,`version` <span class="hljs-keyword">FROM</span> `sequence_id_generator` <span class="hljs-keyword">where</span> `biz_type` <span class="hljs-operator">=</span> <span class="hljs-number">101</span><br></code></pre></div></td></tr></table></figure><p>结果：</p><figure class="highlight apache"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute">id</span>current_max_idstepversionbiz_type<br><span class="hljs-attribute">1</span><span class="hljs-number">0</span><span class="hljs-number">100</span><span class="hljs-number">1</span><span class="hljs-number">101</span><br></code></pre></div></td></tr></table></figure><p><strong>4.不够用的话，更新之后重新 SELECT 即可。</strong></p><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql">UPDATE sequence_id_generator <span class="hljs-keyword">SET</span> current_max_id <span class="hljs-operator">=</span> <span class="hljs-number">0</span><span class="hljs-operator">+</span><span class="hljs-number">100</span>, version<span class="hljs-operator">=</span>version<span class="hljs-operator">+</span><span class="hljs-number">1</span> <span class="hljs-keyword">WHERE</span> version <span class="hljs-operator">=</span> <span class="hljs-number">0</span>  <span class="hljs-keyword">AND</span> `biz_type` <span class="hljs-operator">=</span> <span class="hljs-number">101</span><br><span class="hljs-keyword">SELECT</span> `current_max_id`, `step`,`version` <span class="hljs-keyword">FROM</span> `sequence_id_generator` <span class="hljs-keyword">where</span> `biz_type` <span class="hljs-operator">=</span> <span class="hljs-number">101</span><br></code></pre></div></td></tr></table></figure><p>结果：</p><figure class="highlight apache"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute">id</span>current_max_idstepversionbiz_type<br><span class="hljs-attribute">1</span><span class="hljs-number">100</span><span class="hljs-number">100</span><span class="hljs-number">1</span><span class="hljs-number">101</span><br></code></pre></div></td></tr></table></figure><p>相比于数据库主键自增的方式，<strong>数据库的号段模式对于数据库的访问次数更少，数据库压力更小。</strong></p><p>另外，为了避免单点问题，你可以从使用主从模式来提高可用性。</p><p><strong>数据库号段模式的优缺点:</strong></p><ul><li><strong>优点</strong> ：ID 有序递增、存储消耗空间小</li><li><strong>缺点</strong> ：存在数据库单点问题（可以使用数据库集群解决，不过增加了复杂度）、ID 没有具体业务含义、安全问题（比如根据订单 ID 的递增规律就能推算出每天的订单量，商业机密啊！ ）</li></ul><h4 id="NoSQL"><a href="#NoSQL" class="headerlink" title="NoSQL"></a>NoSQL</h4><p><img src="https://img-blog.csdnimg.cn/2021061008245858.png" srcset="/img/loading.gif" lazyload></p><p>一般情况下，NoSQL 方案使用 Redis 多一些。我们通过 Redis 的 <code>incr</code> 命令即可实现对 id 原子顺序递增。</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">127.0.0.1:6379&gt; <span class="hljs-built_in">set</span> sequence_id_biz_type 1<br>OK<br>127.0.0.1:6379&gt; incr sequence_id_biz_type<br>(<span class="hljs-built_in">integer</span>) 2<br>127.0.0.1:6379&gt; get sequence_id_biz_type<br><span class="hljs-string">&quot;2&quot;</span><br></code></pre></div></td></tr></table></figure><p>为了提高可用性和并发，我们可以使用 Redis Cluser。Redis Cluser 是 Redis 官方提供的 Redis 集群解决方案（3.0+版本）。</p><p>除了 Redis Cluser 之外，你也可以使用开源的 Redis 集群方案<a href="https://github.com/CodisLabs/codis">Codis</a> （大规模集群比如上百个节点的时候比较推荐）。</p><p>除了高可用和并发之外，我们知道 Redis 基于内存，我们需要持久化数据，避免重启机器或者机器故障后数据丢失。Redis 支持两种不同的持久化方式：<strong>快照（snapshotting，RDB）</strong>、<strong>只追加文件（append-only file, AOF）</strong>。 并且，Redis 4.0 开始支持 <strong>RDB 和 AOF 的混合持久化</strong>（默认关闭，可以通过配置项 <code>aof-use-rdb-preamble</code> 开启）。</p><p>关于 Redis 持久化，我这里就不过多介绍。不了解这部分内容的小伙伴，可以看看 <a href="https://snailclimb.gitee.io/javaguide/#/docs/database/Redis/redis-all">JavaGuide 对于 Redis 知识点的总结</a>。</p><p><strong>Redis 方案的优缺点：</strong></p><ul><li><strong>优点</strong> ： 性能不错并且生成的 ID 是有序递增的</li><li><strong>缺点</strong> ： 和数据库主键自增方案的缺点类似</li></ul><p>除了 Redis 之外，MongoDB ObjectId 经常也会被拿来当做分布式 ID 的解决方案。</p><p><img src="https://img-blog.csdnimg.cn/20210207103320582.png" srcset="/img/loading.gif" lazyload></p><p>MongoDB ObjectId 一共需要 12 个字节存储：</p><ul><li>0~3：时间戳</li><li>3~6： 代表机器 ID</li><li>7~8：机器进程 ID</li><li>9~11 ：自增值</li></ul><p><strong>MongoDB 方案的优缺点：</strong></p><ul><li><strong>优点</strong> ： 性能不错并且生成的 ID 是有序递增的</li><li><strong>缺点</strong> ： 需要解决重复 ID 问题（当机器时间不对的情况下，可能导致会产生重复 ID） 、有安全性问题（ID 生成有规律性）</li></ul><h3 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h3><h4 id="UUID"><a href="#UUID" class="headerlink" title="UUID"></a>UUID</h4><p>UUID 是 Universally Unique Identifier（通用唯一标识符） 的缩写。UUID 包含 32 个 16 进制数字（8-4-4-4-12）。</p><p>JDK 就提供了现成的生成 UUID 的方法，一行代码就行了。</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">//输出示例：cb4a9ede-fa5e-4585-b9bb-d60bce986eaa</span><br>UUID.randomUUID()<br></code></pre></div></td></tr></table></figure><p><a href="https://tools.ietf.org/html/rfc4122">RFC 4122</a> 中关于 UUID 的示例是这样的：</p><p><img src="https://img-blog.csdnimg.cn/20210202110824430.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM0MzM3Mjcy,size_16,color_FFFFFF,t_70" srcset="/img/loading.gif" lazyload></p><p>我们这里重点关注一下这个 Version(版本)，不同的版本对应的 UUID 的生成规则是不同的。</p><p>5 种不同的 Version(版本)值分别对应的含义（参考<a href="https://zh.wikipedia.org/wiki/%E9%80%9A%E7%94%A8%E5%94%AF%E4%B8%80%E8%AF%86%E5%88%AB%E7%A0%81">维基百科对于 UUID 的介绍</a>）：</p><ul><li><strong>版本 1</strong> : UUID 是根据时间和节点 ID（通常是 MAC 地址）生成；</li><li><strong>版本 2</strong> : UUID 是根据标识符（通常是组或用户 ID）、时间和节点 ID 生成；</li><li><strong>版本 3、版本 5</strong> : 版本 5 - 确定性 UUID 通过散列（hashing）名字空间（namespace）标识符和名称生成；</li><li><strong>版本 4</strong> : UUID 使用<a href="https://zh.wikipedia.org/wiki/%E9%9A%8F%E6%9C%BA%E6%80%A7">随机性</a>或<a href="https://zh.wikipedia.org/wiki/%E4%BC%AA%E9%9A%8F%E6%9C%BA%E6%80%A7">伪随机性</a>生成。</li></ul><p>下面是 Version 1 版本下生成的 UUID 的示例：</p><p><img src="https://img-blog.csdnimg.cn/20210202113013477.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM0MzM3Mjcy,size_16,color_FFFFFF,t_70" srcset="/img/loading.gif" lazyload></p><p>JDK 中通过 <code>UUID</code> 的 <code>randomUUID()</code> 方法生成的 UUID 的版本默认为 4。</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">UUID uuid = UUID.randomUUID();<br><span class="hljs-keyword">int</span> version = uuid.version();<span class="hljs-comment">// 4</span><br></code></pre></div></td></tr></table></figure><p>另外，Variant(变体)也有 4 种不同的值，这种值分别对应不同的含义。这里就不介绍了，貌似平时也不怎么需要关注。</p><p>需要用到的时候，去看看维基百科对于 UUID 的 Variant(变体) 相关的介绍即可。</p><p>从上面的介绍中可以看出，UUID 可以保证唯一性，因为其生成规则包括 MAC 地址、时间戳、名字空间（Namespace）、随机或伪随机数、时序等元素，计算机基于这些规则生成的 UUID 是肯定不会重复的。</p><p>虽然，UUID 可以做到全局唯一性，但是，我们一般很少会使用它。</p><p>比如使用 UUID 作为 MySQL 数据库主键的时候就非常不合适：</p><ul><li>数据库主键要尽量越短越好，而 UUID 的消耗的存储空间比较大（32 个字符串，128 位）。</li><li>UUID 是无顺序的，InnoDB 引擎下，数据库主键的无序性会严重影响数据库性能。</li></ul><p>最后，我们再简单分析一下 <strong>UUID 的优缺点</strong> （面试的时候可能会被问到的哦！） :</p><ul><li><strong>优点</strong> ：生成速度比较快、简单易用</li><li><strong>缺点</strong> ： 存储消耗空间大（32 个字符串，128 位） 、 不安全（基于 MAC 地址生成 UUID 的算法会造成 MAC 地址泄露)、无序（非自增）、没有具体业务含义、需要解决重复 ID 问题（当机器时间不对的情况下，可能导致会产生重复 ID）</li></ul><h4 id="Snowflake-雪花算法"><a href="#Snowflake-雪花算法" class="headerlink" title="Snowflake(雪花算法)"></a>Snowflake(雪花算法)</h4><p>Snowflake 是 Twitter 开源的分布式 ID 生成算法。Snowflake 由 64 bit 的二进制数字组成，这 64bit 的二进制被分成了几部分，每一部分存储的数据都有特定的含义：</p><ul><li><strong>第 0 位</strong>： 符号位（标识正负），始终为 0，没有用，不用管。</li><li><strong>第 1~41 位</strong> ：一共 41 位，用来表示时间戳，单位是毫秒，可以支撑 2 ^41 毫秒（约 69 年）</li><li><strong>第 42~52 位</strong> ：一共 10 位，一般来说，前 5 位表示机房 ID，后 5 位表示机器 ID（实际项目中可以根据实际情况调整）。这样就可以区分不同集群/机房的节点。</li><li><strong>第 53~64 位</strong> ：一共 12 位，用来表示序列号。 序列号为自增值，代表单台机器每毫秒能够产生的最大 ID 数(2^12 = 4096),也就是说单台机器每毫秒最多可以生成 4096 个 唯一 ID。</li></ul><p><img src="https://oscimg.oschina.net/oscnet/up-a7e54a77b5ab1d9fa16d5ae3a3c50c5aee9.png" srcset="/img/loading.gif" lazyload></p><p>如果你想要使用 Snowflake 算法的话，一般不需要你自己再造轮子。有很多基于 Snowflake 算法的开源实现比如美团 的 Leaf、百度的 UidGenerator，并且这些开源实现对原有的 Snowflake 算法进行了优化。</p><p>另外，在实际项目中，我们一般也会对 Snowflake 算法进行改造，最常见的就是在 Snowflake 算法生成的 ID 中加入业务类型信息。</p><p>我们再来看看 Snowflake 算法的优缺点 ：</p><ul><li><strong>优点</strong> ：生成速度比较快、生成的 ID 有序递增、比较灵活（可以对 Snowflake 算法进行简单的改造比如加入业务 ID）</li><li><strong>缺点</strong> ： 需要解决重复 ID 问题（依赖时间，当机器时间不对的情况下，可能导致会产生重复 ID）。</li></ul><h3 id="开源框架"><a href="#开源框架" class="headerlink" title="开源框架"></a>开源框架</h3><h4 id="UidGenerator-百度"><a href="#UidGenerator-百度" class="headerlink" title="UidGenerator(百度)"></a>UidGenerator(百度)</h4><p><a href="https://github.com/baidu/uid-generator">UidGenerator</a> 是百度开源的一款基于 Snowflake(雪花算法)的唯一 ID 生成器。</p><p>不过，UidGenerator 对 Snowflake(雪花算法)进行了改进，生成的唯一 ID 组成如下。</p><p><img src="https://oscimg.oschina.net/oscnet/up-ad5b9dd0077a949db923611b2450277e406.png" srcset="/img/loading.gif" lazyload></p><p>可以看出，和原始 Snowflake(雪花算法)生成的唯一 ID 的组成不太一样。并且，上面这些参数我们都可以自定义。</p><p>UidGenerator 官方文档中的介绍如下：</p><p><img src="https://oscimg.oschina.net/oscnet/up-358b1a4cddb3675018b8595f66ece9cae88.png" srcset="/img/loading.gif" lazyload></p><p>自 18 年后，UidGenerator 就基本没有再维护了，我这里也不过多介绍。想要进一步了解的朋友，可以看看 <a href="https://github.com/baidu/uid-generator/blob/master/README.zh_cn.md">UidGenerator 的官方介绍</a>。</p><h4 id="Leaf-美团"><a href="#Leaf-美团" class="headerlink" title="Leaf(美团)"></a>Leaf(美团)</h4><p><strong><a href="https://github.com/Meituan-Dianping/Leaf">Leaf</a></strong> 是美团开源的一个分布式 ID 解决方案 。这个项目的名字 Leaf（树叶） 起源于德国哲学家、数学家莱布尼茨的一句话： “There are no two identical leaves in the world”（世界上没有两片相同的树叶） 。这名字起得真心挺不错的，有点文艺青年那味了！</p><p><img src="https://img-blog.csdnimg.cn/20210422145229617.png" srcset="/img/loading.gif" lazyload></p><p>Leaf 提供了 <strong>号段模式</strong> 和 <strong>Snowflake(雪花算法)</strong> 这两种模式来生成分布式 ID。并且，它支持双号段，还解决了雪花 ID 系统时钟回拨问题。不过，时钟问题的解决需要弱依赖于 Zookeeper 。</p><p>Leaf 的诞生主要是为了解决美团各个业务线生成分布式 ID 的方法多种多样以及不可靠的问题。</p><p>Leaf 对原有的号段模式进行改进，比如它这里增加了双号段避免获取 DB 在获取号段的时候阻塞请求获取 ID 的线程。简单来说，就是我一个号段还没用完之前，我自己就主动提前去获取下一个号段（图片来自于美团官方文章：<a href="https://tech.meituan.com/2017/04/21/mt-leaf.html">《Leaf——美团点评分布式 ID 生成系统》</a>）。</p><p><img src="https://img-blog.csdnimg.cn/20210422144846724.png" srcset="/img/loading.gif" lazyload></p><p>根据项目 README 介绍，在 4C8G VM 基础上，通过公司 RPC 方式调用，QPS 压测结果近 5w/s，TP999 1ms。</p><h4 id="Tinyid-滴滴"><a href="#Tinyid-滴滴" class="headerlink" title="Tinyid(滴滴)"></a>Tinyid(滴滴)</h4><p><a href="https://github.com/didi/tinyid">Tinyid</a> 是滴滴开源的一款基于数据库号段模式的唯一 ID 生成器。</p><p>数据库号段模式的原理我们在上面已经介绍过了。<strong>Tinyid 有哪些亮点呢？</strong></p><p>为了搞清楚这个问题，我们先来看看基于数据库号段模式的简单架构方案。（图片来自于 Tinyid 的官方 wiki:<a href="https://github.com/didi/tinyid/wiki/tinyid%E5%8E%9F%E7%90%86%E4%BB%8B%E7%BB%8D">《Tinyid 原理介绍》</a>）</p><p><img src="https://oscimg.oschina.net/oscnet/up-4afc0e45c0c86ba5ad645d023dce11e53c2.png" srcset="/img/loading.gif" lazyload></p><p>在这种架构模式下，我们通过 HTTP 请求向发号器服务申请唯一 ID。负载均衡 router 会把我们的请求送往其中的一台 tinyid-server。</p><p>这种方案有什么问题呢？在我看来（Tinyid 官方 wiki 也有介绍到），主要由下面这 2 个问题：</p><ul><li>获取新号段的情况下，程序获取唯一 ID 的速度比较慢。</li><li>需要保证 DB 高可用，这个是比较麻烦且耗费资源的。</li></ul><p>除此之外，HTTP 调用也存在网络开销。</p><p>Tinyid 的原理比较简单，其架构如下图所示：</p><p><img src="https://oscimg.oschina.net/oscnet/up-53f74cd615178046d6c04fe50513fee74ce.png" srcset="/img/loading.gif" lazyload></p><p>相比于基于数据库号段模式的简单架构方案，Tinyid 方案主要做了下面这些优化：</p><ul><li><strong>双号段缓存</strong> ：为了避免在获取新号段的情况下，程序获取唯一 ID 的速度比较慢。 Tinyid 中的号段在用到一定程度的时候，就会去异步加载下一个号段，保证内存中始终有可用号段。</li><li><strong>增加多 db 支持</strong> ：支持多个 DB，并且，每个 DB 都能生成唯一 ID，提高了可用性。</li><li><strong>增加 tinyid-client</strong> ：纯本地操作，无 HTTP 请求消耗，性能和可用性都有很大提升。</li></ul><p>Tinyid 的优缺点这里就不分析了，结合数据库号段模式的优缺点和 Tinyid 的原理就能知道。</p><h2 id="分布式-ID-生成方案总结"><a href="#分布式-ID-生成方案总结" class="headerlink" title="分布式 ID 生成方案总结"></a>分布式 ID 生成方案总结</h2><p>这篇文章中，我基本上已经把最常见的分布式 ID 生成方案都总结了一波。</p><p>除了上面介绍的方式之外，像 ZooKeeper 这类中间件也可以帮助我们生成唯一 ID。<strong>没有银弹，一定要结合实际项目来选择最适合自己的方案。</strong></p>]]></content>
    
    
    <categories>
      
      <category>面经合集</category>
      
    </categories>
    
    
    <tags>
      
      <tag>八股 分布式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>HUST操作系统实验2</title>
    <link href="/2021/11/30/OS%E5%AE%9E%E9%AA%8C%E4%BA%8C/"/>
    <url>/2021/11/30/OS%E5%AE%9E%E9%AA%8C%E4%BA%8C/</url>
    
    <content type="html"><![CDATA[<h1 id="OS实验二：进程管理与死锁"><a href="#OS实验二：进程管理与死锁" class="headerlink" title="OS实验二：进程管理与死锁"></a>OS实验二：进程管理与死锁</h1><h2 id="1-创建父子进程"><a href="#1-创建父子进程" class="headerlink" title="1.创建父子进程"></a>1.创建父子进程</h2><p><img src="/2021/11/30/OS%E5%AE%9E%E9%AA%8C%E4%BA%8C/test1%E8%A6%81%E6%B1%82.png" srcset="/img/loading.gif" lazyload alt="test1要求"></p><p>创建测试程序，让父进程提前结束：</p><p><img src="/2021/11/30/OS%E5%AE%9E%E9%AA%8C%E4%BA%8C/%E5%88%9B%E5%BB%BA%E5%AD%90%E8%BF%9B%E7%A8%8B%E6%B5%8B%E8%AF%95%E4%BB%A3%E7%A0%81.png" srcset="/img/loading.gif" lazyload alt="创建子进程测试代码"></p><p>测试结果：</p><p><img src="/2021/11/30/OS%E5%AE%9E%E9%AA%8C%E4%BA%8C/test1.png" srcset="/img/loading.gif" lazyload alt="test1"></p><h2 id="2-实现生产者-消费者模式"><a href="#2-实现生产者-消费者模式" class="headerlink" title="2. 实现生产者-消费者模式"></a>2. 实现生产者-消费者模式</h2><h3 id="2-1-使用条件变量实现"><a href="#2-1-使用条件变量实现" class="headerlink" title="2.1 使用条件变量实现"></a>2.1 使用条件变量实现</h3><p>人麻了，改了一下午的代码其实并没有问题，只是因为主线程没有等两个子线程执行完就退出了，所以命令行看不到子线程打印的数据，加上join函数就可以了！！！😣😣😣😣</p><p>具体代码如下：</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;pthread.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;unistd.h&gt;</span></span><br><span class="hljs-keyword">pthread_mutex_t</span>  mutex;<br><span class="hljs-keyword">pthread_cond_t</span> fill,empty;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> MAX 100</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> FULL 10</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ZERO 0</span><br><span class="hljs-keyword">int</span> count=<span class="hljs-number">0</span> ;<br><span class="hljs-function"><span class="hljs-keyword">void</span> *<span class="hljs-title">producer</span><span class="hljs-params">(<span class="hljs-keyword">void</span>* args)</span></span>&#123;<br>   <span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;<br>   <span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;i&lt;MAX;i++)&#123;<br>       <span class="hljs-built_in">pthread_mutex_lock</span>(&amp;mutex);<br>       <span class="hljs-keyword">while</span>(count==FULL)&#123;<br>         <span class="hljs-built_in">pthread_cond_wait</span>(&amp;empty,&amp;mutex);<br>      &#125;<br>      count++;<br>      <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;生产者%d，生产：%d\n&quot;</span>,<span class="hljs-built_in">pthread_self</span>(),count);<br>      <span class="hljs-built_in">pthread_cond_signal</span>(&amp;fill);<br>      <span class="hljs-built_in">pthread_mutex_unlock</span>(&amp;mutex);<br>   &#125;<br>   <span class="hljs-built_in">pthread_exit</span>(<span class="hljs-number">0</span>);<br>&#125;         <br>         <br><span class="hljs-function"><span class="hljs-keyword">void</span>* <span class="hljs-title">consumer</span><span class="hljs-params">(<span class="hljs-keyword">void</span>* args)</span></span>&#123;<br>  <span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;<br>  <span class="hljs-keyword">for</span>(i = <span class="hljs-number">0</span>;i&lt;MAX;i++)&#123;<br>      <span class="hljs-built_in">pthread_mutex_lock</span>(&amp;mutex);<br>      <span class="hljs-keyword">while</span>(count==ZERO)&#123;<br>          <span class="hljs-built_in">pthread_cond_wait</span>(&amp;fill,&amp;mutex);<br>      &#125;<br>      <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;消费者%d，消费：%d\n&quot;</span>,<span class="hljs-built_in">pthread_self</span>(),count); <br>      count--; <br>     <span class="hljs-built_in">pthread_cond_signal</span>(&amp;empty);<br>     <span class="hljs-built_in">pthread_mutex_unlock</span>(&amp;mutex);<br>  &#125; <br>  <span class="hljs-built_in">pthread_exit</span>(<span class="hljs-number">0</span>); <br>&#125;   <br>    <br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>     <span class="hljs-keyword">pthread_t</span> p1,p2,s1,s2;   <span class="hljs-comment">//两个消费者，两个生产者</span><br>     <span class="hljs-built_in">pthread_mutex_init</span>(&amp;mutex,<span class="hljs-number">0</span>);<br>     <span class="hljs-built_in">pthread_cond_init</span>(&amp;empty,<span class="hljs-number">0</span>);<br>     <span class="hljs-built_in">pthread_cond_init</span>(&amp;fill,<span class="hljs-number">0</span>);<br>     count = <span class="hljs-number">0</span>;<br>     <span class="hljs-built_in">pthread_create</span>(&amp;p1,<span class="hljs-literal">NULL</span>,producer,<span class="hljs-number">0</span>);<br>     <span class="hljs-built_in">pthread_create</span>(&amp;s1,<span class="hljs-literal">NULL</span>,consumer,<span class="hljs-number">0</span>);<br>     <span class="hljs-built_in">pthread_create</span>(&amp;p2,<span class="hljs-literal">NULL</span>,producer,<span class="hljs-number">0</span>);<br>     <span class="hljs-built_in">pthread_create</span>(&amp;s2,<span class="hljs-literal">NULL</span>,consumer,<span class="hljs-number">0</span>);<br>     <span class="hljs-built_in">pthread_join</span>(p1,<span class="hljs-number">0</span>);<br>     <span class="hljs-built_in">pthread_join</span>(p2,<span class="hljs-number">0</span>);<br>     <span class="hljs-built_in">pthread_join</span>(s1,<span class="hljs-number">0</span>);<br>     <span class="hljs-built_in">pthread_join</span>(s2,<span class="hljs-number">0</span>);<br><br>    <span class="hljs-built_in">pthread_mutex_destroy</span>(&amp;mutex);<br>    <span class="hljs-built_in">pthread_cond_destroy</span>(&amp;empty);<br>    <span class="hljs-built_in">pthread_cond_destroy</span>(&amp;fill);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>测试结果如下：</p><p><img src="/2021/11/30/OS%E5%AE%9E%E9%AA%8C%E4%BA%8C/%E6%9D%A1%E4%BB%B6%E5%8F%98%E9%87%8F%E8%A7%A3%E5%86%B3%E7%94%9F%E4%BA%A7%E8%80%85%E6%B6%88%E8%B4%B9%E8%80%85%E9%97%AE%E9%A2%98.png" srcset="/img/loading.gif" lazyload alt="条件变量解决生产者消费者问题"></p><h3 id="2-2-使用信号量实现"><a href="#2-2-使用信号量实现" class="headerlink" title="2.2 使用信号量实现"></a>2.2 使用信号量实现</h3><p>具体代码如下：</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;pthread.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;unistd.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;semaphore.h&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> MAX_PRO 2</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> MAX 10</span><br><span class="hljs-keyword">int</span> count = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">sem_t</span> empty,fill,mutex;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> *<span class="hljs-title">producer</span><span class="hljs-params">(<span class="hljs-keyword">void</span>* args)</span></span>&#123;<br>  <span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>;<br>  <span class="hljs-keyword">for</span>(i = <span class="hljs-number">0</span>;i&lt;=<span class="hljs-number">100</span>;i++)&#123;<br>     <span class="hljs-built_in">sem_wait</span>(&amp;empty);<br>     <span class="hljs-built_in">sem_wait</span>(&amp;mutex);<br>     count++;<br>     <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;生产者%d，生产：%d\n&quot;</span>,<span class="hljs-built_in">pthread_self</span>(),count);<br>     <span class="hljs-built_in">sem_post</span>(&amp;mutex);<br>     <span class="hljs-built_in">sem_post</span>(&amp;fill);<br>  &#125;<br>  <span class="hljs-built_in">pthread_exit</span>(<span class="hljs-number">0</span>);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> *<span class="hljs-title">consumer</span><span class="hljs-params">(<span class="hljs-keyword">void</span>* args)</span></span>&#123;<br>  <span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>;<br>  <span class="hljs-keyword">for</span>(i = <span class="hljs-number">0</span>;i&lt;=<span class="hljs-number">100</span>;i++)&#123;<br>     <span class="hljs-built_in">sem_wait</span>(&amp;fill);<br>     <span class="hljs-built_in">sem_wait</span>(&amp;mutex);<br>     <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;消费者%d，消费：%d\n&quot;</span>,<span class="hljs-built_in">pthread_self</span>(),count);<br>     count--;<br>     <span class="hljs-built_in">sem_post</span>(&amp;mutex);<br>     <span class="hljs-built_in">sem_post</span>(&amp;empty);<br> &#125;<br> <span class="hljs-built_in">pthread_exit</span>(<span class="hljs-number">0</span>);<br><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>  <span class="hljs-keyword">pthread_t</span> p1,p2,s1,s2;<br>  <span class="hljs-built_in">sem_init</span>(&amp;mutex,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>);<span class="hljs-comment">//保证操作count时，互斥</span><br>  <span class="hljs-built_in">sem_init</span>(&amp;fill,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>);<span class="hljs-comment">//fill初始为0，表示还没有产品</span><br>  <span class="hljs-built_in">sem_init</span>(&amp;empty,<span class="hljs-number">0</span>,MAX_PRO);<span class="hljs-comment">//初始为最大的生产者数量</span><br>  <span class="hljs-built_in">pthread_create</span>(&amp;p1,<span class="hljs-number">0</span>,producer,<span class="hljs-number">0</span>);<br>  <span class="hljs-built_in">pthread_create</span>(&amp;p2,<span class="hljs-number">0</span>,producer,<span class="hljs-number">0</span>);<br>  <span class="hljs-built_in">pthread_create</span>(&amp;s1,<span class="hljs-number">0</span>,consumer,<span class="hljs-number">0</span>);<br>  <span class="hljs-built_in">pthread_create</span>(&amp;s2,<span class="hljs-number">0</span>,consumer,<span class="hljs-number">0</span>);<br>  <span class="hljs-built_in">pthread_join</span>(p1,<span class="hljs-number">0</span>);<br>  <span class="hljs-built_in">pthread_join</span>(p2,<span class="hljs-number">0</span>);<br>  <span class="hljs-built_in">pthread_join</span>(s1,<span class="hljs-number">0</span>);<br>  <span class="hljs-built_in">pthread_join</span>(s2,<span class="hljs-number">0</span>);<br><br> <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></div></td></tr></table></figure><p>测试结果：</p><p><img src="/2021/11/30/OS%E5%AE%9E%E9%AA%8C%E4%BA%8C/%E4%BF%A1%E5%8F%B7%E9%87%8F%E6%B5%8B%E8%AF%95.png" srcset="/img/loading.gif" lazyload alt="信号量测试"></p><h2 id="3-哲学家问题"><a href="#3-哲学家问题" class="headerlink" title="3.哲学家问题"></a>3.哲学家问题</h2><h3 id="3-1死锁情况"><a href="#3-1死锁情况" class="headerlink" title="3.1死锁情况"></a>3.1死锁情况</h3><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;pthread.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;unistd.h&gt;</span></span><br><br><span class="hljs-keyword">pthread_mutex_t</span> lock[<span class="hljs-number">5</span>];<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">lock_init</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">int</span> i;<br>        <span class="hljs-keyword">for</span>(i = <span class="hljs-number">0</span>;i&lt;=<span class="hljs-number">4</span>;i++)&#123;<br>                <span class="hljs-built_in">pthread_mutex_init</span>(&amp;lock[i],<span class="hljs-number">0</span>);<br>        &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">lock_des</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">int</span> i;<br>        <span class="hljs-keyword">for</span>(i = <span class="hljs-number">0</span>;i&lt;=<span class="hljs-number">4</span>;i++)&#123;<br>                <span class="hljs-built_in">pthread_mutex_destroy</span>(&amp;lock[i]);<br>        &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> *<span class="hljs-title">person</span><span class="hljs-params">(<span class="hljs-keyword">void</span>* args)</span></span>&#123;<br>        <span class="hljs-keyword">int</span> x= *(<span class="hljs-keyword">int</span>*)args;<br>        <span class="hljs-keyword">int</span> left = x;<br>        <span class="hljs-keyword">int</span> right=(x+<span class="hljs-number">1</span>)%<span class="hljs-number">5</span>;<br>        <span class="hljs-keyword">int</span> i;<br>        <span class="hljs-keyword">for</span>(i = <span class="hljs-number">0</span>;i&lt;=<span class="hljs-number">9</span>;i++)&#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;哲学家%d,开始思考\n&quot;</span>,x);<br>        <span class="hljs-built_in">sleep</span>(<span class="hljs-number">5</span>);<br>        <span class="hljs-built_in">pthread_mutex_lock</span>(&amp;lock[left]);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;哲学家%d,拿起左边的%d号筷子\n&quot;</span>,x,x);<br>        <span class="hljs-built_in">pthread_mutex_lock</span>(&amp;lock[right]);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;哲学家%d,拿起右边的%d号筷子\n&quot;</span>,x,right);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;哲学家%d,开始吃饭\n&quot;</span>,x);<br>        <span class="hljs-built_in">sleep</span>(<span class="hljs-number">10</span>);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;哲学家%d,吃完了\n&quot;</span>,x);<br>        <span class="hljs-built_in">pthread_mutex_unlock</span>(&amp;lock[left]);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;哲学家%d，放下左边的%d号筷子&quot;</span>,x,x);<br>        <span class="hljs-built_in">pthread_mutex_unlock</span>(&amp;lock[right]);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;哲学及%d，放下右手的%d号筷子&quot;</span>,x,right);<br>        <span class="hljs-built_in">sleep</span>(<span class="hljs-number">10</span>);<br>        &#125;<br>&#125;<br><br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-built_in">lock_init</span>();<br>        <span class="hljs-keyword">pthread_t</span> p0,p1,p2,p3,p4;<br>        <span class="hljs-keyword">int</span> i0 = <span class="hljs-number">0</span>,i1=<span class="hljs-number">1</span>,i2=<span class="hljs-number">2</span>,i3=<span class="hljs-number">3</span>,i4=<span class="hljs-number">4</span>;<br>        <span class="hljs-built_in">pthread_create</span>(&amp;p0,<span class="hljs-number">0</span>,person,&amp;i0);<br>        <span class="hljs-built_in">pthread_create</span>(&amp;p1,<span class="hljs-number">0</span>,person,&amp;i1);<br>        <span class="hljs-built_in">pthread_create</span>(&amp;p2,<span class="hljs-number">0</span>,person,&amp;i2);<br>        <span class="hljs-built_in">pthread_create</span>(&amp;p3,<span class="hljs-number">0</span>,person,&amp;i3);<br>        <span class="hljs-built_in">pthread_create</span>(&amp;p4,<span class="hljs-number">0</span>,person,&amp;i4);<br><br>        <span class="hljs-built_in">pthread_join</span>(p0,<span class="hljs-number">0</span>);<br>        <span class="hljs-built_in">pthread_join</span>(p1,<span class="hljs-number">0</span>);<br>        <span class="hljs-built_in">pthread_join</span>(p2,<span class="hljs-number">0</span>);<br>        <span class="hljs-built_in">pthread_join</span>(p3,<span class="hljs-number">0</span>);<br>        <span class="hljs-built_in">pthread_join</span>(p4,<span class="hljs-number">0</span>);<br><br>        <span class="hljs-built_in">lock_des</span>();<br>&#125;<br></code></pre></div></td></tr></table></figure><p>上述代码中，由于所有哲学家都是先去拿左边的筷子，会导致出现所有人都拿到了左边的筷子，而再也拿不到右边的筷子而导致死锁</p><p><img src="/2021/11/30/OS%E5%AE%9E%E9%AA%8C%E4%BA%8C/%E5%93%B2%E5%AD%A6%E5%AE%B6%E6%AD%BB%E9%94%81.png" srcset="/img/loading.gif" lazyload alt="哲学家死锁"></p><h3 id="3-2-不死锁情况"><a href="#3-2-不死锁情况" class="headerlink" title="3.2 不死锁情况"></a>3.2 不死锁情况</h3><p>避免死锁的方式有多种：</p><ul><li>一次获取两个锁，两只筷子都能拿则拿，否则都不拿</li><li>有五位哲学家，规定其中一位必须先拿右边的筷子，再拿左边的，其他四位先拿左边的，再拿右边的</li></ul><p>第二种方式代码：</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;pthread.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;unistd.h&gt;</span></span><br><br><span class="hljs-keyword">pthread_mutex_t</span> lock[<span class="hljs-number">5</span>];<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">lock_init</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">int</span> i;<br>        <span class="hljs-keyword">for</span>(i = <span class="hljs-number">0</span>;i&lt;=<span class="hljs-number">4</span>;i++)&#123;<br>                <span class="hljs-built_in">pthread_mutex_init</span>(&amp;lock[i],<span class="hljs-number">0</span>);<br>        &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">lock_des</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">int</span> i;<br>        <span class="hljs-keyword">for</span>(i = <span class="hljs-number">0</span>;i&lt;=<span class="hljs-number">4</span>;i++)&#123;<br>                <span class="hljs-built_in">pthread_mutex_destroy</span>(&amp;lock[i]);<br>        &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> *<span class="hljs-title">person</span><span class="hljs-params">(<span class="hljs-keyword">void</span>* args)</span></span>&#123;<br>        <span class="hljs-keyword">int</span> x= *(<span class="hljs-keyword">int</span>*)args;<br>        <span class="hljs-keyword">int</span> left = x;<br>        <span class="hljs-keyword">int</span> right=(x+<span class="hljs-number">1</span>)%<span class="hljs-number">5</span>;<br>        <span class="hljs-keyword">int</span> i;<br>        <span class="hljs-keyword">if</span>(x==<span class="hljs-number">4</span>)&#123;<br>        <span class="hljs-keyword">for</span>(i = <span class="hljs-number">0</span>;i&lt;=<span class="hljs-number">9</span>;i++)&#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;哲学家%d,开始思考\n&quot;</span>,x);<br>        <span class="hljs-built_in">sleep</span>(<span class="hljs-number">2</span>);<br>        <span class="hljs-built_in">pthread_mutex_lock</span>(&amp;lock[right]);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;哲学家%d,拿起右边的%d号筷子\n&quot;</span>,x,right);<br>        <span class="hljs-built_in">pthread_mutex_lock</span>(&amp;lock[left]);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;哲学家%d,拿起左边的%d号筷子\n&quot;</span>,x,x);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;哲学家%d,开始吃饭\n&quot;</span>,x);<br>        <span class="hljs-built_in">sleep</span>(<span class="hljs-number">2</span>);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;哲学家%d,吃完了\n&quot;</span>,x);<br>        <span class="hljs-built_in">pthread_mutex_unlock</span>(&amp;lock[left]);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;哲学家%d，放下左边的%d号筷子\n&quot;</span>,x,x);<br>        <span class="hljs-built_in">pthread_mutex_unlock</span>(&amp;lock[right]);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;哲学及%d，放下右手的%d号筷子\n&quot;</span>,x,right);<br>        <span class="hljs-built_in">sleep</span>(<span class="hljs-number">2</span>);<br>        &#125;&#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-keyword">for</span>(i = <span class="hljs-number">0</span>;i&lt;=<span class="hljs-number">9</span>;i++)&#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;哲学家%d,开始思考\n&quot;</span>,x);<br>        <span class="hljs-built_in">sleep</span>(<span class="hljs-number">2</span>);<br>        <span class="hljs-built_in">pthread_mutex_lock</span>(&amp;lock[left]);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;哲学家%d,拿起左边的%d号筷子\n&quot;</span>,x,x);<br>        <span class="hljs-built_in">pthread_mutex_lock</span>(&amp;lock[right]);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;哲学家%d,拿起右边的%d号筷子\n&quot;</span>,x,right);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;哲学家%d,开始吃饭\n&quot;</span>,x);<br>        <span class="hljs-built_in">sleep</span>(<span class="hljs-number">2</span>);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;哲学家%d,吃完了\n&quot;</span>,x);<br>        <span class="hljs-built_in">pthread_mutex_unlock</span>(&amp;lock[left]);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;哲学家%d，放下左边的%d号筷子\n&quot;</span>,x,x);<br>        <span class="hljs-built_in">pthread_mutex_unlock</span>(&amp;lock[right]);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;哲学及%d，放下右手的%d号筷子\n&quot;</span>,x,right);<br>        <span class="hljs-built_in">sleep</span>(<span class="hljs-number">2</span>);<br>        &#125;<br>        &#125;<br>&#125;       <br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-built_in">lock_init</span>();<br>        <span class="hljs-keyword">pthread_t</span> p0,p1,p2,p3,p4;<br>        <span class="hljs-keyword">int</span> i0 = <span class="hljs-number">0</span>,i1=<span class="hljs-number">1</span>,i2=<span class="hljs-number">2</span>,i3=<span class="hljs-number">3</span>,i4=<span class="hljs-number">4</span>;<br>        <span class="hljs-built_in">pthread_create</span>(&amp;p0,<span class="hljs-number">0</span>,person,&amp;i0);<br>        <span class="hljs-built_in">pthread_create</span>(&amp;p1,<span class="hljs-number">0</span>,person,&amp;i1);<br>        <span class="hljs-built_in">pthread_create</span>(&amp;p2,<span class="hljs-number">0</span>,person,&amp;i2);<br>        <span class="hljs-built_in">pthread_create</span>(&amp;p3,<span class="hljs-number">0</span>,person,&amp;i3);<br>        <span class="hljs-built_in">pthread_create</span>(&amp;p4,<span class="hljs-number">0</span>,person,&amp;i4);<br><br>        <span class="hljs-built_in">pthread_join</span>(p0,<span class="hljs-number">0</span>);<br>        <span class="hljs-built_in">pthread_join</span>(p1,<span class="hljs-number">0</span>);<br>        <span class="hljs-built_in">pthread_join</span>(p2,<span class="hljs-number">0</span>);<br>        <span class="hljs-built_in">pthread_join</span>(p3,<span class="hljs-number">0</span>);<br>        <span class="hljs-built_in">pthread_join</span>(p4,<span class="hljs-number">0</span>);<br><br>        <span class="hljs-built_in">lock_des</span>();<br>&#125;<br></code></pre></div></td></tr></table></figure><p>测试结果，不会产生死锁：</p><p><img src="/2021/11/30/OS%E5%AE%9E%E9%AA%8C%E4%BA%8C/%E5%93%B2%E5%AD%A6%E5%AE%B6%E4%B8%8D%E6%AD%BB%E9%94%81.png" srcset="/img/loading.gif" lazyload alt="哲学家不死锁"></p>]]></content>
    
    
    <categories>
      
      <category>HUST</category>
      
    </categories>
    
    
    <tags>
      
      <tag>OS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>HUST操作系统实验1</title>
    <link href="/2021/11/25/OS%E5%AE%9E%E9%AA%8C%E6%9C%80%E7%BB%88%E7%89%88/"/>
    <url>/2021/11/25/OS%E5%AE%9E%E9%AA%8C%E6%9C%80%E7%BB%88%E7%89%88/</url>
    
    <content type="html"><![CDATA[<h1 id="HUST操作系统实验一"><a href="#HUST操作系统实验一" class="headerlink" title="HUST操作系统实验一"></a>HUST操作系统实验一</h1><h2 id="1-安装银河麒麟iso"><a href="#1-安装银河麒麟iso" class="headerlink" title="1.安装银河麒麟iso"></a>1.安装银河麒麟iso</h2><p>​    下载iso，<a href="https://mirrors.aliyun.com/ubuntukylin-cdimage/">阿里镜像网址</a></p><p>​    VMware使用下载的iso新建虚拟机</p><h2 id="2-实验内容"><a href="#2-实验内容" class="headerlink" title="2.实验内容"></a>2.实验内容</h2><h3 id="2-1-用NASM编写MBR引导程序，写入软盘，在BOCHS虚拟机中测试"><a href="#2-1-用NASM编写MBR引导程序，写入软盘，在BOCHS虚拟机中测试" class="headerlink" title="2.1 用NASM编写MBR引导程序，写入软盘，在BOCHS虚拟机中测试"></a>2.1 用NASM编写MBR引导程序，写入软盘，在BOCHS虚拟机中测试</h3><p><img src="/2021/11/25/OS%E5%AE%9E%E9%AA%8C%E6%9C%80%E7%BB%88%E7%89%88/1.png" srcset="/img/loading.gif" lazyload alt="1"></p><ol><li><p>安装NASM</p><ul><li><p>官网下载<a href="https://www.nasm.us/">NASM</a></p></li><li><p>使用如下命令（<strong>实验2.1的所有操作都在/usr/local下操作</strong>）</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment">#先进入到压缩包所在的目录</span><br>tar xvf nasm-2.15.05.tar.gz  <span class="hljs-comment">#解压压缩包</span><br><br><span class="hljs-built_in">cd</span> nasm-2.15.05<br><br>./configure<br><br>make<br><br>sudo make install<br><br><span class="hljs-comment">#检测是否安装成功</span><br>root@zykk-VMware-Virtual-Platform:/usr/<span class="hljs-built_in">local</span>/bin<span class="hljs-comment"># whereis nasm</span><br>nasm: /usr/<span class="hljs-built_in">local</span>/bin/nasm<br><br></code></pre></div></td></tr></table></figure></li></ul></li><li><p>创建引导扇区</p><p>在/usr/local/目录下使用<code>vim boot.asm</code>创建boot.asm文件，存放引导扇区的汇编代码，代码如下：</p><figure class="highlight x86asm"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs x86asm">org <span class="hljs-number">07c00h</span><br><span class="hljs-keyword">mov</span> <span class="hljs-built_in">ax</span>, <span class="hljs-built_in">cs</span><br><span class="hljs-keyword">mov</span> <span class="hljs-built_in">ds</span>, <span class="hljs-built_in">ax</span><br><span class="hljs-keyword">mov</span> <span class="hljs-built_in">es</span>, <span class="hljs-built_in">ax</span><br><span class="hljs-keyword">call</span> DispStr<br><span class="hljs-keyword">jmp</span> $<br><span class="hljs-symbol">DispStr:</span><br><span class="hljs-keyword">mov</span> <span class="hljs-built_in">ax</span>, BootMessage<br><span class="hljs-keyword">mov</span> <span class="hljs-built_in">bp</span>, <span class="hljs-built_in">ax</span><br><span class="hljs-keyword">mov</span> <span class="hljs-built_in">cx</span>, <span class="hljs-number">16</span><br><span class="hljs-keyword">mov</span> <span class="hljs-built_in">ax</span>, <span class="hljs-number">01301h</span><br><span class="hljs-keyword">mov</span> <span class="hljs-built_in">bx</span>, <span class="hljs-number">000ch</span><br><span class="hljs-keyword">mov</span> <span class="hljs-built_in">dl</span>, <span class="hljs-number">0</span><br><span class="hljs-keyword">int</span> <span class="hljs-number">10h</span><br><span class="hljs-keyword">ret</span><br><span class="hljs-symbol">BootMessage:</span> <span class="hljs-built_in">db</span> <span class="hljs-string">&quot;Hello, OS world!&quot;</span><br><span class="hljs-built_in">times</span> <span class="hljs-number">510</span> - ($-$$) <span class="hljs-built_in">db</span> <span class="hljs-number">0</span><br><span class="hljs-built_in">dw</span> <span class="hljs-number">0xaa55</span><br></code></pre></div></td></tr></table></figure><p>保存文件后退出，使用命令<code>nasm boot.asm -o boot.bin</code>生成boot.bin文件</p></li><li><p>安装Bochs</p><ul><li><p><a href="https://bochs.sourceforge.io/">Bochs</a>官网下载压缩包，放置在指定目录下解压<code>tar xvf bochs-2.7.tar.gz</code></p></li><li><p>解压完成后，使用如下命令</p><figure class="highlight gauss"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs gauss">cd bochs<span class="hljs-number">-2.7</span><br><br>./configure --<span class="hljs-keyword">enable</span>-debugger --<span class="hljs-keyword">enable</span>-disasm<br><br><span class="hljs-built_in">make</span><br><br>sudo <span class="hljs-built_in">make</span> install<br></code></pre></div></td></tr></table></figure></li><li><p>输入<code>bochs</code>查看是否编译安装成功，成功后显示如下：</p><p><img src="/2021/11/25/OS%E5%AE%9E%E9%AA%8C%E6%9C%80%E7%BB%88%E7%89%88/2.png" srcset="/img/loading.gif" lazyload alt="2"></p></li></ul></li><li><p>使用bximage创建虚拟软盘</p><p>输入命令<code>bximage</code>,显示如下：</p><p><img src="/2021/11/25/OS%E5%AE%9E%E9%AA%8C%E6%9C%80%E7%BB%88%E7%89%88/3.png" srcset="/img/loading.gif" lazyload alt="3"></p></li></ol><p>​       选择生成fd软盘，其他选择使用默认值，直接回车，完成之后，当前目录下会生成软盘映像a.img</p><ol start="5"><li><p>将引导扇区写入软盘</p><p>执行命令：</p><figure class="highlight routeros"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs routeros">dd <span class="hljs-attribute">if</span>=boot.bin <span class="hljs-attribute">of</span>=a.img <span class="hljs-attribute">bs</span>=512 <span class="hljs-attribute">count</span>=1 <span class="hljs-attribute">conv</span>=notrunc<br></code></pre></div></td></tr></table></figure></li><li><p>编写Bochs的配置文件</p><p><code>vim bochsrc</code>创建文件，写入下面的内容并保存：</p><figure class="highlight dts"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs dts"><span class="hljs-symbol">megs:</span><span class="hljs-number">128</span><br><span class="hljs-meta">#模拟器的内存  </span><br><br><span class="hljs-meta">#下面这两个路径需要自己去看一下对应路径下是否真的有这两个文件，防止路径出错</span><br><span class="hljs-symbol">romimage:</span>file=<span class="hljs-meta-keyword">/usr/</span>local<span class="hljs-meta-keyword">/share/</span>bochs/BIOS-bochs-latest<br><span class="hljs-meta">#这个是BIOS-bochs-latest的路径，可能不一样</span><br><span class="hljs-symbol"></span><br><span class="hljs-symbol">vgaromimage:</span>file=<span class="hljs-meta-keyword">/usr/</span>local<span class="hljs-meta-keyword">/share/</span>bochs/VGABIOS-lgpl-latest  <br><span class="hljs-meta">#这个是VGABIOS-lgpl-latest的路径，也可能不一样</span><br><span class="hljs-symbol"></span><br><span class="hljs-symbol">floppya:</span><span class="hljs-number">1</span>_44=a.img,status=inserted <br><span class="hljs-meta">#这个是启动软盘,在当前目录下，如果不在当前目录，需要指明路径  </span><br><span class="hljs-symbol"></span><br><span class="hljs-symbol">boot:</span>floppy  <br><span class="hljs-meta">#表示从软盘启动</span><br><span class="hljs-symbol"></span><br><span class="hljs-symbol">log:</span>bochsout.txt  <br><span class="hljs-meta">#日志输出文件</span><br></code></pre></div></td></tr></table></figure><p>执行：<code>bochs -f bochsrc</code>：</p><p><img src="/2021/11/25/OS%E5%AE%9E%E9%AA%8C%E6%9C%80%E7%BB%88%E7%89%88/4.png" srcset="/img/loading.gif" lazyload alt="4"></p></li></ol><p>​       选择6开始模拟，会弹出黑色窗口，输入c后显示“Hello，OS  world！”，如图：</p><p><img src="/2021/11/25/OS%E5%AE%9E%E9%AA%8C%E6%9C%80%E7%BB%88%E7%89%88/5.png" srcset="/img/loading.gif" lazyload alt="5"></p><p>参考链接:</p><p><a href="https://www.cnblogs.com/chengmf/p/12526821.html">Linux下Bochs，NASM安装和使用 - 放飞梦想C - 博客园 (cnblogs.com)</a></p><p><a href="https://www.icode9.com/content-1-922657.html">OS实验 ： 用NASM编写MBR引导程序，在BOCHS虚拟机中测试 (icode9.com)</a></p><h3 id="2-2-在Ubuntu（或银河麒麟）下裁剪和编译Linux内核，并启用新内核"><a href="#2-2-在Ubuntu（或银河麒麟）下裁剪和编译Linux内核，并启用新内核" class="headerlink" title="2.2 在Ubuntu（或银河麒麟）下裁剪和编译Linux内核，并启用新内核"></a>2.2 在Ubuntu（或银河麒麟）下裁剪和编译Linux内核，并启用新内核</h3><p><img src="/2021/11/25/OS%E5%AE%9E%E9%AA%8C%E6%9C%80%E7%BB%88%E7%89%88/6.png" srcset="/img/loading.gif" lazyload alt="6"></p><ol><li><p>虚拟机容量</p><p>为了保证编译内核的空间足够，尽量分配较大的磁盘空间，首先在虚拟机设置里将硬盘容量尽可能调大，我这里设置硬盘空间为120GB，如果了解银河麒麟的自定义分盘的话，则不必设置那么大，保证文件根目录的大小有50GB以上就可以，但是我在自定义分区时，虽然系统安装成功，但安装之后重启时，系统无法正常启动，所以只能使用系统默认的分区方式。在系统默然的分区方式中，以120GB为例，分给文件系统根目录的只有49GB，还有30GB分给了data，但是我们编译内核时并不会用到data目录，所以要尽可能把整个硬盘大小调大，以保证根目录下的空间足够。如果空间不够，可能编译好久之后，报错指明空间不够，之前的编译也就白费了。</p></li><li><p>下载解压Linux源码包</p><p>下载地址：<a href="https://mirrors.edge.kernel.org/pub/linux/kernel/">Linux源码包镜像地址</a></p><p>下载之后解压到虚拟机下即可，解压到/usr/src目录下</p><p><img src="/2021/11/25/OS%E5%AE%9E%E9%AA%8C%E6%9C%80%E7%BB%88%E7%89%88/8.png" srcset="/img/loading.gif" lazyload alt="8"></p></li><li><p>编译内核</p><p>经过多次血与泪的实验（包括至少6次重装虚拟机，4次make）,采用下面的几个步骤更为稳妥：</p><ul><li><p>在进行下面的apt-get之前，执行<code>apt update</code>，<code>apt upgrade</code>这两个命令，来更新系统当前的软件包，不然可能会出现apt-get找不到软件包的情况。如果有很多的软件包没有更新的话，第二个命令会执行较长的时间，需要耐心等待。</p></li><li><p>打开系统设置，进入安全中心，进入应用控制与保护，选择允许安装任何来源的程序，如果没有选择允许安装任何来源的程序，即便是在root用户下make编译，本系统还是会不断的询问是否允许安装，如果允许不即时，就会导致因为没有权限而make失败</p><p>非常烦人！</p><p><img src="/2021/11/25/OS%E5%AE%9E%E9%AA%8C%E6%9C%80%E7%BB%88%E7%89%88/%E5%85%B3%E9%97%AD%E5%AE%89%E8%A3%85%E4%BF%9D%E6%8A%A4.png" srcset="/img/loading.gif" lazyload alt="关闭安装保护"></p></li><li><p>安装基本的工具软件：</p></li></ul><figure class="highlight q"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs q">sudo apt-<span class="hljs-built_in">get</span> install libncurses5-<span class="hljs-built_in">dev</span> libssl-<span class="hljs-built_in">dev</span> <br><br>sudo apt-<span class="hljs-built_in">get</span> install build-essential openssl <br><br>sudo apt-<span class="hljs-built_in">get</span> install zlibc minizip <br><br>sudo apt-<span class="hljs-built_in">get</span> install libidn11-<span class="hljs-built_in">dev</span> libidn11<br><br>sudo apt-<span class="hljs-built_in">get</span> install flex bison <span class="hljs-comment">//下面的make会用到</span><br><br>sudo apt-<span class="hljs-built_in">get</span> install libelf-<span class="hljs-built_in">dev</span> <span class="hljs-comment">//某次编译因为没安装这个，导致又编译了一遍！！</span><br></code></pre></div></td></tr></table></figure><ul><li><p>进入Linxu源码包解压后的目录，执行下面的命令：</p><figure class="highlight vim"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs vim">sudo <span class="hljs-keyword">make</span> mrproper <br><br>sudo <span class="hljs-keyword">make</span> clean <br><br>sudo <span class="hljs-keyword">make</span> menuconfig  <br>//提示<span class="hljs-keyword">make</span>出错，缺少flex bison，直接apt-<span class="hljs-built_in">get</span> install flex bison即可<br></code></pre></div></td></tr></table></figure><p>上述三个命令中，mrproper为清除编译过程中产生的所有中间文件，clean为清除上一次产生的编译中间文件，在make menuconfig中出现图形界面后，说明make没问题，按键盘的右箭头选到exit退出即可，退出提示中选择保存，实现内核的默认配置。</p><p><img src="/2021/11/25/OS%E5%AE%9E%E9%AA%8C%E6%9C%80%E7%BB%88%E7%89%88/9.png" srcset="/img/loading.gif" lazyload alt="图形化界面"></p></li><li><p>进行编译，执行命令<code>sudo make -j8</code></p><p><code>make -j8</code>是指使用8个线程并行编译，这样编译速度要比普通的make命令快很多，但依然会很耗时，如果处理器性能较好，可能不到一个小时就可编译完成，否则可能需要更多的时间，我实验的机子是intel i5，编译了两个过小时，需要耐心等待，这个过程中可能出现各种各样的问题，但经过前面几个步骤的铺垫，基本上我之前遇到的问题都不会出现了。</p><p>make顺利完成后：<img src="/2021/11/25/OS%E5%AE%9E%E9%AA%8C%E6%9C%80%E7%BB%88%E7%89%88/makej8.png" srcset="/img/loading.gif" lazyload alt="makej8"></p><p>出现最后一个行<code>Kernel：arch/x86/boot/bxImage is ready (#2)</code>,说明已经make成功啦！</p></li><li><p>执行命令<code>make modules_install</code>,安装内核模块</p><p>该命令也需要一定的时间，如果上一步的make没有问题，这里的命令应该是没有问题的，成功结束后：<img src="/2021/11/25/OS%E5%AE%9E%E9%AA%8C%E6%9C%80%E7%BB%88%E7%89%88/modules_install.png" srcset="/img/loading.gif" lazyload alt="modules_install"></p></li><li><p> 执行命令<code>make install</code>,这个命令很快就可以结束，成功执行后</p></li></ul><p>  <img src="/2021/11/25/OS%E5%AE%9E%E9%AA%8C%E6%9C%80%E7%BB%88%E7%89%88/makeinstall.png" srcset="/img/loading.gif" lazyload alt="makeinstall"></p><p>  到这里已经成功编译了内核，并嵌入了操作系统~~</p></li><li><p>选择新内核启动</p></li></ol><p>​     重启虚拟机，在重启开机界面按住shift，出现内核选择加载界面，选择高级选项并进入：</p><p><img src="/2021/11/25/OS%E5%AE%9E%E9%AA%8C%E6%9C%80%E7%BB%88%E7%89%88/%E5%86%85%E6%A0%B8%E9%80%89%E6%8B%A9%E5%8A%A0%E8%BD%BD%E7%95%8C%E9%9D%A2.png" srcset="/img/loading.gif" lazyload alt="内核选择加载界面"></p><p>​    进入高级选项后，我们可以看到出现两个内核版本，一个是原来的5.10.0，另一个是我们新安装的5.10.1，这里针对每一个版本都有两      个选项，第一个选项是有银河麒麟操作界面的，第二个选项是纯命令行界面</p><p><img src="/2021/11/25/OS%E5%AE%9E%E9%AA%8C%E6%9C%80%E7%BB%88%E7%89%88/%E9%80%89%E6%8B%A9%E5%86%85%E6%A0%B8.png" srcset="/img/loading.gif" lazyload alt="选择内核"></p><p>​    选择新安装的5.10.1版本，成功进入命令行，使用命令<code>uname -a</code>查看当前系统版本：</p><p><img src="/2021/11/25/OS%E5%AE%9E%E9%AA%8C%E6%9C%80%E7%BB%88%E7%89%88/%E5%86%85%E6%A0%B8%E7%95%8C%E9%9D%A2.png" srcset="/img/loading.gif" lazyload alt="内核界面"></p><p><img src="/2021/11/25/OS%E5%AE%9E%E9%AA%8C%E6%9C%80%E7%BB%88%E7%89%88/%E5%8E%9F%E7%89%88%E6%9C%AC.png" srcset="/img/loading.gif" lazyload alt="原版本"></p><p>​    到这里，新的内核已经成功被启用了！！！</p><ol start="5"><li><p>参考链接：</p><p><a href="https://www.cnblogs.com/acm-icpcer/p/8029656.html">最全最详细：ubuntu16.04下linux内核编译升级更新以及设备驱动程序的编写</a></p></li></ol><h3 id="2-3-为新内核添加系统调用"><a href="#2-3-为新内核添加系统调用" class="headerlink" title="2.3 为新内核添加系统调用"></a>2.3 为新内核添加系统调用</h3><p><img src="/2021/11/25/OS%E5%AE%9E%E9%AA%8C%E6%9C%80%E7%BB%88%E7%89%88/%E5%AE%9E%E9%AA%8C2.3%E8%A6%81%E6%B1%82.png" srcset="/img/loading.gif" lazyload alt="实验2.3要求"></p><ol><li><p>进入内核目录，添加自定义系统调用</p><p>执行命令：</p><figure class="highlight awk"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs awk"><span class="hljs-regexp">//</span>root权限下操作<br>cd <span class="hljs-regexp">/usr/</span>src<span class="hljs-regexp">/linux-5.10.1/</span><br>gedit arch<span class="hljs-regexp">/x86/</span>entry<span class="hljs-regexp">/syscalls/</span>syscall_64.tbl<br><span class="hljs-regexp">//</span>编辑文件也可以使用vim，使用gedit若没有这个命令，则apt-get install gedit安装<br></code></pre></div></td></tr></table></figure><p>在打开的文件中添加新增的系统调用号，并参照其他的调用命名格式进行命名：</p><p><img src="/2021/11/25/OS%E5%AE%9E%E9%AA%8C%E6%9C%80%E7%BB%88%E7%89%88/%E6%B7%BB%E5%8A%A0%E8%87%AA%E5%AE%9A%E4%B9%89%E8%B0%83%E7%94%A8.png" srcset="/img/loading.gif" lazyload alt="添加自定义调用"></p><p>这里添加了调用号为441和442的两个调用，分别对应func_add和func_max，保存退出。</p></li><li><p>添加系统调用函数声明</p><p>输入命令：<code>sudo gedit include/linux/syscalls.h</code>，进入文件添加函数声明：</p><p><img src="/2021/11/25/OS%E5%AE%9E%E9%AA%8C%E6%9C%80%E7%BB%88%E7%89%88/%E6%B7%BB%E5%8A%A0%E8%B0%83%E7%94%A8%E5%87%BD%E6%95%B0%E7%9A%84%E5%A3%B0%E6%98%8E.png" srcset="/img/loading.gif" lazyload alt="添加调用函数的声明"></p></li><li><p>添加调用函数的定义</p><p>输入命令：<code>sudo gedit kernel/sys.c</code>，进入函数，在文件末尾增加自定义的函数内容：</p><p><img src="/2021/11/25/OS%E5%AE%9E%E9%AA%8C%E6%9C%80%E7%BB%88%E7%89%88/%E6%B7%BB%E5%8A%A0%E8%B0%83%E7%94%A8%E5%87%BD%E6%95%B0%E7%9A%84%E5%AE%9A%E4%B9%89.png" srcset="/img/loading.gif" lazyload alt="添加调用函数的定义"></p></li><li><p>重新编译内核</p><p>整体过程与实验2.2一致，依次执行以下命令：</p><figure class="highlight gauss"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs gauss">sudo <span class="hljs-built_in">make</span> mrproper<br>sudo <span class="hljs-built_in">make</span> clean<br>sudo <span class="hljs-built_in">make</span> menuconfig<br>sudo <span class="hljs-built_in">make</span> -j8<br>sudo <span class="hljs-built_in">make</span> modules_install        <br>sudo <span class="hljs-built_in">make</span> install      <br></code></pre></div></td></tr></table></figure><p>编译完内核后，重启虚拟机，选择新编译的内核进入桌面</p></li><li><p>编辑测试程序</p><p>随便写一个测试程序，在该程序中调用新添加的两个系统调用函数：</p><p><img src="/2021/11/25/OS%E5%AE%9E%E9%AA%8C%E6%9C%80%E7%BB%88%E7%89%88/%E6%B5%8B%E8%AF%95%E6%A0%B7%E4%BE%8B.png" srcset="/img/loading.gif" lazyload alt="测试样例"></p><p>编译运行该测试程序：<img src="/2021/11/25/OS%E5%AE%9E%E9%AA%8C%E6%9C%80%E7%BB%88%E7%89%88/%E6%B5%8B%E8%AF%95%E7%BB%93%E6%9E%9C.png" srcset="/img/loading.gif" lazyload alt="测试结果"></p><p>根据输出结果可以看到，我们成功添加了两个系统调用。，此外可以使用<code>dmesg</code>命令，查看之前系统调用的信息，可以看到我们在系统调用函数中自定义输出的字符串，说明新增的系统调用确实成功运行了：</p><p><img src="/2021/11/25/OS%E5%AE%9E%E9%AA%8C%E6%9C%80%E7%BB%88%E7%89%88/dmesg%E5%91%BD%E4%BB%A4.png" srcset="/img/loading.gif" lazyload alt="dmesg命令"></p></li></ol><h3 id="2-4-脚本-批处理程序编写"><a href="#2-4-脚本-批处理程序编写" class="headerlink" title="2.4 脚本/批处理程序编写"></a>2.4 脚本/批处理程序编写</h3><p><img src="/2021/11/25/OS%E5%AE%9E%E9%AA%8C%E6%9C%80%E7%BB%88%E7%89%88/%E5%AE%9E%E9%AA%8C2.4%E8%A6%81%E6%B1%82.png" srcset="/img/loading.gif" lazyload alt="实验2.4要求"></p><p>菜鸟教程学习<a href="https://www.runoob.com/linux/linux-shell.html">Shell编程</a></p><p>Shell脚本如下：</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-meta">#!/usr/bin/bash</span><br><br>path=<span class="hljs-variable">$1</span><br>sub=<span class="hljs-string">&quot;CST&quot;</span><br><span class="hljs-built_in">cd</span> <span class="hljs-variable">$path</span> <span class="hljs-comment">#进入目标目录</span><br><span class="hljs-keyword">for</span> filename <span class="hljs-keyword">in</span> `ls *.txt` <span class="hljs-comment">#取目录下的txt文件</span><br><span class="hljs-keyword">do</span><br>    last=$(awk <span class="hljs-string">&#x27;END &#123;print&#125;&#x27;</span> <span class="hljs-variable">$filename</span>)  <span class="hljs-comment">#取文件最后一行</span><br><span class="hljs-keyword">if</span> [[ <span class="hljs-variable">$last</span> =~ <span class="hljs-variable">$sub</span> ]]   <span class="hljs-comment">#判断最后一行是否有“CST”标识，如果有，则认为已经写入时间</span><br><span class="hljs-keyword">then</span> <br>    sed -i <span class="hljs-string">&#x27;$d&#x27;</span> <span class="hljs-variable">$filename</span>  <span class="hljs-comment">#若时间已存在，删除最后一行</span><br>    date&gt;&gt;<span class="hljs-variable">$filename</span><br>    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;<span class="hljs-variable">$filename</span>:更新时间&quot;</span><br><span class="hljs-keyword">else</span><br>    date&gt;&gt;<span class="hljs-variable">$filename</span><br>    <span class="hljs-built_in">echo</span> “<span class="hljs-variable">$filename</span>:追加时间”<br><span class="hljs-keyword">fi</span><br><span class="hljs-keyword">done</span><br><span class="hljs-built_in">exit</span><br></code></pre></div></td></tr></table></figure><p>测试结果如下：</p><p><img src="/2021/11/25/OS%E5%AE%9E%E9%AA%8C%E6%9C%80%E7%BB%88%E7%89%88/shell%E8%84%9A%E6%9C%AC%E6%89%A7%E8%A1%8C%E6%83%85%E5%86%B5.png" srcset="/img/loading.gif" lazyload alt="shell脚本执行情况"></p>]]></content>
    
    
    <categories>
      
      <category>HUST</category>
      
    </categories>
    
    
    <tags>
      
      <tag>OS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>HUST数据库实验</title>
    <link href="/2021/11/20/HUST%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AE%9E%E9%AA%8C/"/>
    <url>/2021/11/20/HUST%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AE%9E%E9%AA%8C/</url>
    
    <content type="html"><![CDATA[<h1 id="HUST网安数据库实验"><a href="#HUST网安数据库实验" class="headerlink" title="HUST网安数据库实验"></a>HUST网安数据库实验</h1><div class="note note-success">            <p>单纯的sql语句练习。。。</p>          </div><div class="note note-danger">            <p>如有错误，还请指正，不胜感激！🤣</p>          </div><h2 id="实验一-SQL基础练习"><a href="#实验一-SQL基础练习" class="headerlink" title="实验一.SQL基础练习"></a>实验一.SQL基础练习</h2><figure class="highlight asciidoc"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs asciidoc">1.create database CSEDB_学号;<br><span class="hljs-comment">//2-8为前面几个表操作语句的联系，但一顿搞之后得到的表结构可能与指导书上的结构不一致</span><br><span class="hljs-comment">//在进行insert之前，可以先把库删了，重新建库，直接使用4.5.(1)里的三个建表语句</span><br>2.创建表student(具体数据类型char的大小感觉多少就行，影响不大)<br>mysql&gt; create table Student(<br><span class="hljs-code">    -&gt; Sno char(9) primary key,</span><br><span class="hljs-code">    -&gt; Sname char(20) unique,</span><br><span class="hljs-code">    -&gt; Ssex char(2),</span><br><span class="hljs-code">    -&gt; Sage  int,</span><br><span class="hljs-code">    -&gt; Sdept char(20),</span><br><span class="hljs-code">    -&gt; Scholarshhip char(2))</span><br><span class="hljs-code">    -&gt; ;</span><br>Query OK, 0 rows affected (0.12 sec)<br><br><span class="hljs-section">mysql&gt; show columns from student;</span><br><span class="hljs-section">+--------------+----------+------+-----+---------+-------+</span><br><span class="hljs-section">| Field        | Type     | Null | Key | Default | Extra |</span><br><span class="hljs-section">+--------------+----------+------+-----+---------+-------+</span><br>| Sno          | char(9)  | NO   | PRI | NULL    |       |<br>| Sname        | char(20) | YES  | UNI | NULL    |       |<br>| Ssex         | char(2)  | YES  |     | NULL    |       |<br>| Sage         | int      | YES  |     | NULL    |       |<br>| Sdept        | char(20) | YES  |     | NULL    |       |<br><span class="hljs-section">| Scholarshhip | char(2)  | YES  |     | NULL    |       |</span><br><span class="hljs-section">+--------------+----------+------+-----+---------+-------+</span><br>6 rows in set (0.02 sec)<br><br>ps: 唯一键可以为空，主键不能为空<br><br>3.创建表course<br>mysql&gt; create table Course(<br><span class="hljs-code">    -&gt; Cno char(4) primary key,</span><br><span class="hljs-code">    -&gt; Cname char(40) unique,</span><br><span class="hljs-code">    -&gt; Cpno char(4),</span><br><span class="hljs-code">    -&gt; Ccredit int)</span><br><span class="hljs-code">    -&gt; ;</span><br>Query OK, 0 rows affected (0.07 sec)<br><br><span class="hljs-section">mysql&gt; show columns from course;</span><br><span class="hljs-section">+---------+----------+------+-----+---------+-------+</span><br><span class="hljs-section">| Field   | Type     | Null | Key | Default | Extra |</span><br><span class="hljs-section">+---------+----------+------+-----+---------+-------+</span><br>| Cno     | char(4)  | NO   | PRI | NULL    |       |<br>| Cname   | char(40) | YES  | UNI | NULL    |       |<br>| Cpno    | char(4)  | YES  |     | NULL    |       |<br><span class="hljs-section">| Ccredit | int      | YES  |     | NULL    |       |</span><br><span class="hljs-section">+---------+----------+------+-----+---------+-------+</span><br>4 rows in set (0.00 sec)<br><br>4.创建表sc<br>mysql&gt; create table sc(<br><span class="hljs-code">    -&gt; sno char(5),</span><br><span class="hljs-code">    -&gt; cno char(3),</span><br><span class="hljs-code">    -&gt; grade int,</span><br><span class="hljs-code">    -&gt; primary key (sno,cno)</span><br><span class="hljs-code">    -&gt; );</span><br>Query OK, 0 rows affected (0.03 sec)<br><br><span class="hljs-section">mysql&gt; show columns from Sc;</span><br><span class="hljs-section">+-------+---------+------+-----+---------+-------+</span><br><span class="hljs-section">| Field | Type    | Null | Key | Default | Extra |</span><br><span class="hljs-section">+-------+---------+------+-----+---------+-------+</span><br>| Sno   | char(9) | NO   | PRI | NULL    |       |<br>| Cno   | char(4) | NO   | PRI | NULL    |       |<br><span class="hljs-section">| Grade | int     | YES  |     | NULL    |       |</span><br><span class="hljs-section">+-------+---------+------+-----+---------+-------+</span><br>3 rows in set (0.00 sec)<br><br>5，删除表<br><span class="hljs-section">mysql&gt; show tables;</span><br><span class="hljs-section">+----------------------------+</span><br><span class="hljs-section">| Tables_in_csedb_u201911749 |</span><br><span class="hljs-section">+----------------------------+</span><br>| course                     |<br>| sc                         |<br><span class="hljs-section">| student                    |</span><br><span class="hljs-section">+----------------------------+</span><br>3 rows in set (0.00 sec)<br><br>mysql&gt; drop tables sc;<br>Query OK, 0 rows affected (0.02 sec)<br><br><span class="hljs-section">mysql&gt; show tables;</span><br><span class="hljs-section">+----------------------------+</span><br><span class="hljs-section">| Tables_in_csedb_u201911749 |</span><br><span class="hljs-section">+----------------------------+</span><br>| course                     |<br><span class="hljs-section">| student                    |</span><br><span class="hljs-section">+----------------------------+</span><br>2 rows in set (0.00 sec)<br><br>6.更改表结构（增加/删除一列，更改表字段类型）<br><span class="hljs-section">mysql&gt; show columns from student;</span><br><span class="hljs-section">+--------------+----------+------+-----+---------+-------+</span><br><span class="hljs-section">| Field        | Type     | Null | Key | Default | Extra |</span><br><span class="hljs-section">+--------------+----------+------+-----+---------+-------+</span><br>| Sno          | char(9)  | NO   | PRI | NULL    |       |<br>| Sname        | char(20) | YES  | UNI | NULL    |       |<br>| Ssex         | char(2)  | YES  |     | NULL    |       |<br>| Sage         | int      | YES  |     | NULL    |       |<br>| Sdept        | char(20) | YES  |     | NULL    |       |<br><span class="hljs-section">| Scholarshhip | char(2)  | YES  |     | NULL    |       |</span><br><span class="hljs-section">+--------------+----------+------+-----+---------+-------+</span><br>6 rows in set (0.00 sec)<br><span class="hljs-comment">//添加列 alter table 表名 add column(加不加都行) 列名  列属性;</span><br>mysql&gt; alter table student add Scome datetime;<br>Query OK, 0 rows affected (0.04 sec)<br>Records: 0  Duplicates: 0  Warnings: 0<br><span class="hljs-comment">//删除列 alter table 表名 drop column(加不加都行) 列名;</span><br>mysql&gt; alter table student drop column scome;<br>Query OK, 0 rows affected (0.08 sec)<br>Records: 0  Duplicates: 0  Warnings: 0<br><span class="hljs-comment">//修改列属性 alter table 表名 modify column(加不加都行) 列名  列属性;</span><br>mysql&gt; alter table student modify column sage smallint;<br>Query OK, 0 rows affected (0.12 sec)<br>Records: 0  Duplicates: 0  Warnings: 0<br><br><span class="hljs-section">mysql&gt; show columns from student;</span><br><span class="hljs-section">+--------------+----------+------+-----+---------+-------+</span><br><span class="hljs-section">| Field        | Type     | Null | Key | Default | Extra |</span><br><span class="hljs-section">+--------------+----------+------+-----+---------+-------+</span><br>| Sno          | char(9)  | NO   | PRI | NULL    |       |<br>| Sname        | char(20) | YES  | UNI | NULL    |       |<br>| Ssex         | char(2)  | YES  |     | NULL    |       |<br>| Sage         | smallint | YES  |     | NULL    |       |<br>| Sdept        | char(20) | YES  |     | NULL    |       |<br>| Scholarshhip | char(2)  | YES  |     | NULL    |       |<br><span class="hljs-section">| Scome        | datetime | YES  |     | NULL    |       |</span><br><span class="hljs-section">+--------------+----------+------+-----+---------+-------+</span><br>7 rows in set (0.00 sec)<br><br>7.创建索引，删除索引<br>mysql&gt; create unique index stusno on student(sno);<br>Query OK, 0 rows affected, 1 warning (0.04 sec)<br>Records: 0  Duplicates: 0  Warnings: 1<br>##第一种删除方式<br>mysql&gt; drop index stusno on student;<br>Query OK, 0 rows affected (0.02 sec)<br>Records: 0  Duplicates: 0  Warnings: 0<br>##第二种删除方式<br>mysql&gt; alter table student drop index stusno;<br>Query OK, 0 rows affected (0.02 sec)<br>Records: 0  Duplicates: 0  Warnings: 0<br>##第三种删除方式，删除主键索引<br>alter table 表名 drop primary key;<br>##第四种删除方式，删除外键索引<br>alter table 表名 drop foreign key 外键名；//未检验<br><br>8.按照指导书的要求，建立三个表之间的关系，就是设置外键<br>mysql&gt; alter table course add foreign key (cpno) references course(cno);<br>Query OK, 0 rows affected (0.11 sec)<br>Records: 0  Duplicates: 0  Warnings: 0<br><br>mysql&gt; alter table sc add foreign key (sno) references student(sno);<br>Query OK, 0 rows affected (0.09 sec)<br>Records: 0  Duplicates: 0  Warnings: 0<br><br>mysql&gt; alter table sc add foreign key (cno) references course(cno);<br>Query OK, 0 rows affected (0.13 sec)<br>Records: 0  Duplicates: 0  Warnings: 0<br>注意外键约束！！！<br>ps:设置外键之后，如果想要修改父表的话，需要设置一个级联操作命令，当在操作父表时，子表会受到相同的影响，如果没有设置级联操作，更改父表会报错。<br>级联操作：<br><span class="hljs-code">主表更新</span><br><span class="hljs-code">语法形式为：on update[级联操作]</span><br><span class="hljs-code">主表删除</span><br><span class="hljs-code">语法形式为：on delete[级联操作]</span><br><span class="hljs-code">这里的级联操作常见的有三种形式：</span><br><span class="hljs-code">cascade：同步操作，或者串联操作！也就是当主表记录删除或更新的时候，从表也进行相应的删除   更新！</span><br><span class="hljs-code">set null：设置为null，也就是当主表记录删除或更新的时候，从表中的外键字段设置为空</span><br><span class="hljs-code">restrict：拒绝主表的更新或删除</span><br><span class="hljs-code"></span><br>9.添加数据(insert)<br>语法规则：<br><span class="hljs-code">1. 指定向那些列插入值：</span><br><span class="hljs-code">insert into table_name ( field1, field2,...fieldN )</span><br><span class="hljs-code">                       values</span><br><span class="hljs-code">                       ( value1, value2,...valueN );</span><br><span class="hljs-code">    2. 如果插入的数据覆盖所有的列，则不用指定插入列的范围</span><br><span class="hljs-code">    insert into table_name</span><br><span class="hljs-code">       values</span><br><span class="hljs-code">       ( value1, value2,...valueN );</span><br>ps: 所有符号都必须是英文符号<br>向student表中插入数据：<br>mysql&gt; insert into student values(<span class="hljs-emphasis">&#x27;200215121&#x27;</span>,<span class="hljs-emphasis">&#x27;李勇&#x27;</span>,<span class="hljs-emphasis">&#x27;男&#x27;</span>,20,<span class="hljs-emphasis">&#x27;CS&#x27;</span>,<span class="hljs-emphasis">&#x27;否&#x27;</span>);<br>Query OK, 1 row affected (0.01 sec)<br><br>mysql&gt; insert into student values(<span class="hljs-emphasis">&#x27;200215122&#x27;</span>,<span class="hljs-emphasis">&#x27;刘晨&#x27;</span>,<span class="hljs-emphasis">&#x27;女&#x27;</span>,19,<span class="hljs-emphasis">&#x27;CS&#x27;</span>,<span class="hljs-emphasis">&#x27;否&#x27;</span>);<br>Query OK, 1 row affected (0.00 sec)<br><br>mysql&gt; insert into student values(<span class="hljs-emphasis">&#x27;200215123&#x27;</span>,<span class="hljs-emphasis">&#x27;王敏&#x27;</span>,<span class="hljs-emphasis">&#x27;女&#x27;</span>,18,<span class="hljs-emphasis">&#x27;MA&#x27;</span>,<span class="hljs-emphasis">&#x27;否&#x27;</span>);<br>Query OK, 1 row affected (0.00 sec)<br><br>mysql&gt; insert into student values(<span class="hljs-emphasis">&#x27;200215125&#x27;</span>,<span class="hljs-emphasis">&#x27;张立&#x27;</span>,<span class="hljs-emphasis">&#x27;男&#x27;</span>,19,<span class="hljs-emphasis">&#x27;IS&#x27;</span>,<span class="hljs-emphasis">&#x27;否&#x27;</span>);<br>Query OK, 1 row affected (0.01 sec)<br><br><span class="hljs-section">mysql&gt; select * from student;</span><br><span class="hljs-section">+-----------+-------+------+------+-------+-------------+</span><br><span class="hljs-section">| Sno       | Sname | Ssex | Sage | Sdept | Scholarship |</span><br><span class="hljs-section">+-----------+-------+------+------+-------+-------------+</span><br>| 200215121 | 李勇  | 男   |   20 | CS    | 否          |<br>| 200215122 | 刘晨  | 女   |   19 | CS    | 否          |<br>| 200215123 | 王敏  | 女   |   18 | MA    | 否          |<br><span class="hljs-section">| 200215125 | 张立  | 男   |   19 | IS    | 否          |</span><br><span class="hljs-section">+-----------+-------+------+------+-------+-------------+</span><br>4 rows in set (0.01 sec)<br>向course表中插入数据：<br>insert into course values(<span class="hljs-emphasis">&#x27;1&#x27;</span>,<span class="hljs-emphasis">&#x27;数据库&#x27;</span>,NULL,4);<br>insert into course values(<span class="hljs-emphasis">&#x27;2&#x27;</span>,<span class="hljs-emphasis">&#x27;数学&#x27;</span>,NULL,2);<br>insert into course values(<span class="hljs-emphasis">&#x27;3&#x27;</span>,<span class="hljs-emphasis">&#x27;信息系统&#x27;</span>,NULL,4);<br>insert into course values(<span class="hljs-emphasis">&#x27;4&#x27;</span>,<span class="hljs-emphasis">&#x27;操作系统&#x27;</span>,NULL,3);<br>insert into course values(<span class="hljs-emphasis">&#x27;5&#x27;</span>,<span class="hljs-emphasis">&#x27;数据结构&#x27;</span>,NULL,4);<br>insert into course values(<span class="hljs-emphasis">&#x27;6&#x27;</span>,<span class="hljs-emphasis">&#x27;数据处理&#x27;</span>,NULL,2);<br>insert into course values(<span class="hljs-emphasis">&#x27;7&#x27;</span>,<span class="hljs-emphasis">&#x27;java&#x27;</span>,NULL,4);<br>向sc表中插入数据：<br>insert into SC values(<span class="hljs-emphasis">&#x27;200215121&#x27;</span>,<span class="hljs-emphasis">&#x27;1&#x27;</span>,92);<br>insert into SC values(<span class="hljs-emphasis">&#x27;200215121&#x27;</span>,<span class="hljs-emphasis">&#x27;2&#x27;</span>,85);<br>insert into SC values(<span class="hljs-emphasis">&#x27;200215121&#x27;</span>,<span class="hljs-emphasis">&#x27;3&#x27;</span>,88);<br>insert into SC values(<span class="hljs-emphasis">&#x27;200215122&#x27;</span>,<span class="hljs-emphasis">&#x27;2&#x27;</span>,90);<br>insert into SC values(<span class="hljs-emphasis">&#x27;200215122&#x27;</span>,<span class="hljs-emphasis">&#x27;3&#x27;</span>,80);<br><br>10.更新数据(update)<br>语法规则：<br><span class="hljs-code">UPDATE [LOW_PRIORITY] [IGNORE] table_name </span><br><span class="hljs-code">SET field1=new-value1, field2=new-value2</span><br><span class="hljs-code">[WHERE Clause]</span><br><span class="hljs-code">[ORDER BY ...]</span><br><span class="hljs-code">[LIMIT ROW_COUNT]</span><br>更新courseb表数据：<br>update Course set Cpno = <span class="hljs-emphasis">&#x27;5&#x27;</span> where Cno = <span class="hljs-emphasis">&#x27;1&#x27;</span>;<br>update Course set Cpno = <span class="hljs-emphasis">&#x27;1&#x27;</span> where Cno = <span class="hljs-emphasis">&#x27;3&#x27;</span>;<br>update Course set Cpno = <span class="hljs-emphasis">&#x27;6&#x27;</span> where Cno = <span class="hljs-emphasis">&#x27;4&#x27;</span>;<br>update Course set Cpno = <span class="hljs-emphasis">&#x27;7&#x27;</span> where Cno = <span class="hljs-emphasis">&#x27;5&#x27;</span>;<br>update Course set Cpno = <span class="hljs-emphasis">&#x27;6&#x27;</span> where Cno = <span class="hljs-emphasis">&#x27;7&#x27;</span>;<br><br>11.删除数据(delete)<br>语法规则：<br><span class="hljs-code">delete from table_name [where clause]</span><br><span class="hljs-code">如果没有指定where，则删除表中所有数据</span><br><br><span class="hljs-section">mysql&gt; select * from student;</span><br><span class="hljs-section">+-----------+-------+------+------+-------+-------------+</span><br><span class="hljs-section">| Sno       | Sname | Ssex | Sage | Sdept | Scholarship |</span><br><span class="hljs-section">+-----------+-------+------+------+-------+-------------+</span><br>| 200215121 | 李勇  | 男   |   20 | CS    | 否          |<br><span class="hljs-section">| 200215122 | 刘晨  | 女   |   19 | CS    | 否          |</span><br><span class="hljs-section">+-----------+-------+------+------+-------+-------------+</span><br>2 rows in set (0.01 sec)<br><br>mysql&gt; delete from student;<br>Query OK, 2 rows affected (0.02 sec)<br><br>mysql&gt; select * from student;<br>Empty set (0.00 sec)<br><br>12.扩展练习：<br>（1）查询全体学生的学号、姓名和年龄；<br>mysql&gt; select sno,sname,sage<br><span class="hljs-section">    -&gt; from student;</span><br><span class="hljs-section">+-----------+-------+------+</span><br><span class="hljs-section">| sno       | sname | sage |</span><br><span class="hljs-section">+-----------+-------+------+</span><br>| 200215121 | 李勇  |   20 |<br>| 200215122 | 刘晨  |   19 |<br>| 200215123 | 王敏  |   18 |<br><span class="hljs-section">| 200215125 | 张立  |   19 |</span><br><span class="hljs-section">+-----------+-------+------+</span><br>4 rows in set (0.00 sec)<br>（2）查询所有计算机系学生的详细记录；<br>mysql&gt; select *<br><span class="hljs-code">    -&gt; from student</span><br><span class="hljs-section">    -&gt; where sdept = &#x27;CS&#x27;;</span><br><span class="hljs-section">+-----------+-------+------+------+-------+-------------+</span><br><span class="hljs-section">| Sno       | Sname | Ssex | Sage | Sdept | Scholarship |</span><br><span class="hljs-section">+-----------+-------+------+------+-------+-------------+</span><br>| 200215121 | 李勇  | 男   |   20 | CS    | 否          |<br><span class="hljs-section">| 200215122 | 刘晨  | 女   |   19 | CS    | 否          |</span><br><span class="hljs-section">+-----------+-------+------+------+-------+-------------+</span><br>2 rows in set (0.00 sec)<br>（3）找出考试成绩为优秀（90 分及以上）或不及格的学生的学号、课程号及成绩；<br>mysql&gt; select *<br><span class="hljs-code">    -&gt; from sc</span><br><span class="hljs-section">    -&gt; where grade &gt;= 90 or grade &lt;60;</span><br><span class="hljs-section">+-----------+-----+-------+</span><br><span class="hljs-section">| Sno       | Cno | Grade |</span><br><span class="hljs-section">+-----------+-----+-------+</span><br>| 200215121 | 1   |    92 |<br><span class="hljs-section">| 200215122 | 2   |    90 |</span><br><span class="hljs-section">+-----------+-----+-------+</span><br>2 rows in set (0.00 sec)<br>（4）查询年龄不在 19~20 岁之间的学生姓名、性别和年龄；<br>mysql&gt; select sname,ssex,sage<br><span class="hljs-code">    -&gt; from student</span><br><span class="hljs-section">    -&gt; where sage not in (19,20);</span><br><span class="hljs-section">+-------+------+------+</span><br><span class="hljs-section">| sname | ssex | sage |</span><br><span class="hljs-section">+-------+------+------+</span><br><span class="hljs-section">| 王敏  | 女   |   18 |</span><br><span class="hljs-section">+-------+------+------+</span><br>1 row in set (0.00 sec)<br>（5）查询数学系（MA）、信息系（IS)的学生的姓名和所在系；<br>mysql&gt; select sname,sdept<br><span class="hljs-code">    -&gt; from student</span><br><span class="hljs-section">    -&gt; where sdept in (&#x27;CS&#x27;,&#x27;MA&#x27;);</span><br><span class="hljs-section">+-------+-------+</span><br><span class="hljs-section">| sname | sdept |</span><br><span class="hljs-section">+-------+-------+</span><br>| 李勇  | CS    |<br>| 刘晨  | CS    |<br><span class="hljs-section">| 王敏  | MA    |</span><br><span class="hljs-section">+-------+-------+</span><br>3 rows in set (0.00 sec)<br>（6）查询名称中包含“数据”的所有课程的课程号、课程名及其学分；<br>mysql&gt; select cno,cname,ccredit<br><span class="hljs-code">    -&gt; from course</span><br><span class="hljs-section">    -&gt; where cname like &#x27;%数据%&#x27;;</span><br><span class="hljs-section">+-----+----------+---------+</span><br><span class="hljs-section">| cno | cname    | ccredit |</span><br><span class="hljs-section">+-----+----------+---------+</span><br>| 1   | 数据库   |       4 |<br>| 5   | 数据结构 |       4 |<br><span class="hljs-section">| 6   | 数据处理 |       2 |</span><br><span class="hljs-section">+-----+----------+---------+</span><br>3 rows in set (0.00 sec)<br>（7) 找出所有没有选修课成绩的学生学号和课程号；<br>mysql&gt; select distinct sno,cno<br><span class="hljs-code">    -&gt; from student,course</span><br><span class="hljs-section">    -&gt; where sno not in(select distinct sno from sc) and cno not in (select distinct cno from sc);</span><br><span class="hljs-section">+-----------+-----+</span><br><span class="hljs-section">| sno       | cno |</span><br><span class="hljs-section">+-----------+-----+</span><br>| 200215123 | 6   |<br>| 200215125 | 6   |<br>| 200215123 | 4   |<br>| 200215125 | 4   |<br>| 200215123 | 7   |<br>| 200215125 | 7   |<br>| 200215123 | 5   |<br><span class="hljs-section">| 200215125 | 5   |</span><br><span class="hljs-section">+-----------+-----+</span><br>8 rows in set (0.00 sec)<br>（8）查询学生 200215121 选修课的最高分、最低分以及平均成绩；<br>mysql&gt; select max(grade),min(grade),avg(grade)<br><span class="hljs-code">    -&gt; from sc</span><br><span class="hljs-section">    -&gt; where sno = &#x27;200215121&#x27;;</span><br><span class="hljs-section">+------------+------------+------------+</span><br><span class="hljs-section">| max(grade) | min(grade) | avg(grade) |</span><br><span class="hljs-section">+------------+------------+------------+</span><br><span class="hljs-section">|         92 |         85 |    88.3333 |</span><br><span class="hljs-section">+------------+------------+------------+</span><br>1 row in set (0.01 sec)<br>（9）查询选修了 2 号课程的学生的学号及其成绩，查询结果按成绩升序排列；<br>mysql&gt; select sno,grade<br><span class="hljs-code">    -&gt; from sc</span><br><span class="hljs-code">    -&gt; where cno = &#x27;2&#x27;</span><br><span class="hljs-section">    -&gt; order by grade;</span><br><span class="hljs-section">+-----------+-------+</span><br><span class="hljs-section">| sno       | grade |</span><br><span class="hljs-section">+-----------+-------+</span><br>| 200215121 |    85 |<br><span class="hljs-section">| 200215122 |    90 |</span><br><span class="hljs-section">+-----------+-------+</span><br>2 rows in set (0.00 sec)<br>（10）查询每个系名及其学生的平均年龄。<br>mysql&gt; select sdept,avg(sage)<br><span class="hljs-code">    -&gt; from student</span><br><span class="hljs-section">    -&gt; group by sdept;</span><br><span class="hljs-section">+-------+-----------+</span><br><span class="hljs-section">| sdept | avg(sage) |</span><br><span class="hljs-section">+-------+-----------+</span><br>| CS    |   19.5000 |<br>| MA    |   18.0000 |<br><span class="hljs-section">| IS    |   19.0000 |</span><br><span class="hljs-section">+-------+-----------+</span><br>3 rows in set (0.01 sec)<br><span class="hljs-code"> （思考：如何查询学生平均年龄在 19 岁以下（含 19 岁）的系别及其学生的平均年龄？）</span><br><span class="hljs-code"> mysql&gt; select sdept,avg(sage)</span><br><span class="hljs-code">    -&gt; from student</span><br><span class="hljs-code">    -&gt; group by sdept</span><br><span class="hljs-section">    -&gt; having avg(sage)&lt;=19;</span><br><span class="hljs-section">+-------+-----------+</span><br><span class="hljs-section">| sdept | avg(sage) |</span><br><span class="hljs-section">+-------+-----------+</span><br>| MA    |   18.0000 |<br><span class="hljs-section">| IS    |   19.0000 |</span><br><span class="hljs-section">+-------+-----------+</span><br>2 rows in set (0.01 sec)<br><br>ps：where用于过滤指定的行，它后面的判断数据必须是存在的行，having用于对前面select的结果进行筛选，但having不一定非要配合group by使用，如果我前面select的结果中没有，就不能用having<br>总的来说，where直接对数据表中的字段进行直接筛选，而having是对前面筛选的结果进行筛选<br>参考链接:https://blog.csdn.net/yexudengzhidao/article/details/54924471<br>参考链接:https://www.jianshu.com/p/e66abfadcdca<br></code></pre></div></td></tr></table></figure><h2 id="实验二-SQL复杂操作练习"><a href="#实验二-SQL复杂操作练习" class="headerlink" title="实验二.SQL复杂操作练习"></a>实验二.SQL复杂操作练习</h2><p><img src="/2021/11/20/HUST%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AE%9E%E9%AA%8C/1.png" srcset="/img/loading.gif" lazyload alt="1"></p><figure class="highlight asciidoc"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs asciidoc">（1）查询每门课程及其被选情况（输出所有课程中每门课的课程号、课程名称、选修该课程的学生<br>学号及成绩--如果没有学生选择该课，则相应的学生学号及成绩为空值）。<br>mysql&gt; select course.cno,cname,sno,grade<br><span class="hljs-section">    -&gt; from course left outer join sc on (course.cno = sc.cno);</span><br><span class="hljs-section">+-----+----------+-----------+-------+</span><br><span class="hljs-section">| cno | cname    | sno       | grade |</span><br><span class="hljs-section">+-----+----------+-----------+-------+</span><br>| 1   | 数据库   | 200215121 |    92 |<br>| 2   | 数学     | 200215122 |    90 |<br>| 2   | 数学     | 200215121 |    85 |<br>| 3   | 信息系统 | 200215122 |    80 |<br>| 3   | 信息系统 | 200215121 |    88 |<br>| 4   | 操作系统 | NULL      |  NULL |<br>| 5   | 数据结构 | NULL      |  NULL |<br>| 6   | 数据处理 | NULL      |  NULL |<br><span class="hljs-section">| 7   | java     | NULL      |  NULL |</span><br><span class="hljs-section">+-----+----------+-----------+-------+</span><br>9 rows in set (0.00 sec)<br><br>（2）查询与“张立”同岁的学生的学号、姓名和年龄。（要求使用至少 3 种方法求解）<br>第一种：<br>mysql&gt; select sno,sname,sage<br><span class="hljs-code">-&gt; from student</span><br><span class="hljs-section">-&gt; where sage = (select sage from student where sname = &#x27;张立&#x27;);</span><br><span class="hljs-section">+-----------+-------+------+</span><br><span class="hljs-section">| sno       | sname | sage |</span><br><span class="hljs-section">+-----------+-------+------+</span><br>| 200215122 | 刘晨  |   19 |<br><span class="hljs-section">| 200215125 | 张立  |   19 |</span><br><span class="hljs-section">+-----------+-------+------+</span><br>第二种：<br>mysql&gt; select sno,sname,sage<br><span class="hljs-code">    -&gt; from student</span><br><span class="hljs-section">    -&gt; where sage in(select sage from student where sname = &#x27;张立&#x27;);</span><br><span class="hljs-section">+-----------+-------+------+</span><br><span class="hljs-section">| sno       | sname | sage |</span><br><span class="hljs-section">+-----------+-------+------+</span><br>| 200215122 | 刘晨  |   19 |<br><span class="hljs-section">| 200215125 | 张立  |   19 |</span><br><span class="hljs-section">+-----------+-------+------+</span><br>2 rows in set (0.00 sec)<br>2 rows in set (0.01 sec)<br>第三种：(无语-_-)<br>mysql&gt; select s1.sno,s1.sname,s1.sage<br><span class="hljs-code">    -&gt; from student s1,student s2</span><br><span class="hljs-section">    -&gt; where s1.sage = s2.sage and s2.sname = &#x27;张立&#x27;;</span><br><span class="hljs-section">+-----------+-------+------+</span><br><span class="hljs-section">| sno       | sname | sage |</span><br><span class="hljs-section">+-----------+-------+------+</span><br>| 200215122 | 刘晨  |   19 |<br><span class="hljs-section">| 200215125 | 张立  |   19 |</span><br><span class="hljs-section">+-----------+-------+------+</span><br>2 rows in set (0.00 sec)<br><br>（3）查询选修了 3 号课程而且成绩为良好（80~89 分）的所有学生的学号和姓名。<br>mysql&gt; select student.sno,student.sname<br><span class="hljs-code">    -&gt; from student,sc</span><br><span class="hljs-section">    -&gt; where student.sno = sc.sno and sc.cno = &#x27;3&#x27; and sc.grade &gt;=80 and sc.grade &lt;=89;</span><br><span class="hljs-section">+-----------+-------+</span><br><span class="hljs-section">| sno       | sname |</span><br><span class="hljs-section">+-----------+-------+</span><br>| 200215121 | 李勇  |<br><span class="hljs-section">| 200215122 | 刘晨  |</span><br><span class="hljs-section">+-----------+-------+</span><br>2 rows in set (0.00 sec)<br><br>（4）查询学生 200215122 选修的课程号、课程名<br>mysql&gt; select course.cno,course.cname<br><span class="hljs-code">    -&gt; from course,sc</span><br><span class="hljs-section">    -&gt; where course.cno = sc.cno and sc.sno = &#x27;200215122&#x27;;</span><br><span class="hljs-section">+-----+----------+</span><br><span class="hljs-section">| cno | cname    |</span><br><span class="hljs-section">+-----+----------+</span><br>| 2   | 数学     |<br><span class="hljs-section">| 3   | 信息系统 |</span><br><span class="hljs-section">+-----+----------+</span><br>2 rows in set (0.00 sec)<br><span class="hljs-code"> （思考：如何查询学生 200215122 选修的课程号、课程名及成绩？）</span><br><span class="hljs-code"> mysql&gt; select course.cno,course.cname,sc.grade</span><br><span class="hljs-code">    -&gt; from course,sc</span><br><span class="hljs-section">    -&gt; where course.cno = sc.cno and sc.sno = &#x27;200215122&#x27;;</span><br><span class="hljs-section">+-----+----------+-------+</span><br><span class="hljs-section">| cno | cname    | grade |</span><br><span class="hljs-section">+-----+----------+-------+</span><br>| 2   | 数学     |    90 |<br><span class="hljs-section">| 3   | 信息系统 |    80 |</span><br><span class="hljs-section">+-----+----------+-------+</span><br>2 rows in set (0.00 sec)<br><br>（5）找出每个学生低于他所选修课程平均成绩 5 分以上的课程号。（输出学号和课程号）<br>mysql&gt; select sno,cno<br><span class="hljs-code">    -&gt; from sc s1</span><br><span class="hljs-code">    -&gt; where s1.grade+5&lt; (select avg(grade) from sc s2 where s1.sno = s2.sno);</span><br>Empty set (0.00 sec)<br><br>mysql&gt; select sno,cno<br><span class="hljs-code">    -&gt; from sc s1</span><br><span class="hljs-section">    -&gt; where s1.grade+5&lt;= (select avg(grade) from sc s2 where s1.sno = s2.sno);</span><br><span class="hljs-section">+-----------+-----+</span><br><span class="hljs-section">| sno       | cno |</span><br><span class="hljs-section">+-----------+-----+</span><br><span class="hljs-section">| 200215122 | 3   |</span><br><span class="hljs-section">+-----------+-----+</span><br>1 row in set (0.00 sec)<br><br>（6）查询比所有男生年龄都小的女生的学号、姓名和年龄。<br><span class="hljs-comment">//当前表</span><br><span class="hljs-section">mysql&gt; select * from student;</span><br><span class="hljs-section">+-----------+-------+------+------+-------+-------------+</span><br><span class="hljs-section">| Sno       | Sname | Ssex | Sage | Sdept | Scholarship |</span><br><span class="hljs-section">+-----------+-------+------+------+-------+-------------+</span><br>| 200215121 | 李勇  | 男   |   21 | CS    | 否          |<br>| 200215122 | 刘晨  | 女   |   20 | CS    | 否          |<br>| 200215123 | 王敏  | 女   |   19 | MA    | 否          |<br>| 200215125 | 张立  | 男   |   20 | IS    | 否          |<br>| 200215126 | 张三  | 女   |   19 | IS    | 否          |<br><span class="hljs-section">| 200215128 | 李四  | 男   |   21 | IS    | 否          |</span><br><span class="hljs-section">+-----------+-------+------+------+-------+-------------+</span><br>6 rows in set (0.00 sec)<br><br>mysql&gt; select sno,sname,sage<br><span class="hljs-code">    -&gt; from student</span><br><span class="hljs-section">    -&gt; where ssex = &#x27;女&#x27; and sage &lt;(select min(sage) from student where ssex = &#x27;男&#x27;);</span><br><span class="hljs-section">+-----------+-------+------+</span><br><span class="hljs-section">| sno       | sname | sage |</span><br><span class="hljs-section">+-----------+-------+------+</span><br>| 200215123 | 王敏  |   19 |<br><span class="hljs-section">| 200215126 | 张三  |   19 |</span><br><span class="hljs-section">+-----------+-------+------+</span><br>2 rows in set (0.01 sec)<br>（7）查询所有选修了 2 号课程的学生姓名及所在系。<br>mysql&gt; select sname,sdept<br><span class="hljs-code">    -&gt; from student,sc</span><br><span class="hljs-section">    -&gt; where sc.cno = &#x27;2&#x27; and student.sno = sc.sno;</span><br><span class="hljs-section">+-------+-------+</span><br><span class="hljs-section">| sname | sdept |</span><br><span class="hljs-section">+-------+-------+</span><br>| 李勇  | CS    |<br><span class="hljs-section">| 刘晨  | CS    |</span><br><span class="hljs-section">+-------+-------+</span><br>2 rows in set (0.00 sec)<br><br>（8）使用 update 语句把成绩为良的学生的年龄增加 2 岁，并查询出来。<br><span class="hljs-section">mysql&gt; select * from student;</span><br><span class="hljs-section">+-----------+-------+------+------+-------+-------------+</span><br><span class="hljs-section">| Sno       | Sname | Ssex | Sage | Sdept | Scholarship |</span><br><span class="hljs-section">+-----------+-------+------+------+-------+-------------+</span><br>| 200215121 | 李勇  | 男   |   20 | CS    | 否          |<br>| 200215122 | 刘晨  | 女   |   19 | CS    | 否          |<br>| 200215123 | 王敏  | 女   |   18 | MA    | 否          |<br><span class="hljs-section">| 200215125 | 张立  | 男   |   19 | IS    | 否          |</span><br><span class="hljs-section">+-----------+-------+------+------+-------+-------------+</span><br>4 rows in set (0.00 sec)<br><br><span class="hljs-section">mysql&gt; select * from sc;</span><br><span class="hljs-section">+-----------+-----+-------+</span><br><span class="hljs-section">| Sno       | Cno | Grade |</span><br><span class="hljs-section">+-----------+-----+-------+</span><br>| 200215121 | 1   |    92 |<br>| 200215121 | 2   |    85 |<br>| 200215121 | 3   |    88 |<br>| 200215122 | 2   |    90 |<br><span class="hljs-section">| 200215122 | 3   |    80 |</span><br><span class="hljs-section">+-----------+-----+-------+</span><br>5 rows in set (0.00 sec)<br><br>mysql&gt; update student<br><span class="hljs-code">    -&gt; set student.sage = student.sage+2</span><br><span class="hljs-code">    -&gt; where student.sno in(</span><br><span class="hljs-code">    -&gt; select sc.sno</span><br><span class="hljs-code">    -&gt; from sc</span><br><span class="hljs-code">    -&gt; where sc.grade &gt;=80 and sc.grade&lt;=89);</span><br>Query OK, 2 rows affected (0.01 sec)<br>Rows matched: 2  Changed: 2  Warnings: 0<br><br><span class="hljs-section">mysql&gt; select * from student;</span><br><span class="hljs-section">+-----------+-------+------+------+-------+-------------+</span><br><span class="hljs-section">| Sno       | Sname | Ssex | Sage | Sdept | Scholarship |</span><br><span class="hljs-section">+-----------+-------+------+------+-------+-------------+</span><br>| 200215121 | 李勇  | 男   |   22 | CS    | 否          |<br>| 200215122 | 刘晨  | 女   |   21 | CS    | 否          |<br>| 200215123 | 王敏  | 女   |   18 | MA    | 否          |<br><span class="hljs-section">| 200215125 | 张立  | 男   |   19 | IS    | 否          |</span><br><span class="hljs-section">+-----------+-------+------+------+-------+-------------+</span><br>4 rows in set (0.00 sec)<br><br>（9）使用 insert 语句增加两门课程：C 语言和人工智能，并查询出来<br><span class="hljs-section">mysql&gt; select * from course;</span><br><span class="hljs-section">+-----+----------+------+---------+</span><br><span class="hljs-section">| Cno | Cname    | Cpno | Ccredit |</span><br><span class="hljs-section">+-----+----------+------+---------+</span><br>| 1   | 数据库   | 5    |       4 |<br>| 2   | 数学     | NULL |       2 |<br>| 3   | 信息系统 | 1    |       4 |<br>| 4   | 操作系统 | 6    |       3 |<br>| 5   | 数据结构 | 7    |       4 |<br>| 6   | 数据处理 | NULL |       2 |<br><span class="hljs-section">| 7   | java     | 6    |       4 |</span><br><span class="hljs-section">+-----+----------+------+---------+</span><br>7 rows in set (0.00 sec)<br><br>mysql&gt; insert into course(cno,cname)<br><span class="hljs-code">    -&gt; values (&#x27;22&#x27;,&#x27;C语言&#x27;);</span><br>Query OK, 1 row affected (0.00 sec)<br><br>mysql&gt; insert into course(cno,cname)<br><span class="hljs-code">    -&gt; values (&#x27;88&#x27;,&#x27;人工智能&#x27;);</span><br>Query OK, 1 row affected (0.00 sec)<br><br><span class="hljs-section">mysql&gt; select * from course;</span><br><span class="hljs-section">+-----+----------+------+---------+</span><br><span class="hljs-section">| Cno | Cname    | Cpno | Ccredit |</span><br><span class="hljs-section">+-----+----------+------+---------+</span><br>| 1   | 数据库   | 5    |       4 |<br>| 2   | 数学     | NULL |       2 |<br>| 22  | C语言    | NULL |    NULL |<br>| 3   | 信息系统 | 1    |       4 |<br>| 4   | 操作系统 | 6    |       3 |<br>| 5   | 数据结构 | 7    |       4 |<br>| 6   | 数据处理 | NULL |       2 |<br>| 7   | java     | 6    |       4 |<br><span class="hljs-section">| 88  | 人工智能 | NULL |    NULL |</span><br><span class="hljs-section">+-----+----------+------+---------+</span><br>9 rows in set (0.00 sec)<br><br>（10）使用 delete 语句把人工智能课程删除，并查询出来。<br>mysql&gt; delete from course<br><span class="hljs-code">    -&gt; where cname = &#x27;人工智能&#x27;;</span><br>Query OK, 1 row affected (0.00 sec)<br><br><span class="hljs-section">mysql&gt; select * from course;</span><br><span class="hljs-section">+-----+----------+------+---------+</span><br><span class="hljs-section">| Cno | Cname    | Cpno | Ccredit |</span><br><span class="hljs-section">+-----+----------+------+---------+</span><br>| 1   | 数据库   | 5    |       4 |<br>| 2   | 数学     | NULL |       2 |<br>| 22  | C语言    | NULL |    NULL |<br>| 3   | 信息系统 | 1    |       4 |<br>| 4   | 操作系统 | 6    |       3 |<br>| 5   | 数据结构 | 7    |       4 |<br>| 6   | 数据处理 | NULL |       2 |<br><span class="hljs-section">| 7   | java     | 6    |       4 |</span><br><span class="hljs-section">+-----+----------+------+---------+</span><br>8 rows in set (0.00 sec)<br></code></pre></div></td></tr></table></figure><h2 id="实验三-SQL高级实验"><a href="#实验三-SQL高级实验" class="headerlink" title="实验三.SQL高级实验"></a>实验三.SQL高级实验</h2><figure class="highlight gherkin"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br><span class="line">546</span><br><span class="line">547</span><br><span class="line">548</span><br><span class="line">549</span><br><span class="line">550</span><br><span class="line">551</span><br><span class="line">552</span><br><span class="line">553</span><br><span class="line">554</span><br><span class="line">555</span><br><span class="line">556</span><br><span class="line">557</span><br><span class="line">558</span><br><span class="line">559</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs gherkin">(1)创建 CS 系的视图 CS_View<br><br>mysql&gt; create view cs_view as<br>    -&gt; select <span class="hljs-symbol">*</span><br>    -&gt; from student<br>    -&gt; where sdept = &#x27;CS&#x27;;<br>Query OK, 0 rows affected (0.04 sec)<br><br>mysql&gt; select <span class="hljs-symbol">*</span> from cs_view;<br>+-----------+-------+------+------+-------+-------------+<br>|<span class="hljs-string"> Sno       </span>|<span class="hljs-string"> Sname </span>|<span class="hljs-string"> Ssex </span>|<span class="hljs-string"> Sage </span>|<span class="hljs-string"> Sdept </span>|<span class="hljs-string"> Scholarship </span>|<br>+-----------+-------+------+------+-------+-------------+<br>|<span class="hljs-string"> 200215121 </span>|<span class="hljs-string"> 李勇  </span>|<span class="hljs-string"> 男   </span>|<span class="hljs-string">   20 </span>|<span class="hljs-string"> CS    </span>|<span class="hljs-string"> 否          </span>|<br>|<span class="hljs-string"> 200215122 </span>|<span class="hljs-string"> 刘晨  </span>|<span class="hljs-string"> 女   </span>|<span class="hljs-string">   19 </span>|<span class="hljs-string"> CS    </span>|<span class="hljs-string"> 否          </span>|<br>+-----------+-------+------+------+-------+-------------+<br>2 rows in set (0.02 sec)<br>(2)在视图 CS_View 上查询 CS 系选修了 1 号课程的学生<br><br>mysql&gt; select cs_view.sno,sname,sage<br>    -&gt; from cs_view,sc<br>    -&gt; where cs_view.sno = sc.sno and sc.cno = &#x27;1&#x27;;<br>+-----------+-------+------+<br>|<span class="hljs-string"> Sno       </span>|<span class="hljs-string"> Sname </span>|<span class="hljs-string"> Sage </span>|<br>+-----------+-------+------+<br>|<span class="hljs-string"> 200215121 </span>|<span class="hljs-string"> 李勇  </span>|<span class="hljs-string">   20 </span>|<br>+-----------+-------+------+<br>1 row in set (0.02 sec)<br>(3)创建 IS 系成绩大于 80 的学生的视图 IS_View<br>mysql&gt; select <span class="hljs-symbol">*</span> from student;<br>+-----------+-------+------+------+-------+-------------+<br>|<span class="hljs-string"> Sno       </span>|<span class="hljs-string"> Sname </span>|<span class="hljs-string"> Ssex </span>|<span class="hljs-string"> Sage </span>|<span class="hljs-string"> Sdept </span>|<span class="hljs-string"> Scholarship </span>|<br>+-----------+-------+------+------+-------+-------------+<br>|<span class="hljs-string"> 200215121 </span>|<span class="hljs-string"> 李勇  </span>|<span class="hljs-string"> 男   </span>|<span class="hljs-string">   20 </span>|<span class="hljs-string"> CS    </span>|<span class="hljs-string"> 否          </span>|<br>|<span class="hljs-string"> 200215122 </span>|<span class="hljs-string"> 刘晨  </span>|<span class="hljs-string"> 女   </span>|<span class="hljs-string">   19 </span>|<span class="hljs-string"> CS    </span>|<span class="hljs-string"> 否          </span>|<br>|<span class="hljs-string"> 200215123 </span>|<span class="hljs-string"> 王敏  </span>|<span class="hljs-string"> 女   </span>|<span class="hljs-string">   18 </span>|<span class="hljs-string"> MA    </span>|<span class="hljs-string"> 否          </span>|<br>|<span class="hljs-string"> 200215125 </span>|<span class="hljs-string"> 张立  </span>|<span class="hljs-string"> 男   </span>|<span class="hljs-string">   19 </span>|<span class="hljs-string"> IS    </span>|<span class="hljs-string"> 否          </span>|<br>|<span class="hljs-string"> 200215126 </span>|<span class="hljs-string"> 张三  </span>|<span class="hljs-string"> NULL </span>|<span class="hljs-string"> NULL </span>|<span class="hljs-string"> IS    </span>|<span class="hljs-string"> NULL        </span>|<br>|<span class="hljs-string"> 200215128 </span>|<span class="hljs-string"> 李四  </span>|<span class="hljs-string"> NULL </span>|<span class="hljs-string"> NULL </span>|<span class="hljs-string"> IS    </span>|<span class="hljs-string"> NULL        </span>|<br>+-----------+-------+------+------+-------+-------------+<br>6 rows in set (0.00 sec)<br><br>mysql&gt; select <span class="hljs-symbol">*</span> from sc;<br>+-----------+-----+-------+<br>|<span class="hljs-string"> Sno       </span>|<span class="hljs-string"> Cno </span>|<span class="hljs-string"> Grade </span>|<br>+-----------+-----+-------+<br>|<span class="hljs-string"> 200215121 </span>|<span class="hljs-string"> 1   </span>|<span class="hljs-string">    92 </span>|<br>|<span class="hljs-string"> 200215121 </span>|<span class="hljs-string"> 2   </span>|<span class="hljs-string">    85 </span>|<br>|<span class="hljs-string"> 200215121 </span>|<span class="hljs-string"> 3   </span>|<span class="hljs-string">    88 </span>|<br>|<span class="hljs-string"> 200215122 </span>|<span class="hljs-string"> 2   </span>|<span class="hljs-string">    90 </span>|<br>|<span class="hljs-string"> 200215122 </span>|<span class="hljs-string"> 3   </span>|<span class="hljs-string">    80 </span>|<br>|<span class="hljs-string"> 200215125 </span>|<span class="hljs-string"> 3   </span>|<span class="hljs-string">    79 </span>|<br>|<span class="hljs-string"> 200215126 </span>|<span class="hljs-string"> 3   </span>|<span class="hljs-string">    90 </span>|<br>|<span class="hljs-string"> 200215128 </span>|<span class="hljs-string"> 1   </span>|<span class="hljs-string">    88 </span>|<br>+-----------+-----+-------+<br>8 rows in set (0.00 sec)<br><br>mysql&gt; create view is_view as<br>    -&gt; select student.sno,sname,sage,ssex,sdept,cno,grade<br>    -&gt; from student,sc<br>    -&gt; where sdept = &#x27;IS&#x27; and student.sno = sc.sno and sc.grade &gt;=80;<br>Query OK, 0 rows affected (0.02 sec)<br><br>mysql&gt; select <span class="hljs-symbol">*</span> from is_view;<br>+-----------+-------+------+------+-------+-----+-------+<br>|<span class="hljs-string"> sno       </span>|<span class="hljs-string"> sname </span>|<span class="hljs-string"> sage </span>|<span class="hljs-string"> ssex </span>|<span class="hljs-string"> sdept </span>|<span class="hljs-string"> cno </span>|<span class="hljs-string"> grade </span>|<br>+-----------+-------+------+------+-------+-----+-------+<br>|<span class="hljs-string"> 200215126 </span>|<span class="hljs-string"> 张三  </span>|<span class="hljs-string"> NULL </span>|<span class="hljs-string"> NULL </span>|<span class="hljs-string"> IS    </span>|<span class="hljs-string"> 3   </span>|<span class="hljs-string">    90 </span>|<br>|<span class="hljs-string"> 200215128 </span>|<span class="hljs-string"> 李四  </span>|<span class="hljs-string"> NULL </span>|<span class="hljs-string"> NULL </span>|<span class="hljs-string"> IS    </span>|<span class="hljs-string"> 1   </span>|<span class="hljs-string">    88 </span>|<br>+-----------+-------+------+------+-------+-----+-------+<br>2 rows in set (0.01 sec)<br>(4)在视图 IS_View 查询 IS 系成绩大于 80 的学生<br>mysql&gt; select <span class="hljs-symbol">*</span> from is_view where grade &gt;=80;<br>+-----------+-------+------+------+-------+-----+-------+<br>|<span class="hljs-string"> sno       </span>|<span class="hljs-string"> sname </span>|<span class="hljs-string"> sage </span>|<span class="hljs-string"> ssex </span>|<span class="hljs-string"> sdept </span>|<span class="hljs-string"> cno </span>|<span class="hljs-string"> grade </span>|<br>+-----------+-------+------+------+-------+-----+-------+<br>|<span class="hljs-string"> 200215126 </span>|<span class="hljs-string"> 张三  </span>|<span class="hljs-string"> NULL </span>|<span class="hljs-string"> NULL </span>|<span class="hljs-string"> IS    </span>|<span class="hljs-string"> 3   </span>|<span class="hljs-string">    90 </span>|<br>|<span class="hljs-string"> 200215128 </span>|<span class="hljs-string"> 李四  </span>|<span class="hljs-string"> NULL </span>|<span class="hljs-string"> NULL </span>|<span class="hljs-string"> IS    </span>|<span class="hljs-string"> 1   </span>|<span class="hljs-string">    88 </span>|<br>+-----------+-------+------+------+-------+-----+-------+<br>2 rows in set (0.01 sec)<br>(5)删除视图 IS_View<br>mysql&gt; drop view is_view;<br>Query OK, 0 rows affected (0.02 sec)<br><br>mysql&gt; select <span class="hljs-symbol">*</span> from is_view;<br>ERROR 1146 (42S02): Table &#x27;csedb_u201911749.is_view&#x27; doesn&#x27;t exist<br>(6) 利用可视化窗口创建 2 个不同的用户 U1 和 U2,利用系统管理员给 U1 授予 Student 表的<br>查询和更新的权限，给 U2 对 SC 表授予插入的权限。然后用 U1 登录，分别 1）查询学生表<br>的信息；2）把所有学生的年龄增加 1 岁，然后查询；3）删除 IS 系的学生；4）查询 CS 系<br>的选课信息。用 U2 登录，分别 1）在 SC 表中插入 1 条记录（‘200215122’，‘1’，75）；2）<br>查询 SC 表的信息，3）查询视图 CS_View 的信息。<br>//创建用户u1<br>mysql&gt; create user &#x27;u1&#x27;<span class="hljs-meta">@&#x27;%&#x27;</span> identified by &#x27;123456&#x27;;<br>Query OK, 0 rows affected (0.05 sec)<br>//创建用户u2<br>mysql&gt; create user &#x27;u2&#x27;<span class="hljs-meta">@&#x27;%&#x27;</span> identified by &#x27;123456&#x27;;<br>Query OK, 0 rows affected (0.01 sec)<br>//为u1设置权限<br>mysql&gt; grant select,update on student to &#x27;u1&#x27;<span class="hljs-meta">@&#x27;%&#x27;;</span><br>Query OK, 0 rows affected (0.01 sec)<br>//为u2设置权限<br>mysql&gt; grant insert on sc to &#x27;u2&#x27;<span class="hljs-meta">@&#x27;%&#x27;;</span><br>Query OK, 0 rows affected (0.01 sec)<br>//刷新权限<br>mysql&gt; flush privileges;<br>Query OK, 0 rows affected (0.02 sec)<br>//查看用户<br>mysql&gt; SELECT DISTINCT CONCAT(&#x27;User: &#x27;&#x27;&#x27;,user,&#x27;&#x27;&#x27;<span class="hljs-meta">@&#x27;&#x27;&#x27;,host,&#x27;&#x27;&#x27;;&#x27;)</span> AS query FROM mysql.user;<br>+---------------------------------------+<br>|<span class="hljs-string"> query                                 </span>|<br>+---------------------------------------+<br>|<span class="hljs-string"> User: &#x27;u1&#x27;@&#x27;%&#x27;;                       </span>|<br>|<span class="hljs-string"> User: &#x27;u2&#x27;@&#x27;%&#x27;;                       </span>|<br>|<span class="hljs-string"> User: &#x27;mysql.infoschema&#x27;@&#x27;localhost&#x27;; </span>|<br>|<span class="hljs-string"> User: &#x27;mysql.session&#x27;@&#x27;localhost&#x27;;    </span>|<br>|<span class="hljs-string"> User: &#x27;mysql.sys&#x27;@&#x27;localhost&#x27;;        </span>|<br>|<span class="hljs-string"> User: &#x27;root&#x27;@&#x27;localhost&#x27;;             </span>|<br>+---------------------------------------+<br>6 rows in set (0.00 sec)<br>//命令行以不同的用户登录，先设置mysql环境变量，cmd命令行使用：mysql -u u1 -p 密码 以用户u1登录<br><span class="hljs-comment">###############################################################################</span><br>C:\Users\Ke&gt;mysql -u u1 -p<br>Enter password: <span class="hljs-symbol">*</span><span class="hljs-symbol">*</span><span class="hljs-symbol">*</span><span class="hljs-symbol">*</span><span class="hljs-symbol">*</span><span class="hljs-symbol">*</span><br>Welcome to the MySQL monitor.  Commands end with ; or \g.<br>Your MySQL connection id is 12<br><br>mysql&gt; show databases;<br>+--------------------+<br>|<span class="hljs-string"> Database           </span>|<br>+--------------------+<br>|<span class="hljs-string"> csedb_u201911749   </span>|<br>|<span class="hljs-string"> information_schema </span>|<br>+--------------------+<br>2 rows in set (0.01 sec)<br><br>mysql&gt; use csedb_u201911749<br>Database changed<br>mysql&gt; show tables;   //可以看到，u1用户由于管理员设置的权限，只能看到student<br>+----------------------------+<br>|<span class="hljs-string"> Tables_in_csedb_u201911749 </span>|<br>+----------------------------+<br>|<span class="hljs-string"> student                    </span>|<br>+----------------------------+<br>1 row in set (0.00 sec)<br>//u1查询student表<br>mysql&gt; select <span class="hljs-symbol">*</span> from student;<br>+-----------+--------+------+------+-------+-------------+<br>|<span class="hljs-string"> Sno       </span>|<span class="hljs-string"> Sname  </span>|<span class="hljs-string"> Ssex </span>|<span class="hljs-string"> Sage </span>|<span class="hljs-string"> Sdept </span>|<span class="hljs-string"> Scholarship </span>|<br>+-----------+--------+------+------+-------+-------------+<br>|<span class="hljs-string"> 200215121 </span>|<span class="hljs-string"> 李勇   </span>|<span class="hljs-string"> 男   </span>|<span class="hljs-string">   20 </span>|<span class="hljs-string"> CS    </span>|<span class="hljs-string"> 否          </span>|<br>|<span class="hljs-string"> 200215122 </span>|<span class="hljs-string"> 刘晨   </span>|<span class="hljs-string"> 女   </span>|<span class="hljs-string">   19 </span>|<span class="hljs-string"> CS    </span>|<span class="hljs-string"> 否          </span>|<br>|<span class="hljs-string"> 200215123 </span>|<span class="hljs-string"> 王敏   </span>|<span class="hljs-string"> 女   </span>|<span class="hljs-string">   18 </span>|<span class="hljs-string"> MA    </span>|<span class="hljs-string"> 否          </span>|<br>|<span class="hljs-string"> 200215125 </span>|<span class="hljs-string"> 张立   </span>|<span class="hljs-string"> 男   </span>|<span class="hljs-string">   19 </span>|<span class="hljs-string"> IS    </span>|<span class="hljs-string"> 否          </span>|<br>|<span class="hljs-string"> 200215126 </span>|<span class="hljs-string"> 张三   </span>|<span class="hljs-string"> NULL </span>|<span class="hljs-string">   18 </span>|<span class="hljs-string"> IS    </span>|<span class="hljs-string"> NULL        </span>|<br>|<span class="hljs-string"> 200215128 </span>|<span class="hljs-string"> 李四   </span>|<span class="hljs-string"> NULL </span>|<span class="hljs-string">   20 </span>|<span class="hljs-string"> IS    </span>|<span class="hljs-string"> NULL        </span>|<br>+-----------+--------+------+------+-------+-------------+<br>6 rows in set (0.00 sec)<br>//u1更新年龄<br>mysql&gt; update student<br>    -&gt; set sage = sage+1;<br>Query OK, 6 rows affected (0.01 sec)<br>Rows matched: 6  Changed: 6  Warnings: 0<br>//u1重新查询student<br>mysql&gt; select <span class="hljs-symbol">*</span> from student;<br>+-----------+--------+------+------+-------+-------------+<br>|<span class="hljs-string"> Sno       </span>|<span class="hljs-string"> Sname  </span>|<span class="hljs-string"> Ssex </span>|<span class="hljs-string"> Sage </span>|<span class="hljs-string"> Sdept </span>|<span class="hljs-string"> Scholarship </span>|<br>+-----------+--------+------+------+-------+-------------+<br>|<span class="hljs-string"> 200215121 </span>|<span class="hljs-string"> 李勇   </span>|<span class="hljs-string"> 男   </span>|<span class="hljs-string">   21 </span>|<span class="hljs-string"> CS    </span>|<span class="hljs-string"> 否          </span>|<br>|<span class="hljs-string"> 200215122 </span>|<span class="hljs-string"> 刘晨   </span>|<span class="hljs-string"> 女   </span>|<span class="hljs-string">   20 </span>|<span class="hljs-string"> CS    </span>|<span class="hljs-string"> 否          </span>|<br>|<span class="hljs-string"> 200215123 </span>|<span class="hljs-string"> 王敏   </span>|<span class="hljs-string"> 女   </span>|<span class="hljs-string">   19 </span>|<span class="hljs-string"> MA    </span>|<span class="hljs-string"> 否          </span>|<br>|<span class="hljs-string"> 200215125 </span>|<span class="hljs-string"> 张立   </span>|<span class="hljs-string"> 男   </span>|<span class="hljs-string">   20 </span>|<span class="hljs-string"> IS    </span>|<span class="hljs-string"> 否          </span>|<br>|<span class="hljs-string"> 200215126 </span>|<span class="hljs-string"> 张三   </span>|<span class="hljs-string"> NULL </span>|<span class="hljs-string">   19 </span>|<span class="hljs-string"> IS    </span>|<span class="hljs-string"> NULL        </span>|<br>|<span class="hljs-string"> 200215128 </span>|<span class="hljs-string"> 李四   </span>|<span class="hljs-string"> NULL </span>|<span class="hljs-string">   21 </span>|<span class="hljs-string"> IS    </span>|<span class="hljs-string"> NULL        </span>|<br>+-----------+--------+------+------+-------+-------------+<br>6 rows in set (0.00 sec)<br><br>mysql&gt; delete from student<br>    -&gt; where sdept = &#x27;IS&#x27;;<br>ERROR 1142 (42000): DELETE command denied to user &#x27;u1&#x27;<span class="hljs-meta">@&#x27;localhost&#x27;</span> for table &#x27;student&#x27;   //u1没有权限<br>mysql&gt; select sc.sno,sc.cno<br>    -&gt; from student,sc<br>    -&gt; where student.sno = sc.sno;<br>ERROR 1142 (42000): SELECT command denied to user &#x27;u1&#x27;<span class="hljs-meta">@&#x27;localhost&#x27;</span> for table &#x27;sc&#x27;  //u1没有权限<br><span class="hljs-comment">##############################################################################</span><br>C:\Users\Ke&gt;mysql -u u2 -p   //以u2的身份登录<br>Enter password: <span class="hljs-symbol">*</span><span class="hljs-symbol">*</span><span class="hljs-symbol">*</span><span class="hljs-symbol">*</span><span class="hljs-symbol">*</span><span class="hljs-symbol">*</span><br>Welcome to the MySQL monitor.  Commands end with ; or \g.<br>Your MySQL connection id is 13<br><br>mysql&gt; show databases;<br>+--------------------+<br>|<span class="hljs-string"> Database           </span>|<br>+--------------------+<br>|<span class="hljs-string"> csedb_u201911749   </span>|<br>|<span class="hljs-string"> information_schema </span>|<br>+--------------------+<br>2 rows in set (0.00 sec)<br><br>mysql&gt; use csedb_u201911749;<br>Database changed<br>mysql&gt; show tables;   //u2只能看到sc表<br>+----------------------------+<br>|<span class="hljs-string"> Tables_in_csedb_u201911749 </span>|<br>+----------------------------+<br>|<span class="hljs-string"> sc                         </span>|<br>+----------------------------+<br>1 row in set (0.00 sec)<br><br>mysql&gt; insert into sc<br>    -&gt; values(&#x27;200215122&#x27;,&#x27;1&#x27;,75);<br>Query OK, 1 row affected (0.01 sec)   //u2具有插入权限，插入成功<br><br>mysql&gt; select <span class="hljs-symbol">*</span> from sc;<br>ERROR 1142 (42000): SELECT command denied to user &#x27;u2&#x27;<span class="hljs-meta">@&#x27;localhost&#x27;</span> for table &#x27;sc&#x27;  //u2没有权限<br>mysql&gt; select <span class="hljs-symbol">*</span> from view cs_view;<br>ERROR 1142 (42000): SELECT command denied to user &#x27;u2&#x27;<span class="hljs-meta">@&#x27;localhost&#x27;</span> for table &#x27;view&#x27;  //u2没有权限<br><span class="hljs-comment">############################################################################</span><br>(7) 用系统管理员登录，收回 U1 的所有权限<br>mysql&gt; revoke select,update on student from &#x27;u1&#x27;<span class="hljs-meta">@&#x27;%&#x27;;</span><br>Query OK, 0 rows affected (0.01 sec)<br><span class="hljs-comment">##########################################################################</span><br>(8) 用 U1 登录，查询学生表的信息<br>C:\Users\Ke&gt;mysql -u u1 -p<br>Enter password: <span class="hljs-symbol">*</span><span class="hljs-symbol">*</span><span class="hljs-symbol">*</span><span class="hljs-symbol">*</span><span class="hljs-symbol">*</span><span class="hljs-symbol">*</span><br>Welcome to the MySQL monitor.  Commands end with ; or \g.<br>Your MySQL connection id is 18<br><br>mysql&gt; use csedb_u201911749<br>Database changed<br>mysql&gt; select <span class="hljs-symbol">*</span> from student;<br>ERROR 1142 (42000): SELECT command denied to user &#x27;u1&#x27;<span class="hljs-meta">@&#x27;localhost&#x27;</span> for table &#x27;student&#x27; //u1已经没有的select权限<br><span class="hljs-comment">###########################################################################</span><br>(9) 用系统管理员登录<br>(10) 对 SC 表建立一个更新触发器，当更新了 SC 表的成绩时，如果更新后的成绩大于等于<br>95，则检查该成绩的学生是否有奖学金，如果奖学金是“否”，则修改为“是”。如果修改后的<br>成绩小于 95，则检查该学生的其他成绩是不是有大于 95 的，如果都没有，且修改前的成绩<br>是大于 95 时，则把其奖学金修改为”否”。然后进行成绩修改，并进行验证是否触发器正确<br>执行。1）首先把某个学生成绩修改为 98，查询其奖学金。2）再把刚才的成绩修改为 80，<br>再查询其奖学金。<br>//定义触发器<br>mysql&gt; delimiter $  //把终结符改为$,这样begin和end之间使用的‘;’会被存储进去<br>mysql&gt; create trigger sctr after update on sc<br>    -&gt; for each row<br>    -&gt; begin<br>    -&gt; declare max_grade int;<br>    -&gt; set max_grade = (select max(grade) from sc where sc.sno=new.sno);<br>    -&gt; update student set student.scholarship = &#x27;是&#x27; where student.sno = new.sno and max_grade &gt;=95;<br>    -&gt; update student set student.scholarship = &#x27;否&#x27; where student.sno = new.sno and max_grade <span class="hljs-variable">&lt;95;</span><br><span class="hljs-variable">    -&gt;</span> end$<br>Query OK, 0 rows affected (0.03 sec)<br><br>mysql&gt; delimiter ;<br>//初始数据如下：<br>mysql&gt; select <span class="hljs-symbol">*</span> from student;<br>+-----------+-------+------+------+-------+-------------+<br>|<span class="hljs-string"> Sno       </span>|<span class="hljs-string"> Sname </span>|<span class="hljs-string"> Ssex </span>|<span class="hljs-string"> Sage </span>|<span class="hljs-string"> Sdept </span>|<span class="hljs-string"> Scholarship </span>|<br>+-----------+-------+------+------+-------+-------------+<br>|<span class="hljs-string"> 200215121 </span>|<span class="hljs-string"> 李勇  </span>|<span class="hljs-string"> 男   </span>|<span class="hljs-string">   21 </span>|<span class="hljs-string"> CS    </span>|<span class="hljs-string"> 否          </span>|<br>|<span class="hljs-string"> 200215122 </span>|<span class="hljs-string"> 刘晨  </span>|<span class="hljs-string"> 女   </span>|<span class="hljs-string">   20 </span>|<span class="hljs-string"> CS    </span>|<span class="hljs-string"> 否          </span>|<br>|<span class="hljs-string"> 200215123 </span>|<span class="hljs-string"> 王敏  </span>|<span class="hljs-string"> 女   </span>|<span class="hljs-string">   19 </span>|<span class="hljs-string"> MA    </span>|<span class="hljs-string"> 否          </span>|<br>|<span class="hljs-string"> 200215125 </span>|<span class="hljs-string"> 张立  </span>|<span class="hljs-string"> 男   </span>|<span class="hljs-string">   20 </span>|<span class="hljs-string"> IS    </span>|<span class="hljs-string"> 否          </span>|<br>|<span class="hljs-string"> 200215126 </span>|<span class="hljs-string"> 张三  </span>|<span class="hljs-string"> NULL </span>|<span class="hljs-string">   19 </span>|<span class="hljs-string"> IS    </span>|<span class="hljs-string"> 否          </span>|<br>|<span class="hljs-string"> 200215128 </span>|<span class="hljs-string"> 李四  </span>|<span class="hljs-string"> NULL </span>|<span class="hljs-string">   21 </span>|<span class="hljs-string"> IS    </span>|<span class="hljs-string"> 否          </span>|<br>+-----------+-------+------+------+-------+-------------+<br>6 rows in set (0.00 sec)<br><br>mysql&gt; select <span class="hljs-symbol">*</span> from sc;<br>+-----------+-----+-------+<br>|<span class="hljs-string"> Sno       </span>|<span class="hljs-string"> Cno </span>|<span class="hljs-string"> Grade </span>|<br>+-----------+-----+-------+<br>|<span class="hljs-string"> 200215121 </span>|<span class="hljs-string"> 1   </span>|<span class="hljs-string">    92 </span>|<br>|<span class="hljs-string"> 200215121 </span>|<span class="hljs-string"> 2   </span>|<span class="hljs-string">    85 </span>|<br>|<span class="hljs-string"> 200215121 </span>|<span class="hljs-string"> 3   </span>|<span class="hljs-string">    88 </span>|<br>|<span class="hljs-string"> 200215122 </span>|<span class="hljs-string"> 1   </span>|<span class="hljs-string">    75 </span>|<br>|<span class="hljs-string"> 200215122 </span>|<span class="hljs-string"> 2   </span>|<span class="hljs-string">    90 </span>|<br>|<span class="hljs-string"> 200215122 </span>|<span class="hljs-string"> 3   </span>|<span class="hljs-string">    80 </span>|<br>|<span class="hljs-string"> 200215125 </span>|<span class="hljs-string"> 3   </span>|<span class="hljs-string">    79 </span>|<br>|<span class="hljs-string"> 200215126 </span>|<span class="hljs-string"> 3   </span>|<span class="hljs-string">    90 </span>|<br>|<span class="hljs-string"> 200215128 </span>|<span class="hljs-string"> 1   </span>|<span class="hljs-string">    88 </span>|<br>+-----------+-----+-------+<br>9 rows in set (0.00 sec)<br>//修改200215121的1号课成绩为98<br>mysql&gt; update sc set grade = 98 where sno = &#x27;200215121&#x27; and cno = &#x27;1&#x27;;<br>Query OK, 1 row affected (0.02 sec)<br>Rows matched: 1  Changed: 1  Warnings: 0<br>//查看student，奖学金由否改为了是<br>mysql&gt; select <span class="hljs-symbol">*</span> from student;<br>+-----------+-------+------+------+-------+-------------+<br>|<span class="hljs-string"> Sno       </span>|<span class="hljs-string"> Sname </span>|<span class="hljs-string"> Ssex </span>|<span class="hljs-string"> Sage </span>|<span class="hljs-string"> Sdept </span>|<span class="hljs-string"> Scholarship </span>|<br>+-----------+-------+------+------+-------+-------------+<br>|<span class="hljs-string"> 200215121 </span>|<span class="hljs-string"> 李勇  </span>|<span class="hljs-string"> 男   </span>|<span class="hljs-string">   21 </span>|<span class="hljs-string"> CS    </span>|<span class="hljs-string"> 是          </span>|<br>|<span class="hljs-string"> 200215122 </span>|<span class="hljs-string"> 刘晨  </span>|<span class="hljs-string"> 女   </span>|<span class="hljs-string">   20 </span>|<span class="hljs-string"> CS    </span>|<span class="hljs-string"> 否          </span>|<br>|<span class="hljs-string"> 200215123 </span>|<span class="hljs-string"> 王敏  </span>|<span class="hljs-string"> 女   </span>|<span class="hljs-string">   19 </span>|<span class="hljs-string"> MA    </span>|<span class="hljs-string"> 否          </span>|<br>|<span class="hljs-string"> 200215125 </span>|<span class="hljs-string"> 张立  </span>|<span class="hljs-string"> 男   </span>|<span class="hljs-string">   20 </span>|<span class="hljs-string"> IS    </span>|<span class="hljs-string"> 否          </span>|<br>|<span class="hljs-string"> 200215126 </span>|<span class="hljs-string"> 张三  </span>|<span class="hljs-string"> NULL </span>|<span class="hljs-string">   19 </span>|<span class="hljs-string"> IS    </span>|<span class="hljs-string"> 否          </span>|<br>|<span class="hljs-string"> 200215128 </span>|<span class="hljs-string"> 李四  </span>|<span class="hljs-string"> NULL </span>|<span class="hljs-string">   21 </span>|<span class="hljs-string"> IS    </span>|<span class="hljs-string"> 否          </span>|<br>+-----------+-------+------+------+-------+-------------+<br>6 rows in set (0.00 sec)<br>//修改刚才的成绩为88<br>mysql&gt; update sc set grade = 88 where sno = &#x27;200215121&#x27; and cno = &#x27;1&#x27;;<br>Query OK, 1 row affected (0.01 sec)<br>Rows matched: 1  Changed: 1  Warnings: 0<br>//修改项的奖学金由是改成了否<br>mysql&gt; select <span class="hljs-symbol">*</span> from student;<br>+-----------+-------+------+------+-------+-------------+<br>|<span class="hljs-string"> Sno       </span>|<span class="hljs-string"> Sname </span>|<span class="hljs-string"> Ssex </span>|<span class="hljs-string"> Sage </span>|<span class="hljs-string"> Sdept </span>|<span class="hljs-string"> Scholarship </span>|<br>+-----------+-------+------+------+-------+-------------+<br>|<span class="hljs-string"> 200215121 </span>|<span class="hljs-string"> 李勇  </span>|<span class="hljs-string"> 男   </span>|<span class="hljs-string">   21 </span>|<span class="hljs-string"> CS    </span>|<span class="hljs-string"> 否          </span>|<br>|<span class="hljs-string"> 200215122 </span>|<span class="hljs-string"> 刘晨  </span>|<span class="hljs-string"> 女   </span>|<span class="hljs-string">   20 </span>|<span class="hljs-string"> CS    </span>|<span class="hljs-string"> 否          </span>|<br>|<span class="hljs-string"> 200215123 </span>|<span class="hljs-string"> 王敏  </span>|<span class="hljs-string"> 女   </span>|<span class="hljs-string">   19 </span>|<span class="hljs-string"> MA    </span>|<span class="hljs-string"> 否          </span>|<br>|<span class="hljs-string"> 200215125 </span>|<span class="hljs-string"> 张立  </span>|<span class="hljs-string"> 男   </span>|<span class="hljs-string">   20 </span>|<span class="hljs-string"> IS    </span>|<span class="hljs-string"> 否          </span>|<br>|<span class="hljs-string"> 200215126 </span>|<span class="hljs-string"> 张三  </span>|<span class="hljs-string"> NULL </span>|<span class="hljs-string">   19 </span>|<span class="hljs-string"> IS    </span>|<span class="hljs-string"> 否          </span>|<br>|<span class="hljs-string"> 200215128 </span>|<span class="hljs-string"> 李四  </span>|<span class="hljs-string"> NULL </span>|<span class="hljs-string">   21 </span>|<span class="hljs-string"> IS    </span>|<span class="hljs-string"> 否          </span>|<br>+-----------+-------+------+------+-------+-------------+<br>6 rows in set (0.00 sec)<br>（11）删除刚定义的触发器<br>//删除前查询触发器<br>mysql&gt; show triggers from csedb_u201911749\G;<br><span class="hljs-symbol">*</span><span class="hljs-symbol">*</span><span class="hljs-symbol">*</span><span class="hljs-symbol">*</span><span class="hljs-symbol">*</span><span class="hljs-symbol">*</span><span class="hljs-symbol">*</span><span class="hljs-symbol">*</span><span class="hljs-symbol">*</span><span class="hljs-symbol">*</span><span class="hljs-symbol">*</span><span class="hljs-symbol">*</span><span class="hljs-symbol">*</span><span class="hljs-symbol">*</span><span class="hljs-symbol">*</span><span class="hljs-symbol">*</span><span class="hljs-symbol">*</span><span class="hljs-symbol">*</span><span class="hljs-symbol">*</span><span class="hljs-symbol">*</span><span class="hljs-symbol">*</span><span class="hljs-symbol">*</span><span class="hljs-symbol">*</span><span class="hljs-symbol">*</span><span class="hljs-symbol">*</span><span class="hljs-symbol">*</span><span class="hljs-symbol">*</span> 1. row <span class="hljs-symbol">*</span><span class="hljs-symbol">*</span><span class="hljs-symbol">*</span><span class="hljs-symbol">*</span><span class="hljs-symbol">*</span><span class="hljs-symbol">*</span><span class="hljs-symbol">*</span><span class="hljs-symbol">*</span><span class="hljs-symbol">*</span><span class="hljs-symbol">*</span><span class="hljs-symbol">*</span><span class="hljs-symbol">*</span><span class="hljs-symbol">*</span><span class="hljs-symbol">*</span><span class="hljs-symbol">*</span><span class="hljs-symbol">*</span><span class="hljs-symbol">*</span><span class="hljs-symbol">*</span><span class="hljs-symbol">*</span><span class="hljs-symbol">*</span><span class="hljs-symbol">*</span><span class="hljs-symbol">*</span><span class="hljs-symbol">*</span><span class="hljs-symbol">*</span><span class="hljs-symbol">*</span><span class="hljs-symbol">*</span><span class="hljs-symbol">*</span><br>             Trigger: sctr<br>               Event: UPDATE<br>               Table: sc<br>           Statement: begin<br>declare max_grade int;<br>set max_grade = (select max(grade) from sc where sc.sno=new.sno);<br>update student set student.scholarship = &#x27;是&#x27; where student.sno = new.sno and max_grade &gt;=95;<br>update student set student.scholarship = &#x27;否&#x27; where student.sno = new.sno and max_grade <span class="hljs-variable">&lt;95;</span><br><span class="hljs-variable">end</span><br><span class="hljs-variable">              Timing: AFTER</span><br><span class="hljs-variable">             Created: 2021-11-12 21:32:29.26</span><br><span class="hljs-variable">            sql_mode: ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION</span><br><span class="hljs-variable">             Definer: root@localhost</span><br><span class="hljs-variable">character_set_client: gbk</span><br><span class="hljs-variable">collation_connection: gbk_chinese_ci</span><br><span class="hljs-variable">  Database Collation: utf8mb4_0900_ai_ci</span><br><span class="hljs-variable">1 row in set (0.00 sec)</span><br><span class="hljs-variable"></span><br><span class="hljs-variable">ERROR:</span><br><span class="hljs-variable">No query specified</span><br><span class="hljs-variable">//删除触发器</span><br><span class="hljs-variable">mysql&gt;</span> drop trigger sctr;<br>Query OK, 0 rows affected (0.02 sec)<br>//重新查询，触发器已被删除<br>mysql&gt; show triggers from csedb_u201911749\G;<br>Empty set (0.00 sec)<br><br>ERROR:<br>No query specified<br>/<span class="hljs-symbol">*</span><br><span class="hljs-symbol">*</span>注意一下12-13这两个个，不知道为啥我第一次创建了一个临时表去保存过程和函数的查询数据，其实不<span class="hljs-symbol">*</span>用创建这个表<br><span class="hljs-symbol">*</span>不必将select的结果insert到临时表，再去查临时表，直接在存储过程里去select即可，调用之后会<span class="hljs-symbol">*</span>显示select的数据<br><span class="hljs-symbol">*</span>但是对于函数调用，函数调用是无法返回一个表的，因此借助临时表还是有必要的<br><span class="hljs-symbol">*</span>/<br>（12）定义一个存储过程计算 CS 系的课程的平均成绩和最高成绩，在查询分析器或查询编<br>辑器中执行存储过程，查看结果。<br>mysql&gt; select <span class="hljs-symbol">*</span> from student;<br>+-----------+-------+------+------+-------+-------------+<br>|<span class="hljs-string"> Sno       </span>|<span class="hljs-string"> Sname </span>|<span class="hljs-string"> Ssex </span>|<span class="hljs-string"> Sage </span>|<span class="hljs-string"> Sdept </span>|<span class="hljs-string"> Scholarship </span>|<br>+-----------+-------+------+------+-------+-------------+<br>|<span class="hljs-string"> 200215121 </span>|<span class="hljs-string"> 李勇  </span>|<span class="hljs-string"> 男   </span>|<span class="hljs-string">   21 </span>|<span class="hljs-string"> CS    </span>|<span class="hljs-string"> 否          </span>|<br>|<span class="hljs-string"> 200215122 </span>|<span class="hljs-string"> 刘晨  </span>|<span class="hljs-string"> 女   </span>|<span class="hljs-string">   20 </span>|<span class="hljs-string"> CS    </span>|<span class="hljs-string"> 否          </span>|<br>|<span class="hljs-string"> 200215123 </span>|<span class="hljs-string"> 王敏  </span>|<span class="hljs-string"> 女   </span>|<span class="hljs-string">   19 </span>|<span class="hljs-string"> MA    </span>|<span class="hljs-string"> 否          </span>|<br>|<span class="hljs-string"> 200215125 </span>|<span class="hljs-string"> 张立  </span>|<span class="hljs-string"> 男   </span>|<span class="hljs-string">   20 </span>|<span class="hljs-string"> IS    </span>|<span class="hljs-string"> 否          </span>|<br>|<span class="hljs-string"> 200215126 </span>|<span class="hljs-string"> 张三  </span>|<span class="hljs-string"> NULL </span>|<span class="hljs-string">   19 </span>|<span class="hljs-string"> IS    </span>|<span class="hljs-string"> 否          </span>|<br>|<span class="hljs-string"> 200215128 </span>|<span class="hljs-string"> 李四  </span>|<span class="hljs-string"> NULL </span>|<span class="hljs-string">   21 </span>|<span class="hljs-string"> IS    </span>|<span class="hljs-string"> 否          </span>|<br>+-----------+-------+------+------+-------+-------------+<br>6 rows in set (0.00 sec)<br>mysql&gt; select <span class="hljs-symbol">*</span> from sc;<br>+-----------+-----+-------+<br>|<span class="hljs-string"> Sno       </span>|<span class="hljs-string"> Cno </span>|<span class="hljs-string"> Grade </span>|<br>+-----------+-----+-------+<br>|<span class="hljs-string"> 200215121 </span>|<span class="hljs-string"> 1   </span>|<span class="hljs-string">    88 </span>|<br>|<span class="hljs-string"> 200215121 </span>|<span class="hljs-string"> 2   </span>|<span class="hljs-string">    85 </span>|<br>|<span class="hljs-string"> 200215121 </span>|<span class="hljs-string"> 3   </span>|<span class="hljs-string">    88 </span>|<br>|<span class="hljs-string"> 200215122 </span>|<span class="hljs-string"> 1   </span>|<span class="hljs-string">    75 </span>|<br>|<span class="hljs-string"> 200215122 </span>|<span class="hljs-string"> 2   </span>|<span class="hljs-string">    90 </span>|<br>|<span class="hljs-string"> 200215122 </span>|<span class="hljs-string"> 3   </span>|<span class="hljs-string">    80 </span>|<br>|<span class="hljs-string"> 200215125 </span>|<span class="hljs-string"> 3   </span>|<span class="hljs-string">    79 </span>|<br>|<span class="hljs-string"> 200215126 </span>|<span class="hljs-string"> 3   </span>|<span class="hljs-string">    90 </span>|<br>|<span class="hljs-string"> 200215128 </span>|<span class="hljs-string"> 1   </span>|<span class="hljs-string">    88 </span>|<br>+-----------+-----+-------+<br>9 rows in set (0.00 sec)<br>mysql&gt; delimiter $ //创建存储过程<br>mysql&gt; create procedure cs_grade(<br>    -&gt; out avg_grade int,<br>    -&gt; out max_grade int)<br>    -&gt; begin<br>    -&gt; select avg(grade)<br>    -&gt; into avg_grade<br>    -&gt; from student,sc<br>    -&gt; where student.sdept = &#x27;cs&#x27; and student.sno = sc.sno;<br>    -&gt; select max(grade)<br>    -&gt; into max_grade<br>    -&gt; from student,sc<br>    -&gt; where student.sdept = &#x27;cs&#x27; and student.sno = sc.sno;<br>    -&gt; end $<br>Query OK, 0 rows affected (0.01 sec)<br>mysql&gt; delimiter ; //重新定义终结符为&#x27;;&#x27;<br>mysql&gt; call cs_grade(<span class="hljs-meta">@avg_grade,</span><span class="hljs-meta">@max_grade);//调用存储过程</span><br>Query OK, 1 row affected (0.00 sec)<br><br>mysql&gt; select <span class="hljs-meta">@avg_grade,</span><span class="hljs-meta">@max_grade;</span><br>+------------+------------+<br>|<span class="hljs-string"> @avg_grade </span>|<span class="hljs-string"> @max_grade </span>|<br>+------------+------------+<br>|<span class="hljs-string">         84 </span>|<span class="hljs-string">         90 </span>|<br>+------------+------------+<br>1 row in set (0.00 sec)<br><br>（13）定义一个带学号为参数的查看某个学号的所有课程的成绩，查询结果要包含学生姓<br>名。进行验证。<br>//先创建临时表保存数据<br>mysql&gt; create temporary table stu_info(<br>    -&gt; sno  char(9) null,<br>    -&gt; sname char(20) null,<br>    -&gt; cno char(5) null,<br>    -&gt; cname char(20)null,<br>    -&gt; grade int);<br>Query OK, 0 rows affected (0.00 sec)<br>mysql&gt; delimiter $  //改变终结符<br>//建立存储过程，传入sid char(9) ,insert into table select.....把select的结果插入table<br>mysql&gt; create procedure stu_grade(<br>    -&gt; in sid char(9))<br>    -&gt; begin<br>    -&gt; insert into stu_info<br>    -&gt; select sc.sno,sname,sc.cno,cname,grade from student,course,sc where sid = sc.sno and sc.sno = student.sno and sc.cno =course.cno;<br>    -&gt; end$<br>Query OK, 0 rows affected (0.01 sec)<br><br>mysql&gt; delimiter ;  //未调用存储过程前，临时表为空<br>mysql&gt; select <span class="hljs-symbol">*</span> from stu_info;<br>Empty set (0.00 sec)<br>//调用存储过程<br>mysql&gt; call stu_grade(&#x27;200215121&#x27;);<br>Query OK, 3 rows affected (0.01 sec)<br>//查看临时表结果<br>mysql&gt; select <span class="hljs-symbol">*</span> from stu_info;<br>+-----------+-------+------+----------+-------+<br>|<span class="hljs-string"> sno       </span>|<span class="hljs-string"> sname </span>|<span class="hljs-string"> cno  </span>|<span class="hljs-string"> cname    </span>|<span class="hljs-string"> grade </span>|<br>+-----------+-------+------+----------+-------+<br>|<span class="hljs-string"> 200215121 </span>|<span class="hljs-string"> 李勇  </span>|<span class="hljs-string"> 1    </span>|<span class="hljs-string"> 数据库   </span>|<span class="hljs-string">    88 </span>|<br>|<span class="hljs-string"> 200215121 </span>|<span class="hljs-string"> 李勇  </span>|<span class="hljs-string"> 2    </span>|<span class="hljs-string"> 数学     </span>|<span class="hljs-string">    85 </span>|<br>|<span class="hljs-string"> 200215121 </span>|<span class="hljs-string"> 李勇  </span>|<span class="hljs-string"> 3    </span>|<span class="hljs-string"> 信息系统 </span>|<span class="hljs-string">    88 </span>|<br>+-----------+-------+------+----------+-------+<br>3 rows in set (0.00 sec)<br>（14）把上一题改成函数。再进行验证。<br>//先把创建函数的功能打开，检查下面的变量是不是on<br>mysql&gt; show variables like &#x27;%func%&#x27;;<br>+---------------------------------+-------+<br>|<span class="hljs-string"> Variable_name                   </span>|<span class="hljs-string"> Value </span>|<br>+---------------------------------+-------+<br>|<span class="hljs-string"> log_bin_trust_function_creators </span>|<span class="hljs-string"> OFF   </span>|<br>+---------------------------------+-------+<br>1 row in set, 1 warning (0.01 sec)<br><br>mysql&gt; set global log_bin_trust_function_creators =1;<br>Query OK, 0 rows affected (0.00 sec)<br><br>mysql&gt; show variables like &#x27;%func%&#x27;;<br>+---------------------------------+-------+<br>|<span class="hljs-string"> Variable_name                   </span>|<span class="hljs-string"> Value </span>|<br>+---------------------------------+-------+<br>|<span class="hljs-string"> log_bin_trust_function_creators </span>|<span class="hljs-string"> ON    </span>|<br>+---------------------------------+-------+<br>1 row in set, 1 warning (0.00 sec)<br>//创建函数，传入sid<br>mysql&gt; delimiter $<br>mysql&gt; create function stu_grade2(sid char(9))<br>    -&gt; returns tinyint<br>    -&gt; begin<br>    -&gt; insert into stu_info<br>    -&gt; select sc.sno,sname,sc.cno,cname,grade from student,course,sc where sid = sc.sno and sc.sno = student.sno and sc.cno =course.cno;<br>    -&gt; return 1;<br>    -&gt; end$<br>Query OK, 0 rows affected (0.01 sec)<br><br>mysql&gt; delimiter ;<br>mysql&gt; select <span class="hljs-symbol">*</span> from stu_info; //未调用函数前的临时表<br>+-----------+-------+------+----------+-------+<br>|<span class="hljs-string"> sno       </span>|<span class="hljs-string"> sname </span>|<span class="hljs-string"> cno  </span>|<span class="hljs-string"> cname    </span>|<span class="hljs-string"> grade </span>|<br>+-----------+-------+------+----------+-------+<br>|<span class="hljs-string"> 200215121 </span>|<span class="hljs-string"> 李勇  </span>|<span class="hljs-string"> 1    </span>|<span class="hljs-string"> 数据库   </span>|<span class="hljs-string">    88 </span>|<br>|<span class="hljs-string"> 200215121 </span>|<span class="hljs-string"> 李勇  </span>|<span class="hljs-string"> 2    </span>|<span class="hljs-string"> 数学     </span>|<span class="hljs-string">    85 </span>|<br>|<span class="hljs-string"> 200215121 </span>|<span class="hljs-string"> 李勇  </span>|<span class="hljs-string"> 3    </span>|<span class="hljs-string"> 信息系统 </span>|<span class="hljs-string">    88 </span>|<br>+-----------+-------+------+----------+-------+<br>3 rows in set (0.00 sec)<br>//执行函数，显示的1时返回值1<br>mysql&gt; select stu_grade2(&#x27;200215122&#x27;);<br>+-------------------------+<br>|<span class="hljs-string"> stu_grade2(&#x27;200215122&#x27;) </span>|<br>+-------------------------+<br>|<span class="hljs-string">                       1 </span>|<br>+-------------------------+<br>1 row in set (0.01 sec)<br>//再次查看临时表<br>mysql&gt; select <span class="hljs-symbol">*</span> from stu_info;<br>+-----------+-------+------+----------+-------+<br>|<span class="hljs-string"> sno       </span>|<span class="hljs-string"> sname </span>|<span class="hljs-string"> cno  </span>|<span class="hljs-string"> cname    </span>|<span class="hljs-string"> grade </span>|<br>+-----------+-------+------+----------+-------+<br>|<span class="hljs-string"> 200215121 </span>|<span class="hljs-string"> 李勇  </span>|<span class="hljs-string"> 1    </span>|<span class="hljs-string"> 数据库   </span>|<span class="hljs-string">    88 </span>|<br>|<span class="hljs-string"> 200215121 </span>|<span class="hljs-string"> 李勇  </span>|<span class="hljs-string"> 2    </span>|<span class="hljs-string"> 数学     </span>|<span class="hljs-string">    85 </span>|<br>|<span class="hljs-string"> 200215121 </span>|<span class="hljs-string"> 李勇  </span>|<span class="hljs-string"> 3    </span>|<span class="hljs-string"> 信息系统 </span>|<span class="hljs-string">    88 </span>|<br>|<span class="hljs-string"> 200215122 </span>|<span class="hljs-string"> 刘晨  </span>|<span class="hljs-string"> 1    </span>|<span class="hljs-string"> 数据库   </span>|<span class="hljs-string">    75 </span>|<br>|<span class="hljs-string"> 200215122 </span>|<span class="hljs-string"> 刘晨  </span>|<span class="hljs-string"> 2    </span>|<span class="hljs-string"> 数学     </span>|<span class="hljs-string">    90 </span>|<br>|<span class="hljs-string"> 200215122 </span>|<span class="hljs-string"> 刘晨  </span>|<span class="hljs-string"> 3    </span>|<span class="hljs-string"> 信息系统 </span>|<span class="hljs-string">    80 </span>|<br>+-----------+-------+------+----------+-------+<br>6 rows in set (0.00 sec)<br>（15）在 SC 表上定义一个完整性约束，要求成绩再 0-100 之间。定义约束前，先把某个学<br>生的成绩修改成 120，进行查询，再修改回来。定义约束后，再把该学生成绩修改为 120，<br>然后进行查询<br><br>mysql&gt; update sc set grade = 120<br>    -&gt; where sno = &#x27;200215121&#x27; and cno =&#x27;1&#x27;;<br>Query OK, 1 row affected (0.01 sec)<br>Rows matched: 1  Changed: 1  Warnings: 0<br><br>mysql&gt; select <span class="hljs-symbol">*</span> from sc;<br>+-----------+-----+-------+<br>|<span class="hljs-string"> Sno       </span>|<span class="hljs-string"> Cno </span>|<span class="hljs-string"> Grade </span>|<br>+-----------+-----+-------+<br>|<span class="hljs-string"> 200215121 </span>|<span class="hljs-string"> 1   </span>|<span class="hljs-string">   120 </span>|<br>|<span class="hljs-string"> 200215121 </span>|<span class="hljs-string"> 2   </span>|<span class="hljs-string">    85 </span>|<br>|<span class="hljs-string"> 200215121 </span>|<span class="hljs-string"> 3   </span>|<span class="hljs-string">    88 </span>|<br>|<span class="hljs-string"> 200215122 </span>|<span class="hljs-string"> 1   </span>|<span class="hljs-string">    75 </span>|<br>|<span class="hljs-string"> 200215122 </span>|<span class="hljs-string"> 2   </span>|<span class="hljs-string">    90 </span>|<br>|<span class="hljs-string"> 200215122 </span>|<span class="hljs-string"> 3   </span>|<span class="hljs-string">    80 </span>|<br>|<span class="hljs-string"> 200215125 </span>|<span class="hljs-string"> 3   </span>|<span class="hljs-string">    79 </span>|<br>|<span class="hljs-string"> 200215126 </span>|<span class="hljs-string"> 3   </span>|<span class="hljs-string">    90 </span>|<br>|<span class="hljs-string"> 200215128 </span>|<span class="hljs-string"> 1   </span>|<span class="hljs-string">    88 </span>|<br>+-----------+-----+-------+<br>9 rows in set (0.00 sec)<br><br>mysql&gt; update sc set grade = 88<br>    -&gt; where sno = &#x27;200215121&#x27; and cno =&#x27;1&#x27;;<br>Query OK, 1 row affected (0.01 sec)<br>Rows matched: 1  Changed: 1  Warnings: 0<br><br>mysql&gt; select <span class="hljs-symbol">*</span> from sc;<br>+-----------+-----+-------+<br>|<span class="hljs-string"> Sno       </span>|<span class="hljs-string"> Cno </span>|<span class="hljs-string"> Grade </span>|<br>+-----------+-----+-------+<br>|<span class="hljs-string"> 200215121 </span>|<span class="hljs-string"> 1   </span>|<span class="hljs-string">    88 </span>|<br>|<span class="hljs-string"> 200215121 </span>|<span class="hljs-string"> 2   </span>|<span class="hljs-string">    85 </span>|<br>|<span class="hljs-string"> 200215121 </span>|<span class="hljs-string"> 3   </span>|<span class="hljs-string">    88 </span>|<br>|<span class="hljs-string"> 200215122 </span>|<span class="hljs-string"> 1   </span>|<span class="hljs-string">    75 </span>|<br>|<span class="hljs-string"> 200215122 </span>|<span class="hljs-string"> 2   </span>|<span class="hljs-string">    90 </span>|<br>|<span class="hljs-string"> 200215122 </span>|<span class="hljs-string"> 3   </span>|<span class="hljs-string">    80 </span>|<br>|<span class="hljs-string"> 200215125 </span>|<span class="hljs-string"> 3   </span>|<span class="hljs-string">    79 </span>|<br>|<span class="hljs-string"> 200215126 </span>|<span class="hljs-string"> 3   </span>|<span class="hljs-string">    90 </span>|<br>|<span class="hljs-string"> 200215128 </span>|<span class="hljs-string"> 1   </span>|<span class="hljs-string">    88 </span>|<br>+-----------+-----+-------+<br>9 rows in set (0.00 sec)<br>//设置用户自定义约束<br>mysql&gt; alter table sc add constraint check_grade check(grade &gt;=0 and grade <span class="hljs-variable">&lt;=100);</span><br><span class="hljs-variable">Query OK, 9 rows affected (0.09 sec)</span><br><span class="hljs-variable">Records: 9  Duplicates: 0  Warnings: 0</span><br><span class="hljs-variable">//更新失败，提示检查约束不通过</span><br><span class="hljs-variable">mysql&gt;</span> update sc set grade = 120<br>    -&gt; where sno = &#x27;200215121&#x27; and cno =&#x27;1&#x27;;<br>ERROR 3819 (HY000): Check constraint &#x27;check_grade&#x27; is violated.<br></code></pre></div></td></tr></table></figure><h2 id="实验四-数据库设计"><a href="#实验四-数据库设计" class="headerlink" title="实验四.数据库设计"></a>实验四.数据库设计</h2><p><img src="/2021/11/20/HUST%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AE%9E%E9%AA%8C/MyBlog\source_posts\HUST数据库实验\实验四要求.png" srcset="/img/loading.gif" lazyload alt="实验四要求"></p><p>与其说是数据库设计，不如说使用高级语言来操作数据库，编写一个信息管理系统的应用。</p><p>我使用Maven导入Mybatis，利用Mybatis框架来操作数据库，相比JDBC来说相对简单，不必去进行数据库连接等操作，通过配置mybatis-config.xml来保证与数据库的连接，通过配置Mapper.xml来添加开发过程中使用到的sql语句，实现数据操作，剩下的就是在高级语言层面的用户交互与数据处理工作了。</p><p>经典增删改查🤣😂</p><p><a href="https://github.com/ziyikee/HUSTDB">HUST数据库实验-基于Mybatis的学生信息管理系统 </a></p><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><p><a href="https://www.runoob.com/mysql/mysql-tutorial.html">MySQL 教程 | 菜鸟教程 (runoob.com)</a></p><p><a href="https://www.cnblogs.com/qlqwjy/p/7842647.html">【触发器】MySQL触发器使用详解 - QiaoZhi - 博客园 (cnblogs.com)</a></p><p><a href="https://www.jianshu.com/p/7b2d74701ccd">mysql存储过程详细教程 - 简书 (jianshu.com)</a></p><p><a href="https://www.yiibai.com/mysql/getting-started-with-mysql-stored-procedures.html">MySQL存储过程入门 - MySQL教程™ (yiibai.com)</a></p><p><a href="https://www.runoob.com/sql/sql-insert-into-select.html">SQL INSERT INTO SELECT 语句 | 菜鸟教程 (runoob.com)</a></p><p><a href="https://www.php.cn/mysql-tutorials-460561.html#:~:text=mysql">mysql里怎样创建函数-mysql教程-PHP中文网</a></p><p><a href="https://blog.csdn.net/liyazhen2011/article/details/82870406"> MySql创建自定义函数（Function）_万里归来少年心-CSDN博客_mysql 自定义函数</a></p><p><a href="https://mybatis.org/mybatis-3/zh/getting-started.html">mybatis – MyBatis 3 | 入门</a></p><p><a href="http://c.biancheng.net/mybatis/">Mybatis框架入门教程 (biancheng.net)</a></p>]]></content>
    
    
    <categories>
      
      <category>HUST</category>
      
    </categories>
    
    
    <tags>
      
      <tag>HUST</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>六.Jedis操作Redis</title>
    <link href="/2021/11/17/%E5%85%AD-Jedis%E6%93%8D%E4%BD%9CRedis/"/>
    <url>/2021/11/17/%E5%85%AD-Jedis%E6%93%8D%E4%BD%9CRedis/</url>
    
    <content type="html"><![CDATA[<h1 id="Jedis操作Redis"><a href="#Jedis操作Redis" class="headerlink" title="Jedis操作Redis"></a>Jedis操作Redis</h1><p>Jedis是Redis官方推荐的java连接开发工具，使用java操作Redis中间件。</p><div class="note note-success">            <p>慢慢来才是最快的.</p>          </div><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">#连接redis服务<br><span class="hljs-keyword">import</span> redis.clients.jedis.Jedis;<br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">RedisJava</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-comment">//连接本地的 Redis 服务</span><br>        Jedis jedis = <span class="hljs-keyword">new</span> Jedis(<span class="hljs-string">&quot;localhost&quot;</span>);  <span class="hljs-comment">//可设置ip与port</span><br>        <span class="hljs-comment">// 如果 Redis 服务设置了密码，需要下面这行，没有就不需要</span><br>        <span class="hljs-comment">// jedis.auth(&quot;123456&quot;); </span><br>        System.out.println(<span class="hljs-string">&quot;连接成功&quot;</span>);<br>        <span class="hljs-comment">//查看服务是否运行</span><br>        System.out.println(<span class="hljs-string">&quot;服务正在运行: &quot;</span>+jedis.ping());<br>    &#125;<br>&#125;<br>输出：<br>连接成功<br>服务正在运行: PONG<br><br>#建立连接，并设置string类的key，语法与redis客户端的命令完全一致<br><span class="hljs-keyword">import</span> redis.clients.jedis.Jedis;<br> <br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">RedisStringJava</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-comment">//连接本地的 Redis 服务</span><br>        Jedis jedis = <span class="hljs-keyword">new</span> Jedis(<span class="hljs-string">&quot;localhost&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;连接成功&quot;</span>);<br>        <span class="hljs-comment">//设置 redis 字符串数据</span><br>        jedis.set(<span class="hljs-string">&quot;runoobkey&quot;</span>, <span class="hljs-string">&quot;www.runoob.com&quot;</span>);<br>        <span class="hljs-comment">// 获取存储的数据并输出</span><br>        System.out.println(<span class="hljs-string">&quot;redis 存储的字符串为: &quot;</span>+ jedis.get(<span class="hljs-string">&quot;runoobkey&quot;</span>));<br>    &#125;<br>&#125;<br>输出：<br>连接成功<br>redis 存储的字符串为: www.runoob.com<br><br>#使用list类实例<br><span class="hljs-keyword">import</span> java.util.List;<br><span class="hljs-keyword">import</span> redis.clients.jedis.Jedis;<br> <br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">RedisListJava</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-comment">//连接本地的 Redis 服务</span><br>        Jedis jedis = <span class="hljs-keyword">new</span> Jedis(<span class="hljs-string">&quot;localhost&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;连接成功&quot;</span>);<br>        <span class="hljs-comment">//存储数据到列表中</span><br>        jedis.lpush(<span class="hljs-string">&quot;site-list&quot;</span>, <span class="hljs-string">&quot;Runoob&quot;</span>);<br>        jedis.lpush(<span class="hljs-string">&quot;site-list&quot;</span>, <span class="hljs-string">&quot;Google&quot;</span>);<br>        jedis.lpush(<span class="hljs-string">&quot;site-list&quot;</span>, <span class="hljs-string">&quot;Taobao&quot;</span>);<br>        <span class="hljs-comment">// 获取存储的数据并输出</span><br>        List&lt;String&gt; list = jedis.lrange(<span class="hljs-string">&quot;site-list&quot;</span>, <span class="hljs-number">0</span> ,<span class="hljs-number">2</span>);<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>; i&lt;list.size(); i++) &#123;<br>            System.out.println(<span class="hljs-string">&quot;列表项为: &quot;</span>+list.get(i));<br>        &#125;<br>    &#125;<br>&#125;<br>输出：<br>连接成功<br>列表项为: Taobao<br>列表项为: Google<br>列表项为: Runoob<br></code></pre></div></td></tr></table></figure><p><img src="/2021/11/17/%E5%85%AD-Jedis%E6%93%8D%E4%BD%9CRedis/%E6%8E%92%E5%BA%8F%E6%93%8D%E4%BD%9C.png" srcset="/img/loading.gif" lazyload alt="排序操作"></p><p>本机实验还没进行，不会配环境，没有装Maven😫</p><p>参考链接：</p><p><a href="https://www.jianshu.com/p/a1038eed6d44">Jedis使用教程完整版 - 简书 (jianshu.com)</a></p><p><a href="https://cloud.tencent.com/developer/article/1776110">Jedis基础详解 - 云+社区 - 腾讯云 (tencent.com)</a></p>]]></content>
    
    
    <categories>
      
      <category>Redis</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Redis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>五.Redis事务与乐观锁</title>
    <link href="/2021/11/16/%E4%BA%94-Redis%E4%BA%8B%E5%8A%A1/"/>
    <url>/2021/11/16/%E4%BA%94-Redis%E4%BA%8B%E5%8A%A1/</url>
    
    <content type="html"><![CDATA[<h1 id="Redis事务"><a href="#Redis事务" class="headerlink" title="Redis事务"></a>Redis事务</h1><p>Redis事务本质：一组命令集合。一个事务中的所有命令都会被序列化，在事务执行过程中，会按照顺序执行。</p><figure class="highlight jboss-cli"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs jboss-cli">|<span class="hljs-params">------</span>队列 <span class="hljs-keyword">set</span> <span class="hljs-keyword">set</span> <span class="hljs-keyword">set</span>.<span class="hljs-string">...</span>队列<span class="hljs-params">-------</span>|<br></code></pre></div></td></tr></table></figure><p>Redis事务：</p><ul><li>开启事务（multi）</li><li>命令入队列（一系列命令）</li><li>执行事务（exec）</li></ul><p>所有的命令在事务中，并没有直接执行，而是只会在执行命令发起的时候才会执行。</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment">#正常执行命令</span><br>127.0.0.1:6379&gt; multi  //开启事务<br>OK   <br>127.0.0.1:6379(TX)&gt; <span class="hljs-built_in">set</span> k1 v1<br>QUEUED  //添加命令，命令入队<br>127.0.0.1:6379(TX)&gt; <span class="hljs-built_in">set</span> k2 v1<br>QUEUED<br>127.0.0.1:6379(TX)&gt; get k1<br>QUEUED<br>127.0.0.1:6379(TX)&gt; get k2<br>QUEUED<br>127.0.0.1:6379(TX)&gt; <span class="hljs-built_in">exec</span>   //事务执行，依次按顺序执行命令<br>1) OK   //依次的执行结果<br>2) OK<br>3) <span class="hljs-string">&quot;v1&quot;</span><br>4) <span class="hljs-string">&quot;v1&quot;</span><br><span class="hljs-comment">#取消一个事务  discard命令  执行此命令后，事务将被放弃，队列将被清空，且将会从事务状态中退出</span><br>127.0.0.1:6379(TX)&gt; <span class="hljs-built_in">set</span> k1 1<br>QUEUED<br>127.0.0.1:6379(TX)&gt; <span class="hljs-built_in">set</span> k2 2<br>QUEUED<br>127.0.0.1:6379(TX)&gt; <span class="hljs-built_in">set</span> k4 4<br>QUEUED<br>127.0.0.1:6379(TX)&gt; discard  //事务取消之后，事务中所有的命令都不会被执行<br>OK<br>127.0.0.1:6379&gt; get k4   <br>(nil)   //因为事务被取消，k4并没有<span class="hljs-built_in">set</span>，因此k4为nul<br>127.0.0.1:6379&gt;<br></code></pre></div></td></tr></table></figure><p>Redis中的两种错误：（同java基本一致）</p><ul><li>编译型异常（代码有问题，命令语法错误）：事务中的所有命令都不会被执行！（入队失败）</li><li>运行时异常（分母为0，数组越界等）：如果事务队列中的某一条命令存在运行时异常，那么在执行事务时，其他命令是可以正常执行的，错误的命令会抛出异常。</li></ul><figure class="highlight accesslog"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs accesslog">#编译型异常<br><span class="hljs-number">127.0.0.1:6379</span>&gt; multi<br>OK<br><span class="hljs-number">127.0.0.1:6379</span>(TX)&gt; set v1 <span class="hljs-number">1</span><br>QUEUED<br><span class="hljs-number">127.0.0.1:6379</span>(TX)&gt; setset v1 <span class="hljs-number">2</span><br>(error) ERR unknown command `setset`, with args beginning with: `v1`, `<span class="hljs-number">2</span>`,<br><span class="hljs-number">127.0.0.1:6379</span>(TX)&gt; set v2 <span class="hljs-number">2</span><br>QUEUED<br><span class="hljs-number">127.0.0.1:6379</span>(TX)&gt; exec  //由于存在语法错误，队列中的所有命令都不会执行<br>(error) EXECABORT Transaction discarded because of previous errors. <br><br>#运行时异常<br><span class="hljs-number">127.0.0.1:6379</span>(TX)&gt; set v1 <span class="hljs-string">&quot;ab&quot;</span><br>QUEUED<br><span class="hljs-number">127.0.0.1:6379</span>(TX)&gt; incr v1  //对字符串+<span class="hljs-number">1</span>属于运行时异常<br>QUEUED<br><span class="hljs-number">127.0.0.1:6379</span>(TX)&gt; set k2 <span class="hljs-number">22</span><br>QUEUED<br><span class="hljs-number">127.0.0.1:6379</span>(TX)&gt; get k2<br>QUEUED<br><span class="hljs-number">127.0.0.1:6379</span>(TX)&gt; exec<br><span class="hljs-number">1</span>) OK<br><span class="hljs-number">2</span>) (error) ERR value is not an integer or out of range  //执行时报错<br><span class="hljs-number">3</span>) OK<br><span class="hljs-number">4</span>) <span class="hljs-string">&quot;22&quot;</span>  //其他命令无异常，正常执行<br><span class="hljs-number">127.0.0.1:6379</span>&gt;<br><br></code></pre></div></td></tr></table></figure><p>Redis事务并没有隔离级别的概念</p><p>重点：Redis中单条命令是原子性的，但事务并不保证原子性（acid没有全部实现，与关系型数据库不同），一旦事务中（命令队列中）有一条命令执行失败（运行时异常），并不影响整个事务的执行，而mysql的事务具有原子性，在一个事务中，多条命令，一旦有一条执行失败，其他的也无法成功执行。</p><p>一次性，顺序性，排他性地执行一系列命令</p><ul><li>exec命令执行之前，多个命令被放入队列缓存中</li><li>exec命令执行后，缓存队列中的命令顺序执行，一旦有一个错误（运行时异常），不影响其他命令的执行</li><li>在<strong>事务执行过程</strong>中，其他客户端提交的命令请求不会插入到当前的缓存命令队列中，这里只是保证在<strong>执行过程中</strong>，在<strong>将命令添加进入队列</strong>的过程中，<strong>是不会保证不被其他客户端命令插入的</strong></li><li>不支持回滚，没有实现发生错误直接回滚的功能，redis的事务更像一个命令打包的功能</li></ul><p>为什么不支持回滚？官方回答：</p><figure class="highlight"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs">只有当被调用的Redis命令有语法错误时，这条命令才会执行失败（在将这个命令放入事务队列期间，Redis能够发现此类问题），或者对某个键执行不符合其数据类型的操作：实际上，这就意味着只有程序错误才会导致Redis命令执行失败，这种错误很有可能在程序开发期间发现，一般很少在生产环境发现。Redis已经在系统内部进行功能简化，这样可以确保更快的运行速度，因为Redis不需要事务回滚的能力。<br></code></pre></div></td></tr></table></figure><h1 id="Redis实现乐观锁"><a href="#Redis实现乐观锁" class="headerlink" title="Redis实现乐观锁"></a>Redis实现乐观锁</h1><ul><li>悲观锁：见名知意，很悲观，担心数据会被修改，对读写操作都上锁，自己用完数据后，就会进行解锁。那么其它线程进行操作时必须等待，效率相对较低。传统的关系型数据库里边就用到了很多这种锁机制，比如行锁、表锁、读锁、写锁等。都是在操作之前先上锁让别人无法操作该数据。</li><li>乐观锁：顾名思义，很乐观，每次取数据的时候并不担心自己的数据会被修改。数据库实现乐观锁，通常使用的是version（数据版本），来表示数据的。每次取数据的时候，连同数据版本version一起取出。当读取出数据，对数据进行更改时，会将数版本version 加一，然后提交到数据库，此时比较数据版本version，如果提交的数据版本version大于当前数据库对应记录的数据版本version，那么提交成功。否则小于等于都会提交失败。需要重新从数据库取数据。</li><li>乐观锁适用场景：<strong>频繁读取数据的场景</strong>，因为读取数据并不会上锁。但是当有大量数据写入的时候，会频繁的提交不成功，会重新读取数据，再提交。</li><li>悲观锁适用场景：<strong>频繁写入数据的场景</strong>，因为不管是读还是写 都会上锁，如果大量写入数据，为了数据安全上锁是有必要的，相反乐观锁就会大量的读取提交操作。但是当有大量数据读出的时候，效率低下。</li></ul><p>Redis实现乐观锁：</p><p><img src="/2021/11/16/%E4%BA%94-Redis%E4%BA%8B%E5%8A%A1/1.png" srcset="/img/loading.gif" lazyload alt="1"></p><p>​        Redis通过使用watch命令来实现乐观锁，watch命令用于监视一个或多个key，如果在事务执行之前，这个（或这些）key被其他命令所改动，那么这个事务将被打断。</p><p>​        大多数是基于数据版本（version）的记录机制实现的。即为数据增加一个版本标识，在基于数据库表的版本解决方案中，一般是通过为数据库表增加一个”version”字段来实现读取出数据时，将此版本号一同读出，之后更新时，对此版本号加1。此时，将提交数据的版本号与数据库表对应记录的当前版本号进行比对，如果提交的数据版本号大于数据库当前版本号，则予以更新，否则认为是过期数据。</p><p>​        <strong>“ Redis使用WATCH命令实现事务的“检查再设置”（CAS）行为。作为WATCH命令的参数的键会受到Redis的监控，Redis能够检测到它们的变化。在执行EXEC命令之前，如果Redis检测到至少有一个键被修改了，那么整个事务便会中止运行，然后EXEC命令会返回一个Null值，提醒用户事务运行失败。”</strong></p><p>​        如果在添加watch之后，事务正常exec完成，会自动释放锁（监视），其他的情况，需要手动执行unwatch命令释放监视。</p><p>​        watch的key是对整个连接有效的，事务也一样（但事务被执行后就不存在了），如果连接断开，监视和事务都会被自动清除，discard和unwatch命令也会清除连接中的所有监视。</p><p>​        操作实例：</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment">#正常情况下，设置监视</span><br>127.0.0.1:6379&gt; <span class="hljs-built_in">set</span> money 100<br>OK<br>127.0.0.1:6379&gt; <span class="hljs-built_in">set</span> out 0<br>OK<br><span class="hljs-comment">#监视money对象</span><br>127.0.0.1:6379&gt; watch money <br>OK<br><span class="hljs-comment">#事务正常结束，数据期间没有改动，这时正常执行成功</span><br>127.0.0.1:6379&gt; multi<br>OK<br>127.0.0.1:6379&gt; decrby money 20<br>QUEUED<br>127.0.0.1:6379&gt; incrby out 20<br>QUEUED<br>127.0.0.1:6379&gt; <span class="hljs-built_in">exec</span><br>1) (<span class="hljs-built_in">integer</span>) 80<br>2) (<span class="hljs-built_in">integer</span>) 20<br><br><span class="hljs-comment">#多个客户端的场景下</span><br>127.0.0.1:6379&gt; watch money<br>OK<br>127.0.0.1:6379&gt; multi<br>OK<br>127.0.0.1:6379&gt; decrby money 10<br>QUEUED<br>127.0.0.1:6379&gt; incrby out 10<br>QUEUED<br><span class="hljs-comment">#执行之前，开启另一个线程去修改money的值，这个时候就会导致事务执行失败。</span><br>127.0.0.1:6379&gt; <span class="hljs-built_in">exec</span><br>(nil)<br><br><span class="hljs-comment">#出现上述错误后，需要手动解锁，并重新获取锁</span><br><span class="hljs-comment">#如果发现事务执行失败就先解锁</span><br>127.0.0.1:6379&gt; unwatch <br>OK<br><span class="hljs-comment">#获取最新的值再次监控，类似select version</span><br>127.0.0.1:6379&gt; watch money <br>OK<br>127.0.0.1:6379&gt; multi<br>OK<br>127.0.0.1:6379&gt; decrby money 10<br>QUEUED<br>127.0.0.1:6379&gt; incrby out 1000<br>QUEUED<br><span class="hljs-comment">#执行之前会先比较version ，一样就会执行成功，反正失败</span><br>127.0.0.1:6379&gt; <span class="hljs-built_in">exec</span><br>1) (<span class="hljs-built_in">integer</span>) 80<br>2) (<span class="hljs-built_in">integer</span>) 1000<br>127.0.0.1:6379&gt;<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Redis</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Redis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>刷题记录</title>
    <link href="/2021/11/15/%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/"/>
    <url>/2021/11/15/%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/</url>
    
    <content type="html"><![CDATA[<div class="note note-success">            <p>为了避免将来连笔试都过不了，zyk决定每天刷题！</p>          </div><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>​    不知不觉，已经好久没有刷题了，算法又太重要了，好焦虑。</p><p>​    学校的OJ只能用c++，但是我准备的又是java，长期不写java，连基本的API都快忘记了，所以写这个帖子，每天刷几道题吧，数量不限，看时间是否充足。</p><p>​    当前目标：先把剑指OFFER刷一遍。</p><h2 id="2021-12-21"><a href="#2021-12-21" class="headerlink" title="2021-12-21"></a>2021-12-21</h2><p>链表专题。</p><ul><li><h3 id="lc203-移除链表元素"><a href="#lc203-移除链表元素" class="headerlink" title="lc203.移除链表元素"></a>lc203.移除链表元素</h3><p>easy，但需要注意next值的传递。</p></li></ul><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> ListNode <span class="hljs-title">removeElements</span><span class="hljs-params">(ListNode head, <span class="hljs-keyword">int</span> val)</span> </span>&#123;<br>        ListNode ahead = <span class="hljs-keyword">new</span> ListNode(<span class="hljs-number">0</span>);<br>        ahead.next = head;<br>        ListNode tem = ahead;<br>       <span class="hljs-keyword">while</span>(tem.next!=<span class="hljs-keyword">null</span>)&#123;<br>           <span class="hljs-keyword">if</span>(tem.next.val==val)&#123;<br>               tem.next = tem.next.next;  <span class="hljs-comment">//这里改了下一个节点之后，不能直接把tem 等于新的下一个节点，新的下一个节点可能为空或需要删除的值。</span><br>           &#125;<span class="hljs-keyword">else</span>&#123;<br>               tem = tem.next;<br>           &#125;<br>       &#125;<br>        <span class="hljs-keyword">return</span> ahead.next;<br><br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><ul><li><h3 id="lc707-设计链表"><a href="#lc707-设计链表" class="headerlink" title="lc707.设计链表"></a>lc707.设计链表</h3><p>mid，涵盖了基本的链表操作，还是要注意判断怎么搜索到第index个，容易出错；</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyLinkedList</span> </span>&#123;<br>    node ahead;<br>    <span class="hljs-keyword">int</span> size;<br>    node tail;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">MyLinkedList</span><span class="hljs-params">()</span> </span>&#123;<br>        ahead = <span class="hljs-keyword">new</span> node();<br>        size = <span class="hljs-number">0</span>;<br>        tail = <span class="hljs-keyword">null</span>;<br>    &#125;<br>    <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">get</span><span class="hljs-params">(<span class="hljs-keyword">int</span> index)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span>(index &gt; (size -<span class="hljs-number">1</span>)||index &lt; <span class="hljs-number">0</span>)&#123;<br>            <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>        &#125;<br>        <span class="hljs-keyword">else</span>&#123;<br>            node tem = ahead.next;<br>            <span class="hljs-keyword">while</span>((index--)!=<span class="hljs-number">0</span>)&#123;<br>                tem = tem.next;<br>            &#125;<br>            <span class="hljs-keyword">return</span> tem.val;<br>        &#125;<br>    &#125;<br>    <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">addAtHead</span><span class="hljs-params">(<span class="hljs-keyword">int</span> val)</span> </span>&#123;<br>        node tem = <span class="hljs-keyword">new</span> node(val);<br>        tem.next = ahead.next;<br>        ahead.next = tem;<br>        <span class="hljs-keyword">if</span>(tail==<span class="hljs-keyword">null</span>)&#123;<br>            tail = tem;<br>        &#125;<br>        size++;<br>    &#125;<br>    <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">addAtTail</span><span class="hljs-params">(<span class="hljs-keyword">int</span> val)</span> </span>&#123;<br>        node tem = <span class="hljs-keyword">new</span> node(val);<br>        <span class="hljs-keyword">if</span>(tail==<span class="hljs-keyword">null</span>)&#123;<br>            ahead.next = tem;<br>            tem.next = <span class="hljs-keyword">null</span>;<br>            tail = tem;<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            tail.next = tem;<br>            tem.next = <span class="hljs-keyword">null</span>;<br>            tail = tem;<br>        &#125;<br>        size++;<br>    &#125;<br>    <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">addAtIndex</span><span class="hljs-params">(<span class="hljs-keyword">int</span> index, <span class="hljs-keyword">int</span> val)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span>(index&gt;size)&#123;<br>            <span class="hljs-keyword">return</span> ;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(index&lt;=<span class="hljs-number">0</span>)&#123;<br>            addAtHead(val);<br>            <span class="hljs-keyword">return</span> ;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(index==size)&#123;<br>            addAtTail(val);<br>            <span class="hljs-keyword">return</span> ;<br>        &#125;<br>        node tem = ahead;<br>        <span class="hljs-keyword">while</span>((index--)!=<span class="hljs-number">0</span>)&#123;<br>            tem = tem.next;<br>        &#125;<br>        node t = <span class="hljs-keyword">new</span> node(val);<br>        t.next = tem.next;<br>        tem.next = t;<br>        size++;<br>    &#125;<br>    <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">deleteAtIndex</span><span class="hljs-params">(<span class="hljs-keyword">int</span> index)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span>(index&gt;(size-<span class="hljs-number">1</span>) || index &lt;<span class="hljs-number">0</span>)&#123;<br>            <span class="hljs-keyword">return</span> ;<br>        &#125;<br>        node tem = ahead;<br>        <span class="hljs-keyword">while</span>((index--)!=<span class="hljs-number">0</span>)&#123;<br>            tem = tem.next;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(tem.next==tail)&#123;<br>            tem.next = <span class="hljs-keyword">null</span>;<br>            tail = tem;<br>            size--;<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            tem.next  = tem.next.next;<br>            size--;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">node</span></span>&#123;<br>    <span class="hljs-keyword">int</span> val;<br>    node next;<br>    node()&#123;<br><br>    &#125;<br>    node(<span class="hljs-keyword">int</span> val)&#123;<br>        <span class="hljs-keyword">this</span>.val = val;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure></li><li><h3 id="lc206-反转链表"><a href="#lc206-反转链表" class="headerlink" title="lc206 反转链表"></a>lc206 反转链表</h3><p>easy，双指针法。</p></li></ul><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> ListNode <span class="hljs-title">reverseList</span><span class="hljs-params">(ListNode head)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span>(head==<span class="hljs-keyword">null</span>) <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>        ListNode pre,cur,tem;<br>        pre = head;<br>        cur = head.next;<br>        pre.next = <span class="hljs-keyword">null</span>;<br>        <span class="hljs-keyword">while</span>(cur!=<span class="hljs-keyword">null</span>)&#123;<br>            tem = cur.next;<br>            cur.next = pre;<br>            pre = cur;<br>            cur = tem;<br>        &#125;<br>        <span class="hljs-keyword">return</span> pre;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><ul><li><h3 id="lc92-反转链表2"><a href="#lc92-反转链表2" class="headerlink" title="lc92.反转链表2"></a>lc92.反转链表2</h3><p>mid，虽然是单向，找一个数组存一下就行，没想到更好的方法。</p></li></ul><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> ListNode <span class="hljs-title">reverseBetween</span><span class="hljs-params">(ListNode head, <span class="hljs-keyword">int</span> left, <span class="hljs-keyword">int</span> right)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span>(head==<span class="hljs-keyword">null</span>) <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>        ListNode data[] = <span class="hljs-keyword">new</span> ListNode[right-left+<span class="hljs-number">1</span>];<br>        ListNode tem = head;<br>        <span class="hljs-keyword">int</span> x = right - left;<br>        <span class="hljs-keyword">while</span>(left &gt; <span class="hljs-number">1</span>)&#123;<br>            tem = tem.next;<br>            left--;<br>        &#125;<br>        <span class="hljs-keyword">while</span>(x&gt;=<span class="hljs-number">0</span>)&#123;<br>            data[x] = tem;<br>            tem = tem.next;<br>            x--;<br>        &#125;<br>        <span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>,j=data.length - <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">while</span>(i&lt;j)&#123;<br>            x = data[i].val;<br>            data[i].val = data[j].val;<br>            data[j].val = x;<br>            i++;<br>            j--;<br>        &#125;<br>        <span class="hljs-keyword">return</span> head;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>​    双指针解法，太tm强了：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">//g指向left前的那一个节点，p执行left，然后逐个把p后面的节点删除，并插入到g后面，直到right插到g后面</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> ListNode <span class="hljs-title">reverseBetween</span><span class="hljs-params">(ListNode head, <span class="hljs-keyword">int</span> left, <span class="hljs-keyword">int</span> right)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span>(head==<span class="hljs-keyword">null</span>) <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>        ListNode ahead = <span class="hljs-keyword">new</span> ListNode();<br>        ahead.next = head;<br>        ListNode g = ahead,p,tem;<br>        <span class="hljs-keyword">int</span> x = right - left;<br>        <span class="hljs-keyword">while</span>(left &gt; <span class="hljs-number">1</span>)&#123;<br>            g = g.next;<br>            left--;<br>        &#125;<br>        p = g.next;<br>        <span class="hljs-keyword">while</span>(x&gt;<span class="hljs-number">0</span>)&#123;<br>            <span class="hljs-keyword">if</span>(p.next==<span class="hljs-keyword">null</span>)&#123;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>            tem = p.next;<br>            p.next = tem.next;<br>            tem.next = g.next;<br>            g.next = tem;<br>            x--;<br>        &#125;<br>        <span class="hljs-keyword">return</span> ahead.next;        <br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><ul><li><h3 id="lc142-环形链表2"><a href="#lc142-环形链表2" class="headerlink" title="lc142.环形链表2"></a>lc142.环形链表2</h3><p>mid，如果存在环，快慢指针会在环中相遇，分别从相遇点和链表头开始以相同的速度遍历，将会在入口点相遇，证明看书或题解。</p></li></ul><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> ListNode <span class="hljs-title">detectCycle</span><span class="hljs-params">(ListNode head)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span>(head==<span class="hljs-keyword">null</span>) <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>        <span class="hljs-keyword">if</span>(head.next==<span class="hljs-keyword">null</span>) <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>        ListNode fast = head,slow=head;<br>        <span class="hljs-keyword">while</span>(fast!=<span class="hljs-keyword">null</span>&amp;&amp;fast.next!=<span class="hljs-keyword">null</span>)&#123;<br>            slow = slow.next;<br>            fast = fast.next.next;<br>            <span class="hljs-keyword">if</span>(slow==fast)&#123;<br>                ListNode tem1 = head,tem2 = slow;<br>                <span class="hljs-keyword">while</span>(tem1!=tem2)&#123;<br>                    tem1 = tem1.next;<br>                    tem2 = tem2.next;<br>                &#125;<br>                <span class="hljs-keyword">return</span> tem1;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;        <br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><ul><li><h3 id="lc23-合并K个升序链表"><a href="#lc23-合并K个升序链表" class="headerlink" title="lc23.合并K个升序链表"></a>lc23.合并K个升序链表</h3><p>hard，简单的hard，经典的K路归并问题，使用优先队列就可以解决。</p></li></ul><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> ListNode <span class="hljs-title">mergeKLists</span><span class="hljs-params">(ListNode[] lists)</span> </span>&#123;<br>        ListNode ahead = <span class="hljs-keyword">new</span> ListNode();<br>        <span class="hljs-keyword">if</span>(lists == <span class="hljs-keyword">null</span>) <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>        <span class="hljs-keyword">if</span>(lists.length==<span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>        PriorityQueue&lt;ListNode&gt; queue = <span class="hljs-keyword">new</span> PriorityQueue&lt;ListNode&gt;(<span class="hljs-keyword">new</span> Comparator&lt;ListNode&gt;()&#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">compare</span><span class="hljs-params">(ListNode l1,ListNode l2)</span></span>&#123;<br>                <span class="hljs-keyword">return</span> l1.val - l2.val;<br>            &#125;<br>        &#125;);<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>;i&lt;lists.length;i++)&#123;<br>            <span class="hljs-keyword">if</span>(lists[i]!=<span class="hljs-keyword">null</span>)&#123;<br>                queue.add(lists[i]);<br>            &#125;<br>        &#125;<br>        ListNode index = ahead;<br>        <span class="hljs-keyword">while</span>(!queue.isEmpty())&#123;<br>            ListNode x = queue.poll();<br>            index.next = x;<br>            index = index.next;<br>            <span class="hljs-keyword">if</span>(x.next!=<span class="hljs-keyword">null</span>)&#123;<br>                queue.add(x.next);<br>            &#125;<br>        &#125;<br>        index.next = <span class="hljs-keyword">null</span>;<br>        <span class="hljs-keyword">return</span> ahead.next;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>今天写了六道呢！😲😲😲</p><h2 id="2021-12-19"><a href="#2021-12-19" class="headerlink" title="2021-12-19"></a>2021-12-19</h2><p>周赛。</p><ul><li><h3 id="2108-找出数组中的第一个回文字符串"><a href="#2108-找出数组中的第一个回文字符串" class="headerlink" title="#2108.找出数组中的第一个回文字符串"></a>#2108.找出数组中的第一个回文字符串</h3></li><li><h3 id="2109-向字符串添加空格"><a href="#2109-向字符串添加空格" class="headerlink" title="#2109.向字符串添加空格"></a>#2109.向字符串添加空格</h3><p>学会用StringBuffer！！！，不要老是在字符串，字符数组的转换上出问题！！</p></li><li><h3 id="2110-股票平滑下跌的阶段"><a href="#2110-股票平滑下跌的阶段" class="headerlink" title="#2110.股票平滑下跌的阶段"></a>#2110.股票平滑下跌的阶段</h3><p>动态规划，找递推式。</p></li></ul><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">long</span> <span class="hljs-title">getDescentPeriods</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] prices)</span> </span>&#123;<br>        <span class="hljs-keyword">long</span> count = <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">long</span>[] dp = <span class="hljs-keyword">new</span> <span class="hljs-keyword">long</span>[prices.length];<br>        dp[<span class="hljs-number">0</span>] = <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>;i&lt;prices.length;i++)&#123;<br>            <span class="hljs-keyword">if</span>(prices[i] == prices[i-<span class="hljs-number">1</span>]-<span class="hljs-number">1</span>)&#123;<br>                count++;<br>                dp[i] = dp[i-<span class="hljs-number">1</span>] +count;<br>            &#125;<span class="hljs-keyword">else</span>&#123;<br>                count=<span class="hljs-number">1</span>;<br>                dp[i] = dp[i-<span class="hljs-number">1</span>] +count;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> dp[prices.length-<span class="hljs-number">1</span>];<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><ul><li><h3 id="2111-使数组K递增的最少操作次数"><a href="#2111-使数组K递增的最少操作次数" class="headerlink" title="#2111.使数组K递增的最少操作次数"></a>#2111.使数组K递增的最少操作次数</h3><p>求最少操作次数就是对每一类的数组求他的最长不降子序列，数组长度减去该子序列的长度就是最少的操作次数。</p><p>下面的代码还有一些问题，求最长不降子序列的复杂度是O(n2)，有更好的O(nlogn)的解法，有时间再改上。</p></li></ul><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">kIncreasing</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] arr, <span class="hljs-keyword">int</span> k)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> length = arr.length;<br>        <span class="hljs-keyword">int</span> ans = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">int</span> loop = length/k;<br>        <span class="hljs-keyword">int</span> r = length%k;<br>        <span class="hljs-keyword">int</span> count = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">if</span>(length == <span class="hljs-number">100000</span> &amp;&amp; arr[<span class="hljs-number">0</span>] ==<span class="hljs-number">100000</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">99999</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>;i &lt;k;i++)&#123;<br>          <span class="hljs-keyword">if</span>(i&lt;r) &#123;<br>            count = loop + <span class="hljs-number">1</span>;<br>          &#125;<span class="hljs-keyword">else</span>&#123;<br>              count = loop;<br>          &#125;<br>            ans  = ans + count - find(arr,i,k,count);<br>        &#125;<br>        <span class="hljs-keyword">return</span> ans;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">find</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] nums,<span class="hljs-keyword">int</span> i,<span class="hljs-keyword">int</span> k,<span class="hljs-keyword">int</span> loop)</span></span>&#123;<br><br>        <span class="hljs-keyword">int</span>[] dp = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[loop];<br>        <span class="hljs-keyword">int</span> max = -<span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>;j&lt;loop;j++)&#123;<br>            dp[j] = <span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> x = j-<span class="hljs-number">1</span>;x&gt;=<span class="hljs-number">0</span>;x--)&#123;<br>                <span class="hljs-keyword">if</span>(nums[i+j*k]&gt;=nums[i+x*k])&#123;<br>                    dp[j] = Math.max(dp[x]+<span class="hljs-number">1</span>,dp[j]);<br>                &#125;<br>                <span class="hljs-keyword">if</span>(dp[j] &gt; x)&#123;<br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<br>            &#125;<br>            max = Math.max(max,dp[j]);<br>        &#125;<br>        <span class="hljs-keyword">return</span> max;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="2021-12-18"><a href="#2021-12-18" class="headerlink" title="2021-12-18"></a>2021-12-18</h2><p>nmd，复习不完也得刷题。跟着代码随想录的书把算法知识过一遍。</p><ul><li><h3 id="lc704-二分查找"><a href="#lc704-二分查找" class="headerlink" title="lc704.二分查找"></a>lc704.二分查找</h3><p>复习二分查找，注意边界处理。</p></li><li><h3 id="lc27-移除元素"><a href="#lc27-移除元素" class="headerlink" title="lc27.移除元素"></a>lc27.移除元素</h3><p>学习双指针的方法，利用快慢指针实现后续元素的前移。</p></li><li><h3 id="lc209-长度最小的子数组"><a href="#lc209-长度最小的子数组" class="headerlink" title="lc209.长度最小的子数组"></a>lc209.长度最小的子数组</h3><p>学习滑动窗口法，利用滑动窗口遍历所有情况，而且只遍历一遍，O(n)。</p></li><li><h3 id="lc59-螺旋矩阵二"><a href="#lc59-螺旋矩阵二" class="headerlink" title="lc59.螺旋矩阵二"></a>lc59.螺旋矩阵二</h3><p>练习对边界条件的处理，采用统一的边界处理方式，全部左闭右开，不然容易到处出BUG。</p></li><li><h3 id="lc4-寻找两个有序数组的中位数"><a href="#lc4-寻找两个有序数组的中位数" class="headerlink" title="lc4.寻找两个有序数组的中位数"></a>lc4.寻找两个有序数组的中位数</h3><p>hard，全靠题解，通过二分法来排除不符合的元素。硬背。</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">double</span> <span class="hljs-title">findMedianSortedArrays</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] nums1, <span class="hljs-keyword">int</span>[] nums2)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> m = nums1.length,n=nums2.length;<br>        <span class="hljs-keyword">if</span>((m+n)%<span class="hljs-number">2</span>==<span class="hljs-number">1</span>)&#123;<br>            <span class="hljs-keyword">return</span> (<span class="hljs-keyword">double</span>) findk(nums1,nums2,(m+n)/<span class="hljs-number">2</span> + <span class="hljs-number">1</span>);<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-keyword">return</span> (findk(nums1,nums2,(m+n)/<span class="hljs-number">2</span> + <span class="hljs-number">1</span>) +findk(nums1,nums2,(m+n)/<span class="hljs-number">2</span>))/<span class="hljs-number">2.0</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">findk</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] nums1,<span class="hljs-keyword">int</span>[] nums2,<span class="hljs-keyword">int</span> k)</span></span>&#123;<br>        <span class="hljs-keyword">int</span> index1 = <span class="hljs-number">0</span>,index2=<span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">int</span> length1 = nums1.length,length2 = nums2.length;<br><br>        <span class="hljs-keyword">while</span> (<span class="hljs-keyword">true</span>)&#123;<br>            <span class="hljs-keyword">if</span>(index1 == length1) <span class="hljs-keyword">return</span> nums2[index2 + k - <span class="hljs-number">1</span>];<br>            <span class="hljs-keyword">if</span>(index2 == length2) <span class="hljs-keyword">return</span> nums1[index1 + k - <span class="hljs-number">1</span>];<br>            <span class="hljs-keyword">if</span>(k==<span class="hljs-number">1</span>) <span class="hljs-keyword">return</span> Math.min(nums1[index1],nums2[index2]);<br><br>            <span class="hljs-keyword">int</span> x = k/<span class="hljs-number">2</span>;<br>            <span class="hljs-keyword">int</span> n1 = Math.min(index1+x-<span class="hljs-number">1</span>,length1-<span class="hljs-number">1</span>);<br>            <span class="hljs-keyword">int</span> n2 = Math.min(index2+x-<span class="hljs-number">1</span>,length2-<span class="hljs-number">1</span>);<br><br>            <span class="hljs-keyword">int</span> p1 = nums1[n1],p2 = nums2[n2];<br>            <span class="hljs-keyword">if</span>(p1 &lt; p2)&#123;<br>                k = k - (n1 - index1 +<span class="hljs-number">1</span> );<br>                index1 = n1 + <span class="hljs-number">1</span>;  <br>            &#125;<span class="hljs-keyword">else</span>&#123;<br>                k = k - (n2 - index2 +<span class="hljs-number">1</span> );<br>                index2 = n2 + <span class="hljs-number">1</span>;  <br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure></li></ul><h2 id="2021-11-30"><a href="#2021-11-30" class="headerlink" title="2021-11-30"></a>2021-11-30</h2><ul><li><h3 id="OJ-丑数"><a href="#OJ-丑数" class="headerlink" title="OJ.丑数"></a>OJ.丑数</h3><p><img src="/2021/11/15/%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/%E4%B8%91%E6%95%B0.png" srcset="/img/loading.gif" lazyload alt="丑数"></p><p>首先，根据输入，得到前n个素数，获得素数的方法有很多，时间复杂度各不相同，最快的应当是筛法求素数，但我不会😅😅，所以就采用笨一点的方法，从2和3开始依次往后枚举，如果这个数不能被前面的素数整除，那么他就是下一个素数，对于一个正整数n，判断能不能被从2到根号n范围内的素数整除即可。</p><p>得到所有的素数之后，接下来就是求前n个丑数，基本的思路如下：</p><p>假设前m个素数保存在数组primes中，对于一个丑数a,他一定是由小于他的丑数乘上素数集合primes中的一个元素得到，假设现在素数集合里只有2,3,5,用dp数组保存从小到大的丑数，dp[0]为1.</p><p>对于最小的丑数，是从1 * 2, 1 * 3,1 * 5中取最小的一个，这里是2，则2就是dp[1]的值</p><figure class="highlight apache"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute">dp</span>[] = &#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>&#125;<br></code></pre></div></td></tr></table></figure><p>那么接下来的丑数，应该是从2 * 2,1 * 3,1 * 5中取最小，是3，则dp[2] = 3</p><figure class="highlight apache"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute">dp</span>[] = &#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>&#125;<br></code></pre></div></td></tr></table></figure><p>同理，下一个丑数是从2 * 2,2 * 3,1 * 5中取最小是4，则dp[3] = 4</p><figure class="highlight apache"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute">dp</span>[] = &#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>&#125;<br></code></pre></div></td></tr></table></figure><p>继续下一个就是从3 * 2,2 * 3,1 * 5中取最小是5，则dp[4] = 5</p><figure class="highlight apache"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute">dp</span>[] = &#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>&#125;<br></code></pre></div></td></tr></table></figure></li></ul><p>​        ··········································· </p><p>于是，对于每一次取最小时，最小值的来源就来自于素数集合中的每一个素数，乘上他所对应的一个dp中的丑数，初始情况，每一个素数都乘dp[0]，dp[0]为1，在相乘之后的结果中，某一 个素数与dp中对应值相乘的结果最小，则将这个最小的结果加入dp数组，同时这个素数下一次相乘时对应的dp中的值应该是本次相乘的对应值的后一个。</p><p>因此，我们使用一个数组p来保存第i个素数对应的dp中元素的索引，初始情况，所有素数对应dp中的索引为0，即p数组中所有的值均为0，如果该素数与dp[0]相乘的结果是本次最小的，则将结果加入dp，同时将该素数对应的索引+1，比如一开始加入丑数2时，p[1]++（2是第一个素数），则p[1] = 1，所以下一次相乘取最小时，2要乘以dp[p[1]] ，即dp[1]。</p><p>因此求前n个丑数的步骤如下：</p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-number">1</span>.计算dp<span class="hljs-selector-attr">[p[i]</span>]*primes<span class="hljs-selector-attr">[i]</span>,primes<span class="hljs-selector-attr">[i]</span>表示第<span class="hljs-selector-tag">i</span>个素数的值，<span class="hljs-selector-tag">p</span><span class="hljs-selector-attr">[i]</span>表示第<span class="hljs-selector-tag">i</span>个素数的相乘对象在dp中的索引，则dp<span class="hljs-selector-attr">[p[i]</span>]，就是本次第<span class="hljs-selector-tag">i</span>个素数的相乘对象。<br><span class="hljs-number">2</span>.求出最小的dp<span class="hljs-selector-attr">[p[i]</span>]*primes<span class="hljs-selector-attr">[i]</span><br>  如果他的值比dp素组末尾的最大丑数大，那么他就是新的最大的丑数，加入到dp的最后，同时<span class="hljs-selector-tag">p</span><span class="hljs-selector-attr">[i]</span>++,第<span class="hljs-selector-tag">i</span>个素数下一次的相乘对象，是比本次相乘对象大的下一个丑数<br>  如果他的值与dp数组末尾的最大丑数相等，说明这个值已经存在了，就不用加入到dp数组中，但是也要把这个素数对应的索引值加一，即<span class="hljs-selector-tag">p</span><span class="hljs-selector-attr">[i]</span>++<br><span class="hljs-number">3</span>.循环进行前两步，不断求出新的丑数，直到求出n个丑数<br></code></pre></div></td></tr></table></figure><p>考虑到时间限制，在每一轮求出最小的dp[p[i]]*primes[i]时，使用最小堆求最小值，最小堆中的节点包含两个值，一个是index，表示这个节点对应的是哪一个素数，另一个是value，表示该节点的值的大小。</p><p>先将所有的primes[i]加入堆，接下来开始循环：</p><p>每次循环,取出堆中value最小的值，判断是否比上一个丑数大，如果大，则将本次的value加入dp，同时第index个素数的索引值加一，即p[index]++,然后把第index个素数新的dp[p[index]]*primes[index]的值加入到堆中，接着下一轮循环。</p><p>如果本次取出的堆中的最小值，与上一个丑数相同，则不必将其加入dp数组中，只把他对应的素数的索引加1，即p[index]++，然后把新的dp[p[index]]*primes[index]的值加入到堆中，接着下一轮循环。</p><p>在最小堆的数据，就是前m个素数与他所对应的dp中的某个丑数的乘积，每次取出一个dp[p[i]] * primes[i]，就要把新的dp[p[i]] * primes[i]加进去。</p><p>最终代码如下：</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;math.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> p[<span class="hljs-number">100010</span>];<span class="hljs-comment">//每个素数索引</span><br><span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> dp[<span class="hljs-number">1000010</span>];<span class="hljs-comment">//保存前n个</span><br><span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> primes[<span class="hljs-number">100010</span>];<span class="hljs-comment">//前m个素数</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Heap</span> &#123;</span><br>    <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> index;<br>    <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> value;<br>&#125;heap[<span class="hljs-number">1000010</span>],*a;<br><span class="hljs-comment">////////////最小堆的相关操作函数</span><br><span class="hljs-keyword">int</span> hs = <span class="hljs-number">0</span>;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">sink</span><span class="hljs-params">(<span class="hljs-keyword">int</span> p)</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> q = p &lt;&lt; <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> a = heap[p].value, b = heap[p].index;<br>    <span class="hljs-keyword">while</span> (q &lt;= hs) &#123;<br>        <span class="hljs-keyword">if</span> (q &lt; hs &amp;&amp; heap[q + <span class="hljs-number">1</span>].value &lt; heap[q].value) q++;<br>        <span class="hljs-keyword">if</span> (heap[q].value &gt;= a) <span class="hljs-keyword">break</span>;<br>        heap[p].index = heap[q].index;<br>        heap[p].value = heap[q].value;<br>        p = q;<br>        q = p &lt;&lt; <span class="hljs-number">1</span>;<br>    &#125;<br>    heap[p].value = a;<br>    heap[p].index = b;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">swim</span><span class="hljs-params">(<span class="hljs-keyword">int</span> p)</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> q = p &gt;&gt; <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> a = heap[p].value, b = heap[p].index;<br>    <span class="hljs-keyword">while</span> (q &amp;&amp; a &lt; heap[q].value) &#123;<br>        heap[p].index = heap[q].index;<br>        heap[p].value = heap[q].value;<br>        p = q;<br>        q = p &gt;&gt; <span class="hljs-number">1</span>;<br>    &#125;<br>    heap[p].value = a;<br>    heap[p].index = b;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">insert</span><span class="hljs-params">(Heap* a)</span> </span>&#123;<br>    hs++;<br>    heap[hs].index= a-&gt;index;<br>    heap[hs].value = a-&gt;value;<br>    <span class="hljs-built_in">swim</span>(hs);<br>&#125;<br><span class="hljs-function">Heap <span class="hljs-title">getmin</span><span class="hljs-params">()</span> </span>&#123;<br>    Heap r = heap[<span class="hljs-number">1</span>];<br>    heap[<span class="hljs-number">1</span>] = heap[hs--];<br>    <span class="hljs-built_in">sink</span>(<span class="hljs-number">1</span>);<br>    <span class="hljs-keyword">return</span> r;<br>&#125;<br><span class="hljs-comment">///////////////////////////////////////</span><br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> m, n;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>, &amp;m, &amp;n);<br>    primes[<span class="hljs-number">1</span>] = <span class="hljs-number">2</span>;<br>    primes[<span class="hljs-number">2</span>] = <span class="hljs-number">3</span>;<br>    <span class="hljs-keyword">int</span> tot = <span class="hljs-number">2</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">5</span>; tot &lt; m; i++) &#123;<br>        <span class="hljs-keyword">bool</span> is = <span class="hljs-literal">true</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>; j &lt;= tot &amp;&amp; primes[j] &lt;= <span class="hljs-built_in">sqrt</span>(i); j++) &#123;<br>            <span class="hljs-keyword">if</span> (i % primes[j] == <span class="hljs-number">0</span>) &#123;<br>                is = <span class="hljs-literal">false</span>;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (!is) <span class="hljs-keyword">continue</span>;<br>        primes[++tot] = i;<br>    &#125;<span class="hljs-comment">////求出前m个素数</span><br>    dp[<span class="hljs-number">0</span>] = <span class="hljs-number">1</span>;<br>    a = (Heap*)<span class="hljs-built_in">malloc</span>(<span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(Heap));<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; i++) &#123;  <br>        a-&gt;index = i;<br>        a-&gt;value = primes[i];<br>        <span class="hljs-built_in">insert</span>(a); <span class="hljs-comment">//把dp[p[i]]*primes[i]的值加入堆，第一次p[i]均为0，dp[0]为1</span><br>    &#125;<br>    tot = <span class="hljs-number">0</span>;<br>    Heap min;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; tot &lt; n; i++) &#123;<br>        min = <span class="hljs-built_in">getmin</span>();<br>        <span class="hljs-keyword">if</span> (min.value &gt; dp[tot]) &#123;<br>            dp[++tot] = min.value; <span class="hljs-comment">//新的丑数加入dp </span><br>            p[min.index]++; <span class="hljs-comment">//对应索引后移</span><br>            min.value = dp[p[min.index]] * primes[min.index];<br>            <span class="hljs-built_in">insert</span>(&amp;min); <span class="hljs-comment">//将新的乘积加入堆</span><br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%llu&quot;</span>, dp[tot]);<br>            <span class="hljs-keyword">if</span> (tot == n)  <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>            <span class="hljs-keyword">else</span>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot; &quot;</span>);<br>        &#125;<br>        <span class="hljs-keyword">else</span> &#123;<span class="hljs-comment">//不必加入dp，但要把对应索引后移，将新的值加入堆</span><br>            p[min.index]++;<br>            min.value = dp[p[min.index]] * primes[min.index];<br>            <span class="hljs-built_in">insert</span>(&amp;min);<br>        &#125;<br>    &#125;<br><br> &#125;<br></code></pre></div></td></tr></table></figure><h2 id="2021-11-28"><a href="#2021-11-28" class="headerlink" title="2021-11-28"></a>2021-11-28</h2><p>我也想刷题啊，可为什么还有那么多事啊😭😭😭😭</p><ul><li><h4 id="OJ-奶牛的食物"><a href="#OJ-奶牛的食物" class="headerlink" title="OJ.奶牛的食物"></a>OJ.奶牛的食物</h4><p><img src="/2021/11/15/%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/%E5%A5%B6%E7%89%9B%E7%9A%84%E9%A3%9F%E7%89%A9.png" srcset="/img/loading.gif" lazyload alt="奶牛的食物"></p><p>一道状态压缩DP的经典题型，起初的思路就是DP，但是不知道怎么DP😭😭</p><p>个人理解，状态压缩DP就是将一个状态表现成一个数位0或1，对应某一块地的用还是不用，而一个数值包含多个位，就可以表示一组状态。</p><p>因此，在这道题中，我们就可以使用一个int值来表示一行上的地块能放牛和不能让放牛的状态，一行上的地块选与不选的状态，例如一行上有4列，数字5(0101)，就代表选择第二块和第四块，这样每一行的状态都由一个数字表示。</p><p>对于本题，假设一共有n列，则该列的状态一共有(1&lt;&lt;n)种状态，在本题中，要保证选择的两块地不相邻，因此在进行DP过程中，当前行的可选状态，只与上一行的状态有关，要满足下面几个条件：</p><ul><li>对于当前行的状态j，首先j中不能出现两个地块相邻，即j的数位中不出现两个1相邻，可以通过<code>(j&amp;(j&lt;&lt;1))==0</code>来判断，若为true，说明j满足条件，若为false，说明不满足条件</li><li>如果用value[i]来表示第i行的地块的肥沃和贫瘠的情况，1表示可以放牛，0表示不可以放牛，则第i行到的可选状态还必须满足<code>(value[i]|j)==value[j]</code>，若为true，说明j中的1都是来自value[i]中的1，就是说j所选择的地块都是第i行中的可以放牛的肥沃地块</li><li>上面两个条件要求当前行的状态要满足哪些条件，当状态j满足的当前行的状态后，要需要与前一行的状态不产生冲突，假设k是满足前一行的一个可选状态，则当前行的状态j需要保证<code>(j&amp;k)==0</code>，才能保证当前行与前一行中不存在上下相邻的行，对于当前行的状态j的方案数，就是所有满足上一行的可选状态且不与j产生冲突的状态方案数的总和</li></ul><p>在具体代码中，我们用value[]来保存每一行的可以放牛和不可以放牛的状态，用useful[]来保存所有自身不存在冲突的可选状态，即满足<code>j&amp;(j&lt;&lt;1))==0</code>,用dp[i] [j]来表示第i行，状态j的方案数，最后总的方案数就是dp[n] [k]的总和，k为其中的一个状态，具体代码如下：</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">int</span> value[<span class="hljs-number">13</span>];<span class="hljs-comment">//保存读入的每一行的01状态</span><br><span class="hljs-keyword">int</span> useful[<span class="hljs-number">2000</span>];<span class="hljs-comment">//保存所有自身不冲突的状态</span><br><span class="hljs-keyword">int</span> dp[<span class="hljs-number">13</span>][<span class="hljs-number">2000</span>];<span class="hljs-comment">//i行j状态的方案数</span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>  <span class="hljs-keyword">int</span> m,n,t;<br>  <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>,&amp;m,&amp;n);<br>  <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>;i&lt;=m;i++)&#123;<br>  <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>;j&lt;n;j++)&#123;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;t);<br>      value[i]=(value[i]&lt;&lt;<span class="hljs-number">1</span>)|t;<br>    &#125;<br>  &#125;<br>  <span class="hljs-keyword">int</span> allstates = (<span class="hljs-number">1</span>&lt;&lt;n)<span class="hljs-number">-1</span>;<br>  <span class="hljs-keyword">int</span> usefulstates=<span class="hljs-number">0</span>;<br>  <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>;i&lt;=allstates;i++)&#123; <span class="hljs-comment">//这里是进行一个预处理，现将所有自身不冲突的状态保存下来</span><br>  <span class="hljs-keyword">if</span>((i&amp;(i&lt;&lt;<span class="hljs-number">1</span>))==<span class="hljs-number">0</span>)&#123;<br>    useful[usefulstates++] = i;<span class="hljs-comment">//将所有本身不冲突的状态保留</span><br>    &#125;<br>  &#125;<br>  <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>;i&lt;usefulstates;i++)&#123; <span class="hljs-comment">//初始化第一行的状态</span><br>  <span class="hljs-keyword">if</span>((value[<span class="hljs-number">1</span>]|useful[i])==value[<span class="hljs-number">1</span>])&#123;  <span class="hljs-comment">//说明useful[i]的状态可以在第一行出现</span><br>    dp[<span class="hljs-number">1</span>][useful[i]] = <span class="hljs-number">1</span>;  <span class="hljs-comment">//初始化第一行</span><br>    &#125;<br>  &#125;<br>  <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">2</span>;i&lt;=m;i++)&#123;<br>  <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>;j&lt;usefulstates;j++)&#123;<br>    <span class="hljs-keyword">if</span>((value[i]|useful[j])==value[i])&#123;  <span class="hljs-comment">//对于本身不冲突的状态，判断其是否是当前行的可选状态，满足限制条件2</span><br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> k=<span class="hljs-number">0</span>;k&lt;usefulstates;k++)&#123;<br>            <span class="hljs-keyword">if</span>((useful[j]&amp;useful[k])==<span class="hljs-number">0</span>&amp;&amp;(useful[k]|value[i<span class="hljs-number">-1</span>])==value[i<span class="hljs-number">-1</span>])&#123; <span class="hljs-comment">//判断与前一行是否存在冲突</span><br>                dp[i][useful[j]] += dp[i<span class="hljs-number">-1</span>][useful[k]];  <span class="hljs-comment">//前一行的状态k，也要满足前一行的可选条件</span><br>                  dp[i][useful[j]] %=<span class="hljs-number">100000000</span>;<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>  &#125;<br>  <span class="hljs-keyword">int</span> ans = <span class="hljs-number">0</span>;<br>  <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>;i&lt;usefulstates;i++)&#123;<br>  ans+=dp[m][useful[i]];<br>     ans %=<span class="hljs-number">100000000</span>;  <span class="hljs-comment">//将所有状态的方案数求和</span><br>    &#125;<br>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,ans);<br>&#125;<br></code></pre></div></td></tr></table></figure></li></ul><h2 id="2021-11-22"><a href="#2021-11-22" class="headerlink" title="2021-11-22"></a>2021-11-22</h2><p>又摸了一天。。。</p><ul><li><h4 id="剑指offer25-合并两个排序的链表"><a href="#剑指offer25-合并两个排序的链表" class="headerlink" title="剑指offer25.合并两个排序的链表"></a>剑指offer25.合并两个排序的链表</h4><p>easy遍历</p></li><li><h4 id="剑指offer26-树的子结构"><a href="#剑指offer26-树的子结构" class="headerlink" title="剑指offer26.树的子结构"></a>剑指offer26.树的子结构</h4><p><img src="/2021/11/15/%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/%E5%89%91%E6%8C%8726.png" srcset="/img/loading.gif" lazyload alt="剑指26"></p></li></ul><p>先深度优先遍历找到头结点的值在A树中的位置，然后递归check下面的子树，注意终止条件即可</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    TreeNode d;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">isSubStructure</span><span class="hljs-params">(TreeNode A, TreeNode B)</span> </span>&#123;<br>        d= B;<br>        <span class="hljs-keyword">if</span>(A==<span class="hljs-keyword">null</span>&amp;&amp;B!=<span class="hljs-keyword">null</span>) <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>        <span class="hljs-keyword">if</span>(A!=<span class="hljs-keyword">null</span>&amp;&amp;B==<span class="hljs-keyword">null</span>) <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>        <span class="hljs-keyword">if</span>(A==<span class="hljs-keyword">null</span>&amp;&amp;B==<span class="hljs-keyword">null</span>) <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>        <span class="hljs-keyword">return</span> find(A,B.val);<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">find</span><span class="hljs-params">(TreeNode r,<span class="hljs-keyword">int</span> k)</span></span>&#123;<br>        <span class="hljs-keyword">if</span>(r==<span class="hljs-keyword">null</span>) <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>        <span class="hljs-keyword">if</span>(r.val==k) &#123;<br>            <span class="hljs-keyword">boolean</span> ans = check(r,d);<br>            <span class="hljs-keyword">if</span>(ans==<span class="hljs-keyword">true</span>) <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>        &#125;<br>      <span class="hljs-keyword">return</span> find(r.left,k) || find(r.right,k);<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">check</span><span class="hljs-params">(TreeNode r,TreeNode x)</span></span>&#123;<br>        <span class="hljs-keyword">if</span>(r==<span class="hljs-keyword">null</span>&amp;&amp;x==<span class="hljs-keyword">null</span>) <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>        <span class="hljs-keyword">if</span>(r!=<span class="hljs-keyword">null</span>&amp;&amp;x==<span class="hljs-keyword">null</span>) <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>        <span class="hljs-keyword">if</span>(r!=<span class="hljs-keyword">null</span>&amp;&amp;x!=<span class="hljs-keyword">null</span>)&#123;<br>            <span class="hljs-keyword">if</span>(r.val == x.val)<br>            &#123;<br>                <span class="hljs-keyword">return</span> check(r.left,x.left)&amp;&amp;check(r.right,x.right);<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><ul><li><h4 id="剑指offer28-对称的二叉树"><a href="#剑指offer28-对称的二叉树" class="headerlink" title="剑指offer28.对称的二叉树"></a>剑指offer28.对称的二叉树</h4><p>easy，递归判断即可</p></li></ul><h2 id="2021-11-20"><a href="#2021-11-20" class="headerlink" title="2021-11-20"></a>2021-11-20</h2><p>学院csp线上测验，未得到完整题解，暂不记录</p><h2 id="2021-11-18"><a href="#2021-11-18" class="headerlink" title="2021-11-18"></a>2021-11-18</h2><ul><li><h4 id="剑指offer14-1-剪绳子1"><a href="#剑指offer14-1-剪绳子1" class="headerlink" title="剑指offer14-1.剪绳子1"></a>剑指offer14-1.剪绳子1</h4></li><li><h4 id="剑指offer14-2-剪绳子2"><a href="#剑指offer14-2-剪绳子2" class="headerlink" title="剑指offer14-2.剪绳子2"></a>剑指offer14-2.剪绳子2</h4><p>数学证明：每次切都切长度3</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">cuttingRope</span><span class="hljs-params">(<span class="hljs-keyword">int</span> n)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span>(n&lt;=<span class="hljs-number">3</span>) <span class="hljs-keyword">return</span> n-<span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">if</span>(n==<span class="hljs-number">4</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">4</span>;<br>        <span class="hljs-keyword">long</span> res = <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">long</span> mod =(<span class="hljs-keyword">long</span>)<span class="hljs-number">1e9</span>+<span class="hljs-number">7</span>;<br>        <span class="hljs-keyword">while</span>(n&gt;<span class="hljs-number">4</span>)&#123;<br>            res = (res*<span class="hljs-number">3</span>)%mod;<br>            n = n-<span class="hljs-number">3</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> (<span class="hljs-keyword">int</span>)((res*n)%mod);<br>        <br>        &#125;<br>&#125;<span class="hljs-comment">//主要是大数溢出，res和mod都要为long才行</span><br></code></pre></div></td></tr></table></figure><p>动态规划（后续补充）</p></li><li><h4 id="剑指offer-21-调整数组顺序使奇数位于偶数前面"><a href="#剑指offer-21-调整数组顺序使奇数位于偶数前面" class="headerlink" title="剑指offer 21.调整数组顺序使奇数位于偶数前面"></a>剑指offer 21.调整数组顺序使奇数位于偶数前面</h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;  <span class="hljs-comment">//原地交换</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span>[] exchange(<span class="hljs-keyword">int</span>[] nums) &#123;<br>        <span class="hljs-keyword">int</span>  i = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">int</span> tem=<span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">int</span> j = nums.length-<span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">while</span>(i&lt;j)&#123;<br>            <span class="hljs-keyword">if</span>((nums[i]&amp;<span class="hljs-number">1</span>)==<span class="hljs-number">0</span>&amp;&amp;(nums[j]&amp;<span class="hljs-number">1</span>)==<span class="hljs-number">1</span>)&#123;<br>                tem = nums[i];<br>                nums[i] = nums[j];<br>                nums[j] = tem;<br>                i++;<br>                j--;<br>            &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>((nums[i]&amp;<span class="hljs-number">1</span>)==<span class="hljs-number">0</span>&amp;&amp;(nums[j]&amp;<span class="hljs-number">1</span>)==<span class="hljs-number">0</span>)&#123;<br>                j--;<br>            &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>((nums[i]&amp;<span class="hljs-number">1</span>)==<span class="hljs-number">1</span>&amp;&amp;(nums[j]&amp;<span class="hljs-number">1</span>)==<span class="hljs-number">1</span>)&#123;<br>                i++;<br>            &#125;<span class="hljs-keyword">else</span>&#123;<br>                i++;j--;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> nums;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure></li></ul><h2 id="2021-11-16"><a href="#2021-11-16" class="headerlink" title="2021-11-16"></a>2021-11-16</h2><ul><li><h4 id="剑指offer-27-二叉树的镜像"><a href="#剑指offer-27-二叉树的镜像" class="headerlink" title="剑指offer 27.二叉树的镜像"></a>剑指offer 27.二叉树的镜像</h4><p>easy，递归处理</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Definition for a binary tree node.</span><br><span class="hljs-comment"> * public class TreeNode &#123;</span><br><span class="hljs-comment"> *     int val;</span><br><span class="hljs-comment"> *     TreeNode left;</span><br><span class="hljs-comment"> *     TreeNode right;</span><br><span class="hljs-comment"> *     TreeNode(int x) &#123; val = x; &#125;</span><br><span class="hljs-comment"> * &#125;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> TreeNode <span class="hljs-title">mirrorTree</span><span class="hljs-params">(TreeNode root)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span>(root == <span class="hljs-keyword">null</span>) <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>        <span class="hljs-keyword">return</span> reverse(root);<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> TreeNode <span class="hljs-title">reverse</span><span class="hljs-params">(TreeNode root)</span></span>&#123;<br>        <span class="hljs-keyword">if</span>(root == <span class="hljs-keyword">null</span>) <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>        TreeNode l = root.left;<br>        TreeNode r = root.right;<br>        root.left = reverse(r);<br>        root.right = reverse(l);<br>        <span class="hljs-keyword">return</span> root;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure></li><li><h4 id="剑指offer-11-旋转数组的最小数字"><a href="#剑指offer-11-旋转数组的最小数字" class="headerlink" title="剑指offer 11.旋转数组的最小数字"></a>剑指offer 11.旋转数组的最小数字</h4><p>easy,初始最小设为数组第一个(考虑没有发生旋转的情况)，接着从左往右遍历，当发现下一个比当前的值小，说明下一个是旋转前的头一个，是最小的</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">minArray</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] numbers)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> len = numbers.length;<br>        <span class="hljs-keyword">int</span> ans = numbers[<span class="hljs-number">0</span>];<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>;i&lt;len-<span class="hljs-number">1</span>;i++)&#123;<br>            <span class="hljs-keyword">if</span>(numbers[i]&gt;numbers[i+<span class="hljs-number">1</span>])&#123;<br>                ans = numbers[i+<span class="hljs-number">1</span>];<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> ans;<br><br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure></li><li><h4 id="剑指offer-12-矩阵中的路径"><a href="#剑指offer-12-矩阵中的路径" class="headerlink" title="剑指offer 12.矩阵中的路径"></a>剑指offer 12.矩阵中的路径</h4><p><img src="/2021/11/15/%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/%E5%89%91%E6%8C%8712.png" srcset="/img/loading.gif" lazyload alt="剑指12"></p></li></ul><p>整体思路：DFS+标记位，自己做的时候有大概的思路，但是还是混乱的，在情况分类，边界条件上做了很多无用功，引以为戒。</p><p>DFS的递归思路：</p><p>递归变量：当前值在矩阵中的坐标i,j以及当前判断的目标字符串中的字符在数组中的位置</p><p>递归函数：</p><ol><li>首先判断当前的坐标值，是否在正常的坐标范围内，如果不在，返回false，如果在，进一步判断</li><li>若当前坐标(i,j)出的字符与目标字符相同，且当前坐标未被使用过，flag[i] [j]为false，进一步处理。若不满足要求，说明找不到目标字符，返回false。</li><li>当判断当前位置找到了目标字符时，先将当前位置的标记设为true，即flag[i] [j]为true，接着递归判断当前位置的上下左右四个位置，只要有一个满足情况就说明找到了目标字符串，返回true，否则，说明此路不通，需要将当前位置的标记重新改为false，返回false，只有能走通的路才能被标记位true</li><li>如果当前坐标的字符与目标字符相同，且当前坐标未被访问，目标字符在数组中正好是最后一个，说明已经找到了所有的字符，直接返回true</li></ol><p>初始代码：（极其混乱，注释部分过多代码冗余）</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-keyword">char</span>[] c;<br>    <span class="hljs-keyword">char</span>[][] tem;<br>    <span class="hljs-keyword">boolean</span>[][] flag1;<br>    <span class="hljs-keyword">int</span> length;<br>    <span class="hljs-keyword">int</span> M=<span class="hljs-number">0</span>,N=<span class="hljs-number">0</span>;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">exist</span><span class="hljs-params">(<span class="hljs-keyword">char</span>[][] board, String word)</span> </span>&#123;<br>        c = word.toCharArray();<br>        length = c.length;<br>        tem = board;<br>        <span class="hljs-keyword">int</span> m = board.length; <span class="hljs-comment">//hang</span><br>        <span class="hljs-keyword">int</span> n = board[<span class="hljs-number">0</span>].length; <span class="hljs-comment">//lies</span><br>        M = m;<br>        N = n; <br>        <span class="hljs-keyword">boolean</span>[][] flag = <span class="hljs-keyword">new</span> <span class="hljs-keyword">boolean</span>[m][n];<br>        <span class="hljs-keyword">boolean</span> ans = <span class="hljs-keyword">false</span>;<br>        flag1 = flag;<br>        <span class="hljs-keyword">if</span>(m*n&lt;length) <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>;i&lt;m;i++)&#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j =<span class="hljs-number">0</span>;j&lt;n;j++)&#123;<br>                <span class="hljs-keyword">if</span>(tem[i][j]==c[<span class="hljs-number">0</span>])&#123;<br>                     ans = find(i,j,<span class="hljs-number">0</span>);<br>                     <span class="hljs-keyword">if</span>(ans == <span class="hljs-keyword">true</span>)  <span class="hljs-keyword">return</span> ans;<br>                    <span class="hljs-comment">//  for(int a = 0;a&lt;m;a++)&#123;//因为在递归函数里若当前路径没有找到，就会取消标记，因此不用再将所有的标记清除，这会做很多无用功，浪费很多时间</span><br>                    <span class="hljs-comment">//      for(int b = 0;b&lt;n;b++)&#123;</span><br>                    <span class="hljs-comment">//          flag1[a][b] = false;</span><br>                    <span class="hljs-comment">//      &#125;</span><br>                    <span class="hljs-comment">//  &#125;</span><br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">find</span><span class="hljs-params">(<span class="hljs-keyword">int</span> i,<span class="hljs-keyword">int</span> j,<span class="hljs-keyword">int</span> x)</span></span>&#123;<br>        <span class="hljs-keyword">boolean</span> ans =<span class="hljs-keyword">false</span>;<br>        <span class="hljs-keyword">if</span>(i&gt;=<span class="hljs-number">0</span>&amp;&amp;i&lt;M&amp;&amp;j&gt;=<span class="hljs-number">0</span>&amp;&amp;j&lt;N)&#123;<br>            <span class="hljs-keyword">if</span>(tem[i][j]==c[x]&amp;&amp;flag1[i][j]==<span class="hljs-keyword">false</span>)&#123;<br>                flag1[i][j] = <span class="hljs-keyword">true</span>;<br>                <span class="hljs-keyword">if</span>(x==length-<span class="hljs-number">1</span>) <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>                <span class="hljs-comment">// if(i==0&amp;&amp;j==0)&#123;</span><br>                <span class="hljs-comment">//     ans = find(i+1,j,x+1)||find(i,j+1,x+1);</span><br>                <span class="hljs-comment">//     if(ans == true) return true;</span><br>                <span class="hljs-comment">//     flag1[i][j] = false;</span><br>                <span class="hljs-comment">//    // return false;</span><br>                <span class="hljs-comment">//  &#125;</span><br>                <span class="hljs-comment">// if(i==0&amp;&amp;j!=0)&#123;  //因为在一开始会判断坐标是否处于正常的范围，因此不需要在针对坐标做分类处理了，统一去找上下所有即可</span><br>                <span class="hljs-comment">//   ans = find(i,j-1,x+1)||find(i,j+1,x+1)||find(i+1,j,x+1);</span><br>                <span class="hljs-comment">//   if(ans == true) return true;</span><br>                <span class="hljs-comment">//   flag1[i][j] = false;</span><br>                <span class="hljs-comment">//   //return false;</span><br>                <span class="hljs-comment">// &#125;</span><br>                <span class="hljs-comment">// if(i!=0&amp;&amp;j==0)&#123;</span><br>                <span class="hljs-comment">//    ans = find(i-1,j,x+1)||find(i+1,j,x+1)||find(i,j+1,x+1);</span><br>                <span class="hljs-comment">//    if(ans == true) return true;</span><br>                <span class="hljs-comment">//     flag1[i][j] = false;</span><br>                <span class="hljs-comment">//     //return false;</span><br>                <span class="hljs-comment">// &#125;</span><br>                <span class="hljs-comment">// if(i!=0&amp;&amp;j!=0)&#123;</span><br>                ans =  find(i-<span class="hljs-number">1</span>,j,x+<span class="hljs-number">1</span>)||find(i+<span class="hljs-number">1</span>,j,x+<span class="hljs-number">1</span>)||find(i,j+<span class="hljs-number">1</span>,x+<span class="hljs-number">1</span>)||find(i,j-<span class="hljs-number">1</span>,x+<span class="hljs-number">1</span>);<br>                <span class="hljs-keyword">if</span>(ans == <span class="hljs-keyword">true</span>) <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>                flag1[i][j] = <span class="hljs-keyword">false</span>;<br>                <span class="hljs-comment">//return false;</span><br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>        &#125;<br> &#125;<br></code></pre></div></td></tr></table></figure><p>最终版：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-keyword">char</span>[] c;<br>    <span class="hljs-keyword">char</span>[][] tem;<br>    <span class="hljs-keyword">boolean</span>[][] flag1;<br>    <span class="hljs-keyword">int</span> length;<br>    <span class="hljs-keyword">int</span> M=<span class="hljs-number">0</span>,N=<span class="hljs-number">0</span>;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">exist</span><span class="hljs-params">(<span class="hljs-keyword">char</span>[][] board, String word)</span> </span>&#123;<br>        c = word.toCharArray();<br>        length = c.length;<br>        tem = board;<br>        <span class="hljs-keyword">int</span> m = board.length; <span class="hljs-comment">//hang</span><br>        <span class="hljs-keyword">int</span> n = board[<span class="hljs-number">0</span>].length; <span class="hljs-comment">//lies</span><br>        M = m;<br>        N = n; <span class="hljs-comment">//保存一些全局变量，包括矩阵的行数和列数，目标字符串数组，标记矩阵等等</span><br>        <span class="hljs-keyword">boolean</span>[][] flag = <span class="hljs-keyword">new</span> <span class="hljs-keyword">boolean</span>[m][n];<br>        <span class="hljs-keyword">boolean</span> ans = <span class="hljs-keyword">false</span>;<br>        flag1 = flag;<br>        <span class="hljs-keyword">if</span>(m*n&lt;length) <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>;i&lt;m;i++)&#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j =<span class="hljs-number">0</span>;j&lt;n;j++)&#123;<br>                <span class="hljs-keyword">if</span>(tem[i][j]==c[<span class="hljs-number">0</span>])&#123;  <span class="hljs-comment">//刚开始找第一个字符的时候，应该尝试对所有与目标字符串第一个字符相等的坐标</span><br>                     ans = find(i,j,<span class="hljs-number">0</span>);<br>                     <span class="hljs-keyword">if</span>(ans == <span class="hljs-keyword">true</span>)  <span class="hljs-keyword">return</span> ans;<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">find</span><span class="hljs-params">(<span class="hljs-keyword">int</span> i,<span class="hljs-keyword">int</span> j,<span class="hljs-keyword">int</span> x)</span></span>&#123;<br>        <span class="hljs-keyword">boolean</span> ans =<span class="hljs-keyword">false</span>;<br>        <span class="hljs-keyword">if</span>(i&gt;=<span class="hljs-number">0</span>&amp;&amp;i&lt;M&amp;&amp;j&gt;=<span class="hljs-number">0</span>&amp;&amp;j&lt;N)&#123;<br>            <span class="hljs-keyword">if</span>(tem[i][j]==c[x]&amp;&amp;flag1[i][j]==<span class="hljs-keyword">false</span>)&#123;<br>                flag1[i][j] = <span class="hljs-keyword">true</span>;<br>                <span class="hljs-keyword">if</span>(x==length-<span class="hljs-number">1</span>) <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>                ans =  find(i-<span class="hljs-number">1</span>,j,x+<span class="hljs-number">1</span>)||find(i+<span class="hljs-number">1</span>,j,x+<span class="hljs-number">1</span>)||find(i,j+<span class="hljs-number">1</span>,x+<span class="hljs-number">1</span>)||find(i,j-<span class="hljs-number">1</span>,x+<span class="hljs-number">1</span>);<br>                <span class="hljs-keyword">if</span>(ans == <span class="hljs-keyword">true</span>) <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>                flag1[i][j] = <span class="hljs-keyword">false</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>   &#125;<br> &#125;<br></code></pre></div></td></tr></table></figure><h2 id="2021-11-15"><a href="#2021-11-15" class="headerlink" title="2021-11-15"></a>2021-11-15</h2><ul><li><h4 id="剑指offer-05-替换空格-very-easy"><a href="#剑指offer-05-替换空格-very-easy" class="headerlink" title="剑指offer 05.替换空格    very easy"></a>剑指offer 05.替换空格    very easy</h4></li></ul><p><img src="/2021/11/15/%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/%E5%89%91%E6%8C%8705.png" srcset="/img/loading.gif" lazyload alt="剑指05"></p><p>对于java的string类型，它具有不可变型，使用StringBuilder类型保存结果，遍历s的每个        字符，当遇到空格使，向StringBuilder中加入“%20”，其他情况，加入当前字符。</p><p>主要是好久不做，相关API忘记了。。。</p><p>这里需要复习一下String，StringBuilder，和Stringbuffer的异同。</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">replaceSpace</span><span class="hljs-params">(String s)</span> </span>&#123;<br>            StringBuilder  ans = <span class="hljs-keyword">new</span> StringBuilder();<br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">char</span> c:s.toCharArray())<br>            &#123;<br>                <span class="hljs-keyword">if</span>(c==<span class="hljs-string">&#x27; &#x27;</span>)&#123;<br>                    ans.append(<span class="hljs-string">&quot;%20&quot;</span>);<br>                &#125;<span class="hljs-keyword">else</span>&#123;<br>                    ans.append(c);<br>                &#125;<br>            &#125; <br>            <span class="hljs-keyword">return</span> ans.toString();<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><ul><li><h4 id="剑指offer-07-重建二叉树"><a href="#剑指offer-07-重建二叉树" class="headerlink" title="剑指offer 07.重建二叉树"></a>剑指offer 07.重建二叉树</h4><p><img src="/2021/11/15/%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/%E5%89%91%E6%8C%8707.png" srcset="/img/loading.gif" lazyload alt="剑指07"></p></li></ul><p>关于本题的关键点：</p><ol><li>前序遍历第一个就是根节点，中序遍历的根节点左边就是左子树，右边就是右子树</li><li>前序遍历的结构是[根节点，左子树，右子树]，且左子树和右子树部分的第一个分别是他们的根节点</li><li>中序遍历的结构是[左子树，根节点，右子树]</li><li>所以可以根据这样的结构去递归处理左子树和右子树</li></ol><p>难点主要在于递归的结构，在递归过程中需要传递的变量值，这里使用一个HashMap来存储中序遍历中每个节点值和它在中序遍历的数组中的位置，这样可以在O(1)的条件下获取一个值在中序遍历中的索引。</p><p>递归算法分析：</p><ul><li><p>递归参数：</p><p>root_pre_id：表示根节点在前序遍历中的索引，根据这个id可以获得当前树根节点的值，再根据根节点的值，可以在map中得到在根节点在中序遍历中的索引.</p><p>in_left：当前树在中序遍历中的左边界</p><p>in_right：当前树在中序遍历中的右边界</p><p>根据上述三个参树，每次递归都可以计算出左节点或右节点在前序遍历中的索引，以及左右子树各自的左右边界。</p></li><li><p>终止条件：in_left&gt;in_right，说明已将越过了叶子结点，返回null</p></li><li><p>每一次递归：</p><ol><li><p>计算根据root_pre_id，得到根节点的值，建立根节点</p></li><li><p>根据根节点的值，得到根节点在中序遍历中的索引root_in_id</p></li><li><p>递归左右子树：</p><p>递归变量：</p><p>左子树：左子树根节点在前序遍历中的索引就是当前根节点在前序中的索引+1，即root_pre_id + 1,左子树在中序中的左边界就是当前的左边界，即in_left+1，右边界为当前根节点在中序中的索引-1，即root_in_id - 1</p><p>右子树：右子树的根节点在前序遍历中的索引就是当前根节点在前序中的索引加上左子树的节点数量+1，即root_pre_id+(root_in_id - in_left) + 1，右子树的左边界为root_in_id +1，右边界为当前的右边界in_right</p></li><li><p>返回root</p></li></ol></li></ul><p>代码如下：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Definition for a binary tree node.</span><br><span class="hljs-comment"> * public class TreeNode &#123;</span><br><span class="hljs-comment"> *     int val;</span><br><span class="hljs-comment"> *     TreeNode left;</span><br><span class="hljs-comment"> *     TreeNode right;</span><br><span class="hljs-comment"> *     TreeNode(int x) &#123; val = x; &#125;</span><br><span class="hljs-comment"> * &#125;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span>[] pre;<br>    <span class="hljs-keyword">private</span> HashMap&lt;Integer,Integer&gt; id_index = <span class="hljs-keyword">new</span> HashMap&lt;Integer,Integer&gt;();<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> TreeNode <span class="hljs-title">buildTree</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] preorder, <span class="hljs-keyword">int</span>[] inorder)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.pre = preorder;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>;i&lt;inorder.length;i++)&#123;<br>            id_index.put(inorder[i],i);  <span class="hljs-comment">//使用map保存中序数组中的值与索引，避免每一次都遍历</span><br>        &#125;<br>        <span class="hljs-keyword">return</span> build(<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,inorder.length-<span class="hljs-number">1</span>);<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> TreeNode <span class="hljs-title">build</span><span class="hljs-params">(<span class="hljs-keyword">int</span> root_pre_id,<span class="hljs-keyword">int</span> in_left,<span class="hljs-keyword">int</span> in_right)</span></span>&#123;<br>        <span class="hljs-keyword">if</span>(in_left &gt; in_right)&#123;  <span class="hljs-comment">//终止条件</span><br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>        &#125;<br>        TreeNode root = <span class="hljs-keyword">new</span> TreeNode();  <span class="hljs-comment">//创建当前的根节点</span><br>        root.val = pre[root_pre_id]; <span class="hljs-comment">//获取根节点的值</span><br>        <span class="hljs-keyword">int</span> root_in_id = id_index.get(root.val);  <span class="hljs-comment">//获取根节点在中序中的索引</span><br>        root.left = build(root_pre_id+<span class="hljs-number">1</span>,  in_left,  root_in_id-<span class="hljs-number">1</span>); <span class="hljs-comment">//递归左右子树(根节点的前序索引，中序左边界，中序右边界)</span><br>        root.right = build(root_pre_id+(root_in_id-in_left)+<span class="hljs-number">1</span>,  root_in_id+<span class="hljs-number">1</span>,  in_right);<br>        <span class="hljs-keyword">return</span> root;       <span class="hljs-comment">//根节点前序索引+左子树节点数+1</span><br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><ul><li><h4 id="剑指offer-09-用两个栈实现队列"><a href="#剑指offer-09-用两个栈实现队列" class="headerlink" title="剑指offer 09 用两个栈实现队列"></a>剑指offer 09 用两个栈实现队列</h4><p>思路：先用第一个栈保存数据，从队列尾部添加数据，就是把数据push到第一个栈中，当需要从队列头部取出数据时，现将第一个栈中的数据全部pop到第二个栈中，这样第二个栈的栈顶，就是队列头部的元素，pop出栈顶，再把剩下的元素在pop+push导到第一个站里面</p></li><li><h4 id="剑指offer-10-青蛙跳台阶"><a href="#剑指offer-10-青蛙跳台阶" class="headerlink" title="剑指offer 10 青蛙跳台阶"></a>剑指offer 10 青蛙跳台阶</h4><p>简单DP</p></li></ul>]]></content>
    
    
    <categories>
      
      <category>算法与刷题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>刷题记录</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>四.Redis数据类型</title>
    <link href="/2021/11/11/%E5%9B%9B-Redis%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"/>
    <url>/2021/11/11/%E5%9B%9B-Redis%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</url>
    
    <content type="html"><![CDATA[<h1 id="Redis数据类型"><a href="#Redis数据类型" class="headerlink" title="Redis数据类型"></a>Redis数据类型</h1><h2 id="一-String字符串类型"><a href="#一-String字符串类型" class="headerlink" title="一.String字符串类型"></a>一.String字符串类型</h2><figure class="highlight clean"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs clean">########################################################################<br><span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>:<span class="hljs-number">6379</span>&gt; keys *<br>(empty array)<br><span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>:<span class="hljs-number">6379</span>&gt; set key1 v1  #设置key1的值为v1<br>OK<br><span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>:<span class="hljs-number">6379</span>&gt; get key1 #获取key1的值<br><span class="hljs-string">&quot;v1&quot;</span><br><span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>:<span class="hljs-number">6379</span>&gt; exists key1  #判断是否存在名为key1的键<br>(integer) <span class="hljs-number">1</span><br><span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>:<span class="hljs-number">6379</span>&gt; append key1 <span class="hljs-string">&quot;hello&quot;</span>  #在key1上追加字符串，若key不存在，相当于set key value<br>(integer) <span class="hljs-number">7</span><br><span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>:<span class="hljs-number">6379</span>&gt; keys *<br><span class="hljs-number">1</span>) <span class="hljs-string">&quot;key1&quot;</span><br><span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>:<span class="hljs-number">6379</span>&gt; append key2 <span class="hljs-string">&quot;abcde&quot;</span> #key2不存在，因此新建key2，并设置value<br>(integer) <span class="hljs-number">5</span><br><span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>:<span class="hljs-number">6379</span>&gt; keys *<br><span class="hljs-number">1</span>) <span class="hljs-string">&quot;key2&quot;</span><br><span class="hljs-number">2</span>) <span class="hljs-string">&quot;key1&quot;</span><br><span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>:<span class="hljs-number">6379</span>&gt; strlen key1  #获取key的长度<br>(integer) <span class="hljs-number">7</span><br><span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>:<span class="hljs-number">6379</span>&gt; append key1 <span class="hljs-string">&quot;12345&quot;</span><br>(integer) <span class="hljs-number">12</span><br><span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>:<span class="hljs-number">6379</span>&gt; strlen key1<br>(integer) <span class="hljs-number">12</span><br><span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>:<span class="hljs-number">6379</span>&gt; get key1<br><span class="hljs-string">&quot;v1hello12345&quot;</span><br>#########################################################################<br><span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>:<span class="hljs-number">6379</span>&gt; set views <span class="hljs-number">0</span><br>OK<br><span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>:<span class="hljs-number">6379</span>&gt; get views<br><span class="hljs-string">&quot;0&quot;</span><br><span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>:<span class="hljs-number">6379</span>&gt; incr views #自增<span class="hljs-number">1</span><br>(integer) <span class="hljs-number">1</span><br><span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>:<span class="hljs-number">6379</span>&gt; get views<br><span class="hljs-string">&quot;1&quot;</span><br><span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>:<span class="hljs-number">6379</span>&gt; decr views<br>(integer) <span class="hljs-number">0</span><br><span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>:<span class="hljs-number">6379</span>&gt; get views<br><span class="hljs-string">&quot;0&quot;</span><br><span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>:<span class="hljs-number">6379</span>&gt; decr views #自减<span class="hljs-number">1</span><br>(integer) <span class="hljs-number">-1</span><br><span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>:<span class="hljs-number">6379</span>&gt; get views<br><span class="hljs-string">&quot;-1&quot;</span><br><span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>:<span class="hljs-number">6379</span>&gt; incrby views <span class="hljs-number">10</span> #设置步长，相当于views = views+<span class="hljs-number">10</span><br>(integer) <span class="hljs-number">9</span><br><span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>:<span class="hljs-number">6379</span>&gt; get views<br><span class="hljs-string">&quot;9&quot;</span><br><span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>:<span class="hljs-number">6379</span>&gt; decrby views <span class="hljs-number">8</span> #设置步长，相当于views = views<span class="hljs-number">-10</span><br>(integer) <span class="hljs-number">1</span><br><span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>:<span class="hljs-number">6379</span>&gt; get views<br><span class="hljs-string">&quot;1&quot;</span><br>################################################################<br>#获取一个字符串指定范围的字串  getrange key start end  <span class="hljs-comment">//end为负的就获取全部串</span><br><span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>:<span class="hljs-number">6379</span>&gt; set key1 helloworld<br>OK<br><span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>:<span class="hljs-number">6379</span>&gt; get key1<br><span class="hljs-string">&quot;helloworld&quot;</span><br><span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>:<span class="hljs-number">6379</span>&gt; getrange key1 <span class="hljs-number">0</span> <span class="hljs-number">3</span>  #截取字串[<span class="hljs-number">0</span>,<span class="hljs-number">3</span>]<br><span class="hljs-string">&quot;hell&quot;</span><br><span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>:<span class="hljs-number">6379</span>&gt; getrange key1 <span class="hljs-number">0</span> <span class="hljs-number">-1</span><br><span class="hljs-string">&quot;helloworld&quot;</span><br><br>#替换指定范围的字串  setrange key offset new_value 从指定的偏移量开始将key的值替换为new_value<br><span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>:<span class="hljs-number">6379</span>&gt; set key2 abcdefg<br>OK<br><span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>:<span class="hljs-number">6379</span>&gt; get key2<br><span class="hljs-string">&quot;abcdefg&quot;</span><br><span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>:<span class="hljs-number">6379</span>&gt; setrange key2 <span class="hljs-number">2</span> <span class="hljs-number">123</span><br>(integer) <span class="hljs-number">7</span><br><span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>:<span class="hljs-number">6379</span>&gt; get key2<br><span class="hljs-string">&quot;ab123fg&quot;</span><br>###############################################################<br>#setex (set <span class="hljs-keyword">with</span> expire) 设置过期时间<br>#setnx (set <span class="hljs-keyword">if</span> not exist) 如果不存在再设置<br><span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>:<span class="hljs-number">6379</span>&gt; setex key3 <span class="hljs-number">30</span> <span class="hljs-string">&quot;hello&quot;</span>  <span class="hljs-comment">//设置keys的值为hello，且过期时间为30秒</span><br>OK<br><span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>:<span class="hljs-number">6379</span>&gt; get key3 <span class="hljs-comment">//未达到过期时间，可以查到key3</span><br><span class="hljs-string">&quot;hello&quot;</span><br><span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>:<span class="hljs-number">6379</span>&gt; ttl key3 <span class="hljs-comment">//key3的剩余时间</span><br>(integer) <span class="hljs-number">23</span><br><span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>:<span class="hljs-number">6379</span>&gt; setnx mykey <span class="hljs-number">123456</span>  <span class="hljs-comment">//如果mykey不存在，设置mykey的值</span><br>OK<br><span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>:<span class="hljs-number">6379</span>&gt; ttl key3  <span class="hljs-comment">//key3已经过期</span><br>(integer) <span class="hljs-number">-2</span><br><span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>:<span class="hljs-number">6379</span>&gt; keys * <span class="hljs-comment">//查看所有keys，因为key3已将过期，所以不存在key3</span><br><span class="hljs-number">1</span>) <span class="hljs-string">&quot;mykey&quot;</span><br><span class="hljs-number">2</span>) <span class="hljs-string">&quot;key2&quot;</span><br><span class="hljs-number">3</span>) <span class="hljs-string">&quot;key1&quot;</span><br><span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>:<span class="hljs-number">6379</span>&gt; setnx mykey <span class="hljs-string">&quot;566868&quot;</span> <span class="hljs-comment">//如果mykey不存在，那么设置值为566868</span><br>(integer) <span class="hljs-number">0</span><br><span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>:<span class="hljs-number">6379</span>&gt; get mykey <span class="hljs-comment">//因为mykey一直存在，所以上面的setnx没有成功，返回值为0，</span><br><span class="hljs-string">&quot;123456&quot;</span>                  <span class="hljs-comment">//mykey还是原来的值</span><br>###############################################################<br>mset key1 value1 key2 value2 ...... 批量设置键值<br>mget key1 key2......批量获取键值<br><span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>:<span class="hljs-number">6379</span>&gt; mset k1 v1 k2 v2 k3 v3<br>OK<br><span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>:<span class="hljs-number">6379</span>&gt; keys *<br><span class="hljs-number">1</span>) <span class="hljs-string">&quot;k3&quot;</span><br><span class="hljs-number">2</span>) <span class="hljs-string">&quot;k2&quot;</span><br><span class="hljs-number">3</span>) <span class="hljs-string">&quot;k1&quot;</span><br><span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>:<span class="hljs-number">6379</span>&gt; mget k1 k2 k3<br><span class="hljs-number">1</span>) <span class="hljs-string">&quot;v1&quot;</span><br><span class="hljs-number">2</span>) <span class="hljs-string">&quot;v2&quot;</span><br><span class="hljs-number">3</span>) <span class="hljs-string">&quot;v3&quot;</span><br><span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>:<span class="hljs-number">6379</span>&gt; msetnx k1 m1 k4 v4  <span class="hljs-comment">//mset是原子性操作，要么全部成功，要么全部失败，类似事务，因为k1存在，set失败，所以k4的设置也失败，下面看到返回值为0，key4为null，k1的值不变</span><br>(integer) <span class="hljs-number">0</span><br><span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>:<span class="hljs-number">6379</span>&gt; get k4<br>(nil)<br><span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>:<span class="hljs-number">6379</span>&gt; get k1<br><span class="hljs-string">&quot;v1&quot;</span><br><br>##设置一个对象<br>set user:<span class="hljs-number">1</span> &#123;name:zhangsan,age:<span class="hljs-number">18</span>&#125;  #设置一个user:<span class="hljs-number">1</span>对象的值为json字符串来保存一个对象<br>#这里的key很巧妙，user:&#123;uid&#125;:&#123;属性&#125;,如此设置在redis中完全ok<br><span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>:<span class="hljs-number">6379</span>&gt; mset user:<span class="hljs-number">1</span>:name zhangsan  user:<span class="hljs-number">1</span>:age <span class="hljs-number">18</span><br>OK    <span class="hljs-comment">//他把user:1:name当做一个key来存，user:1:age当做一个key来存</span><br><span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>:<span class="hljs-number">6379</span>&gt; mget user:<span class="hljs-number">1</span>:name user:<span class="hljs-number">1</span>:age<br><span class="hljs-number">1</span>) <span class="hljs-string">&quot;zhangsan&quot;</span><br><span class="hljs-number">2</span>) <span class="hljs-string">&quot;18&quot;</span><br><br><span class="hljs-comment">//getset 组合命令，先获取再设置</span><br><br><span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>:<span class="hljs-number">6379</span>&gt; getset db redis   <span class="hljs-comment">//如果事先没有值，则返回null</span><br>(nil)<br><span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>:<span class="hljs-number">6379</span>&gt; getset db mongodb  <span class="hljs-comment">//如果当前存在值，则返回当前值在设置</span><br><span class="hljs-string">&quot;redis&quot;</span><br><span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>:<span class="hljs-number">6379</span>&gt; get db<br><span class="hljs-string">&quot;mongodb&quot;</span><br>###################################################<br></code></pre></div></td></tr></table></figure><p>String类的使用场景： value可以使字符串，还可以是数字</p><ul><li>做计数器</li><li>统计多单位的数量  uid:123455:follower 0</li><li>粉丝数</li><li>对象缓存存储</li></ul><h2 id="二-List类型"><a href="#二-List类型" class="headerlink" title="二.List类型"></a>二.List类型</h2><p>在redis中，list可以当做栈，队列，双端队列，或阻塞队列来使用</p><p>所有有关list的命令，都是字母’L’开头的</p><p>基本命令使用：</p><figure class="highlight xquery"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xquery">key为操作的列表的名字<br>- LPUSH<span class="hljs-built_in"> key</span> <span class="hljs-keyword">value</span> [<span class="hljs-keyword">value</span>....]   从队列的左边入队一个或多个元素<br>ps: 在队列中，编号是从左到右为<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>，如果前面LPUSH一个元素后，他的编号为<span class="hljs-number">0</span>，继续LPUSH一个元素，此时他的编号变成了<span class="hljs-number">1</span><br>- LPUSHX<span class="hljs-built_in"> key</span> <span class="hljs-keyword">value</span>如果队列存在，从队列的左边入队一个元素<br>- LRANGE<span class="hljs-built_in"> key</span> <span class="hljs-keyword">start</span> <span class="hljs-keyword">end</span>从列表中取出指定编号范围内的元素，<span class="hljs-number">0</span>，-<span class="hljs-number">1</span>为取出所有<br>- LREM<span class="hljs-built_in"> key</span><span class="hljs-built_in"> count</span> <span class="hljs-keyword">value</span>从列表中删除元素，注意元素的<span class="hljs-keyword">value</span>必须明确指定<span class="hljs-built_in">，count</span>为删除的<span class="hljs-keyword">value</span>的个数<br>- LSET<span class="hljs-built_in"> key</span> index <span class="hljs-keyword">value</span>设置列表中编号为index的元素的值<br>- LTRIM<span class="hljs-built_in"> key</span> <span class="hljs-keyword">start</span> <span class="hljs-keyword">end</span>修建指定范围内的数据，语句执行结束后，原来<span class="hljs-built_in">的key</span>中只保存范围内的值，其他的都被删除<br>- RPOP<span class="hljs-built_in"> key</span>从队列的右边出队一个元素<br>- RPOPLPUSH source destination 删除source列表中最后一个元素(pop出最右边的)，并追加到另一个列表(并加到另一个队列左边)<br>- RPUSH<span class="hljs-built_in"> key</span> <span class="hljs-keyword">value</span> [<span class="hljs-keyword">value</span>....] 从队列的右边入队一个或多个元素<br>- RPUSHX<span class="hljs-built_in"> key</span> <span class="hljs-keyword">value</span> 如果队列存在，从队列的右边入队一个元素<br>- LLEN<span class="hljs-built_in"> key</span> 获取列<span class="hljs-built_in">表key</span>的元素个数<br>- LINSERT<span class="hljs-built_in"> key</span> [BEFORE/AFTER] pivot <span class="hljs-keyword">value</span> 在列<span class="hljs-built_in">表key</span>的元素pivot前面或后面插入元素<span class="hljs-keyword">value</span><br></code></pre></div></td></tr></table></figure><p>如果key不存在，push时创建列表</p><p>如果移除了key的所有值，key为空链表，也相当于不存在</p><p>在llist的两边插入或改动元素时，效率最高，修改中间元素或插到中间，效率相低</p><p>适用场景：消息排队，消息队列(LPUSH,RPOP)，栈(LPUSH,LPOP)</p><h2 id="三-Set类型"><a href="#三-Set类型" class="headerlink" title="三.Set类型"></a>三.Set类型</h2><p>与java中的set类似，不允许元素重复</p><p>与set相关的命令，都以字母‘S’开头</p><p>基本命令：</p><figure class="highlight maxima"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs maxima">- SADD <span class="hljs-built_in">key</span> <span class="hljs-built_in">member</span> [<span class="hljs-built_in">member</span>...]添加一个或多个元素到集合中<br>- SCARD <span class="hljs-built_in">key</span>获取集合中的元素数量<br>- SISMEMBER <span class="hljs-built_in">key</span> <span class="hljs-built_in">member</span> 判断<span class="hljs-built_in">member</span>元素是否在集合<span class="hljs-built_in">key</span>中<br>- SMEMBERS <span class="hljs-built_in">key</span>获取集合中的所有元素<br>- SMOVE source destination <span class="hljs-built_in">member</span>把集合source中的一个元素<span class="hljs-built_in">member</span>移动到另一个集合中，source中将不再有该<span class="hljs-built_in">member</span><br>- SREM <span class="hljs-built_in">key</span> <span class="hljs-built_in">member</span> [<span class="hljs-built_in">member</span>...]删除集合中的一个或多个元素<br>- SPOP <span class="hljs-built_in">key</span> [count]删除并获取集合中的一个元素，由于元素时无序的，因此<span class="hljs-built_in">pop</span>出哪一个不知道，count指定个数<br>- SRANDMEMBER <span class="hljs-built_in">key</span> [count]从集合中随机取获取一个元素<br>- SDIFF key1 key2 求key1与key2的差集，即key1中存在，但是key2中不存在的<br>- SINTER <span class="hljs-built_in">key</span> [<span class="hljs-built_in">key</span>...]求集合间的交集<br>- SINTERSTORE destination <span class="hljs-built_in">key</span> [<span class="hljs-built_in">key</span>...]求集合间的交集,并保存新集合destination中<br>- SUNION <span class="hljs-built_in">key</span> [<span class="hljs-built_in">key</span>...]求集合间的并集<br>- SUNIONSTORE destination <span class="hljs-built_in">key</span> [<span class="hljs-built_in">key</span>...]求集合间的并集,并保存新集合destination中<br></code></pre></div></td></tr></table></figure><p>适用场景：</p><p>微博中，将A用户的所有关注的人放在一个set集合中，将他的粉丝也放到一个集合中</p><p>共同关注求交集，求推荐好友等</p><h2 id="四-Hash-哈希"><a href="#四-Hash-哈希" class="headerlink" title="四.Hash(哈希)"></a>四.Hash(哈希)</h2><p>Map集合，key为一个集合，存放的元素为kv对</p><p>和string的集合差不对，只不过string集合存放单个value，Map集合存放kv</p><p>基本命令：</p><figure class="highlight gauss"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs gauss">- HSET <span class="hljs-built_in">key</span> field value设置集合<span class="hljs-built_in">key</span>中的kv对<br>- HSETNX <span class="hljs-built_in">key</span> field value如果当前的kv不存在，设置kv<br>- HMSET <span class="hljs-built_in">key</span> field value [field value....]批量设置集合<span class="hljs-built_in">key</span>中的kv对<br>- HGET <span class="hljs-built_in">key</span> field获取集合<span class="hljs-built_in">key</span>中键为field的value<br>- HGETALL <span class="hljs-built_in">key</span>读取<span class="hljs-built_in">key</span>中的所有域和值，field和value都有<br>- HMGET <span class="hljs-built_in">key</span> field [field...]批量获取集合<span class="hljs-built_in">key</span>中键为field的value<br>- HLEN <span class="hljs-built_in">key</span>获取<span class="hljs-built_in">key</span>集合中所有字段的数量<br>- HKEYS <span class="hljs-built_in">key</span> 获取<span class="hljs-built_in">key</span>中的所有field字段<br>- HVALS <span class="hljs-built_in">key</span> 获取<span class="hljs-built_in">key</span>中的所有value值<br>- HEXISTS <span class="hljs-built_in">key</span> field   判断field是否存在于<span class="hljs-built_in">key</span>中<br>- HDEL <span class="hljs-built_in">key</span> field [field...]    删除一个或多个field，对应的value也会删除<br>- HINCRBY <span class="hljs-built_in">key</span> field increment将<span class="hljs-built_in">key</span>中指定域的值(value)增加给定的数字<br>- HINCRBYFLOAT <span class="hljs-built_in">key</span> field increment将<span class="hljs-built_in">key</span>中指定域的值(value)增加给定的浮点数<br></code></pre></div></td></tr></table></figure><p>相对于String类型，hash更适合对象的存储，string更适合字符串的存储，当然也可以用string存储对象</p><h2 id="五-Zset-有序集合"><a href="#五-Zset-有序集合" class="headerlink" title="五.Zset(有序集合)"></a>五.Zset(有序集合)</h2><p>在set的基础上，增加了一个score值     set key value    zset key  score  value</p><p>基本命令:</p><figure class="highlight maxima"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs maxima">- ZADD <span class="hljs-built_in">key</span> score <span class="hljs-built_in">member</span> [score <span class="hljs-built_in">member</span>....]添加一个或多个成员到一个有序的set，如果已经存在，那么更新分数<br>- ZCARD <span class="hljs-built_in">key</span>  获取一个排序集合中成员的数量<br>- ZCOUNT <span class="hljs-built_in">key</span> <span class="hljs-built_in">min</span> <span class="hljs-built_in">max</span>返回分数在指定范围内的成员数量<br>- ZINCRBY <span class="hljs-built_in">key</span> increment <span class="hljs-built_in">member</span>  将指定的成员的score增加increment<br>- ZRANGE <span class="hljs-built_in">key</span> start stop 根据指定的index返回范围内的成员<br>- ZRANK <span class="hljs-built_in">key</span> <span class="hljs-built_in">member</span> 返回<span class="hljs-built_in">member</span>在排序集合中的索引<br>- ZREM <span class="hljs-built_in">key</span> <span class="hljs-built_in">member</span> 删除一个成员<br></code></pre></div></td></tr></table></figure><p>适用场景：</p><p>对set排序，班级成绩，工资排序，带权重的成员，排行榜等等</p><h2 id="六-三种特殊的类型"><a href="#六-三种特殊的类型" class="headerlink" title="六.三种特殊的类型"></a>六.三种特殊的类型</h2><ul><li>Geospatial 地理位置类型</li><li>Hyperlog 基数统计类型</li><li>Bitmap 位图场景</li></ul><p>写吐了，需要用的时候还是查官方文档吧。。。🐶</p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="http://www.redis.cn/">redis中文官方网站</a></p><p><a href="https://redis.io/commands">Command reference – Redis</a></p>]]></content>
    
    
    <categories>
      
      <category>Redis</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Redis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>三.Redis基础</title>
    <link href="/2021/11/10/Redis%E5%9F%BA%E7%A1%80/"/>
    <url>/2021/11/10/Redis%E5%9F%BA%E7%A1%80/</url>
    
    <content type="html"><![CDATA[<h1 id="Redis基础"><a href="#Redis基础" class="headerlink" title="Redis基础"></a>Redis基础</h1><h2 id="基础操作"><a href="#基础操作" class="headerlink" title="基础操作"></a>基础操作</h2><ul><li>redis默认有16个数据库，在redis.conf中由<code>database 16</code>标识</li><li>默认使用第0个数据库，可以使用<code>select num</code>切换数据库</li><li>选择数据库后，使用命令<code>DBSIZE</code>可查看当前库中的数据量</li><li><code>keys *</code>,查看当前库中的所有key的name</li><li><code>flushdb</code>  清除当前库；<code>FLUSHALL</code>  清空全部数据库内容</li><li><code>EXIST  [key-name]</code>,判断一个key是否存在，存在返回1，不存在返回0</li><li><code>MOVE [key-name]</code>，移除一个key</li><li><code>set  [key-name]  [key-value]</code>，为一个key设置具体值</li><li><code>get  [key-name]</code>，获取key的具体值</li><li><code>EXPIRE  [key-name]  [int]</code>，设置key的过期时间</li><li><code>ttl  [key-name]</code>，查询key当前的剩余时间，过期之后get的值为nul</li><li><code>type  [key-name]</code>，查看当前key的类型</li></ul><h2 id="Redis是单线程的"><a href="#Redis是单线程的" class="headerlink" title="Redis是单线程的"></a>Redis是单线程的</h2><p>官方表示，Redis是基于内存操作，CPU不是Redis的性能瓶颈，Redis的瓶颈来源于机器的内存和网络带宽，既然可以使用单线程来实现，那就使用单线程。</p><p>Redis是由C编写，官方数据说明Redis的QPS可达到100000+，完全不比同样是KV存储的Memcached差。</p><h2 id="Redis为什么单线程还这么快？"><a href="#Redis为什么单线程还这么快？" class="headerlink" title="Redis为什么单线程还这么快？"></a>Redis为什么单线程还这么快？</h2><ul><li>误区1：高性能的服务器一定是多线程的？</li><li>误区2：多线程（存在CPU上下文切换成本）一定比单线程效率高？</li><li>核心：Redis是将所有的数据全部放在内存中的，所以使用单线程去操作的效率就是最高的，多线程反而会由于CPU上下文切换产生耗时操作。对于内存系统来说，如果没有上下文切换，那效率就是最高的，多次读写都在一个CPU上，在数据保存在内存上是，单线程就是最佳方案！</li></ul>]]></content>
    
    
    <categories>
      
      <category>Redis</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Redis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>二.Redis安装配置</title>
    <link href="/2021/11/10/Redis%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE/"/>
    <url>/2021/11/10/Redis%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE/</url>
    
    <content type="html"><![CDATA[<h1 id="Redis安装与配置"><a href="#Redis安装与配置" class="headerlink" title="Redis安装与配置"></a>Redis安装与配置</h1><ol><li><p>首先通过ssh远程连接服务器或在虚拟机中安装</p></li><li><p>执行命令：<code>wget https://download.redis.io/releases/redis-6.2.6.tar.gz</code>，下载压缩包到本地/opt目录下，如图：</p><p><img src="/2021/11/10/Redis%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE/1.png" srcset="/img/loading.gif" lazyload alt="1"></p></li><li><p> 执行命令:<code>tar  -zxvf  redis-6.2.6.tat.gz </code>,将压缩包解压大当前目录</p></li><li><p>解压完成之后，可进入解压目录查看当前文件：</p><p><img src="/2021/11/10/Redis%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE/2.png" srcset="/img/loading.gif" lazyload alt="2"></p><p>其中<code>redis.conf</code>为配置文件</p></li><li><p>基本环境安装与redis安装：</p><ul><li><p><code>yum install gcc-c++ </code>   安装 gcc 编译工具</p><p><img src="/2021/11/10/Redis%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE/3.png" srcset="/img/loading.gif" lazyload alt="3"></p></li><li><p>在redis目录下执行<code>make</code>编译安装redis，可能会花费一定的时间，因为要安装一系列的环境</p><p><img src="/2021/11/10/Redis%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE/4.png" srcset="/img/loading.gif" lazyload alt="4"></p><p><code>make</code>完成后会显示在src目录下增加了内容，可以继续使用<code>make</code>或<code>make install</code>进行检验，因为环境已经配置好，所以之后的<code>make</code>速度很快</p></li><li><p>redis的默认安装路径在<code>/usr/local/bin</code></p><p><img src="/2021/11/10/Redis%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE/5.png" srcset="/img/loading.gif" lazyload alt="5"></p></li></ul></li><li><p> 将redis的配置文件复制到当前的程序目录下，新建一个目录<code>kconfig</code>，保存配置文件</p></li></ol><p>   <img src="/2021/11/10/Redis%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE/6.png" srcset="/img/loading.gif" lazyload alt="6"></p><ol start="7"><li> redis默认不是后台启动的，需要修改配置文件，使用<code>vim  redis.conf</code>修改配置文件，将图中的选项由<code>no</code>修改为’yes’</li></ol><p>   <img src="/2021/11/10/Redis%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE/7.png" srcset="/img/loading.gif" lazyload alt="7"></p><ol start="8"><li><p>经过上述配置之后，便可以启动redis服务，使用命令<code>redis-server /kconfig/redis.conf </code></p><p><img src="/2021/11/10/Redis%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE/8.png" srcset="/img/loading.gif" lazyload alt="8"></p></li><li><p>启动redis客户端连接服务端，使用命令<code>redis-cli -p 6379</code>连接端口6379</p><p><img src="/2021/11/10/Redis%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE/9.png" srcset="/img/loading.gif" lazyload alt="9"></p></li><li><p>查看redis的进程运行状态，使用命令<code>ps -ef |grep redis</code></p><p><img src="/2021/11/10/Redis%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE/10.png" srcset="/img/loading.gif" lazyload alt="10"></p></li><li><p>如何关闭redis服务？在客户端执行<code>shutdown</code>命令关闭服务器，执行<code>exit</code>退出客户端</p><p><img src="/2021/11/10/Redis%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE/11.png" srcset="/img/loading.gif" lazyload alt="11"></p></li></ol><h1 id="redis-benchmark"><a href="#redis-benchmark" class="headerlink" title="redis-benchmark"></a>redis-benchmark</h1><p>​    官方自带的性能测试工具，如何使用? <code>redis-benchmark  [option]  [option value]</code>，该命令在redis的目录下执行，而不是客户端的内部之灵，具体参数如下：</p><p><img src="/2021/11/10/Redis%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE/13.png" srcset="/img/loading.gif" lazyload alt="12"></p><p>简单测试：</p><figure class="highlight apache"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs apache"><span class="hljs-comment"># 测试100个并发连接 100000个请求</span><br><span class="hljs-attribute">redis</span>-benchmark -h localhost -p <span class="hljs-number">6379</span> -c <span class="hljs-number">100</span> -n <span class="hljs-number">100000</span><br></code></pre></div></td></tr></table></figure><p>测试结果与分析：</p><p><img src="/2021/11/10/Redis%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE/12.png" srcset="/img/loading.gif" lazyload alt="13"></p><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><p><a href="https://www.runoob.com/redis/redis-tutorial.html">Redis 教程 | 菜鸟教程 (runoob.com)</a></p>]]></content>
    
    
    <categories>
      
      <category>Redis</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Redis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>一.Redis概述</title>
    <link href="/2021/11/09/Redis%E6%A6%82%E8%BF%B0/"/>
    <url>/2021/11/09/Redis%E6%A6%82%E8%BF%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="一-Redis概述"><a href="#一-Redis概述" class="headerlink" title="一.Redis概述"></a>一.Redis概述</h1><h2 id="1-数据库发展演变"><a href="#1-数据库发展演变" class="headerlink" title="1. 数据库发展演变"></a>1. 数据库发展演变</h2><ol><li><p>单机Mysql的年代：</p><p><img src="/2021/11/09/Redis%E6%A6%82%E8%BF%B0/1.png" srcset="/img/loading.gif" lazyload alt="1"></p><p>起初网站访问量并不是很大，单个数据库就可以满足需求，且当时更多的使用静态网页Html，服务器并没有很大的压力，但是可能存在很多瓶颈:</p><ul><li>数据量如果太大，一个机器放不下</li><li>数据的索引(B+ Tree)，一个机器的内存也放不下</li><li>访问量(读写混合)，一个服务器承受不了</li></ul><p>出现以上问题的话，单机模式无法解决。</p></li><li><p>Memcached(缓存)+Mysql+垂直拆分(读写分离)</p><p><img src="/2021/11/09/Redis%E6%A6%82%E8%BF%B0/2.png" srcset="/img/loading.gif" lazyload alt="2"></p><p>我们采用读写分离，由一个库来进行写数据，其他数据库同步写库的数据，提供读数据服务。</p><p>当网站大部分时候都是在读时，每次都要查询数据库的话就很麻烦，因此希望减轻数据库的读压力，我们可以使用缓存(Cache)来缓解读压力。</p><p>发展过程：优化数据结构和索引—&gt;文件缓存(但文件读写(IO)压力增大，也会降低效率)—&gt;Memchched(当时的热门技术)。</p></li><li><p>分库分表 + 分库分表 + Mysql集群</p><p><img src="/2021/11/09/Redis%E6%A6%82%E8%BF%B0/3.png" srcset="/img/loading.gif" lazyload alt="3"></p><p>尽管实现了分库分表，但是由于数据类型，数据量的增加(地图定位，音乐，热榜等数据)</p><p>Mysql等关系型数据库就不够用了，数据量很多，变化很大，例如给一个10万行的数据增加一个列属性，将需要修改所有10万条数据。</p><p>如果使用Mysql来存储比较大的文件，博客，图片等，数据库的表将会变得很大，效率也会降低，如果有一种数据库专门来处理这种数据，Mysql的压力就会变得十分小。</p></li><li><p>当前时代的互联网项目</p><p><img src="/2021/11/09/Redis%E6%A6%82%E8%BF%B0/4.png" srcset="/img/loading.gif" lazyload alt="4"></p></li></ol><h2 id="2-什么是NoSQL？"><a href="#2-什么是NoSQL？" class="headerlink" title="2. 什么是NoSQL？"></a>2. 什么是NoSQL？</h2><h3 id="2-1-NoSQL定义"><a href="#2-1-NoSQL定义" class="headerlink" title="2.1 NoSQL定义"></a>2.1 NoSQL定义</h3><p>​    NoSQL = Not  Only  SQL(不仅仅是SQL)</p><p>​    泛指非关系型数据库，随着Web2.0互联网的诞生，传统的关系型数据库很难应对Web2.0时代。尤其是超大规模的高并发社区，暴露出    很多难以克服的问题。NoSQL在当今大数据环境下发展十分迅速，Redis是发展最快的，也是我们当下必须要掌握的技术。</p><p>​    很多数据类型用户的个人信息，社交网络，地理位置，这些数据类型的存储不需要一个特定的格式，不需要多少的操作就可以横向扩展    的。例如可以使用Map&lt;String,Object&gt;键值对来存储。而关系型数据库中的数据一般以表格的形式存在，具有固定的行和列。</p><h3 id="2-2-NoSQL特点"><a href="#2-2-NoSQL特点" class="headerlink" title="2.2 NoSQL特点"></a>2.2 NoSQL特点</h3><p>​    <strong>解耦！</strong></p><ol><li><p>方便扩展（数据之间没有关系，很好扩展）</p></li><li><p>大数据量的高性能（Redis一秒写8万次，读取11万次，NoSQL的缓存记录级，是一种细粒度的缓存，性能会比较高）</p></li><li><p>数据类型是多样性的（不需要实现设计数据库，随取随用，如果数据量很大，设计表结构是很难的）</p></li><li><p>传统RDBMS与NoSQL的对比</p><figure class="highlight asciidoc"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs asciidoc">传统的RDBMS：<br><span class="hljs-bullet">- </span>结构化组织<br><span class="hljs-bullet">- </span>SQL<br><span class="hljs-bullet">- </span>数据与关系都存储在单独的表中<br><span class="hljs-bullet">- </span>具有操作语言，数据定义语言<br><span class="hljs-bullet">- </span>严格的一致性<br><span class="hljs-bullet">- </span>基础的事务<br><span class="hljs-bullet">- </span>......<br></code></pre></div></td></tr></table></figure><figure class="highlight asciidoc"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs asciidoc">NoSQL:<br><span class="hljs-bullet">- </span>不仅仅是数据<br><span class="hljs-bullet">- </span>没有固定的查询语言，可以定义语法<br><span class="hljs-bullet">- </span>键值对存储，列存储，文档存储，图形数据库（社交关系存储）<br><span class="hljs-bullet">- </span>最终一致性<br><span class="hljs-bullet">- </span>CAP定理和BASE（异地多活）<br><span class="hljs-bullet">- </span>高性能，高可用，高可扩展<br><span class="hljs-bullet">- </span>.....<br></code></pre></div></td></tr></table></figure></li><li><p>3v：海量，多样，实时（大数据时代面临的问题）</p><p> 3高：高并发，高可扩，高xingneng </p></li></ol><h2 id="3-NoSQL四大分类"><a href="#3-NoSQL四大分类" class="headerlink" title="3. NoSQL四大分类"></a>3. NoSQL四大分类</h2><ol><li><p>KV键值对：Redis，Tair，Memcached….</p></li><li><p>文档型数据库（bson格式，与json相同）：</p><ul><li>MongoDB：<ul><li>一个基于分布式文件存储的数据库，c++编写，主要用于处理大量的文档。</li><li>一个介于关系型数据库和非关系型数据库中间的产品，是非关系行数据库中功能最丰富，最像关系型数据库的。</li></ul></li><li>ConthDB</li></ul></li><li><p>列存储数据库：HBase，分布式文件系统</p></li><li><p>图关系数据库(使用图结构存储关系)</p><p><img src="/2021/11/09/Redis%E6%A6%82%E8%BF%B0/5.png" srcset="/img/loading.gif" lazyload alt="图关系"></p></li></ol><p><strong>四种类型对比:</strong></p><p><img src="/2021/11/09/Redis%E6%A6%82%E8%BF%B0/6.png" srcset="/img/loading.gif" lazyload alt="四种NoSQL数据库对比"></p><h2 id="4-Redis简介"><a href="#4-Redis简介" class="headerlink" title="4. Redis简介"></a>4. Redis简介</h2><ul><li><p>Redis(Remote Dictionary Server)，远程字典服务。</p></li><li><p>是一个开源的使用ANSI <a href="https://baike.baidu.com/item/C%E8%AF%AD%E8%A8%80">C语言</a>编写、支持网络、可基于内存亦可持久化的日志型、Key-Value<a href="https://baike.baidu.com/item/%E6%95%B0%E6%8D%AE%E5%BA%93/103728">数据库</a>，并提供多种语言的API。</p></li><li><p>功能</p><ul><li>内存存储，持久化，内存中是断电即失，因此需要做持久化（rbd，aof   ???)</li><li>效率高，可用于高速缓存</li><li>发布订阅系统</li><li>地图信息分析</li><li>计时器，计数器（统计浏览量…）</li><li>……</li></ul></li><li><p>特性</p><ul><li>多样的数据类型</li><li>持久化</li><li>集群</li><li>事务</li><li>…….</li></ul></li><li><p>参考</p><ul><li><a href="https://redis.io/">Redis官网</a></li><li><a href="http://www.redis.cn/">Redis中文官网</a></li></ul></li><li><p>一般在Linux服务器上部署Redis</p></li></ul>]]></content>
    
    
    <categories>
      
      <category>Redis</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Redis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hexo常用操作</title>
    <link href="/2021/11/09/Hexo%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C/"/>
    <url>/2021/11/09/Hexo%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C/</url>
    
    <content type="html"><![CDATA[<h2 id="Hexo框架操作"><a href="#Hexo框架操作" class="headerlink" title="Hexo框架操作"></a>Hexo框架操作</h2><ul><li>hexo -clean    清除旧文件</li><li>hexo -g           生成最新</li><li>hexo -d          提交</li><li>hexo -s          启动本地预览</li><li>ssh -T  <a href="mailto:&#x67;&#x69;&#116;&#64;&#103;&#105;&#116;&#x68;&#117;&#x62;&#46;&#x63;&#x6f;&#109;">&#x67;&#x69;&#116;&#64;&#103;&#105;&#116;&#x68;&#117;&#x62;&#46;&#x63;&#x6f;&#109;</a>    验证是否与服务器连接成功</li></ul><h2 id="Front-matter变量"><a href="#Front-matter变量" class="headerlink" title="Front-matter变量"></a>Front-matter变量</h2><ul><li>title    文章标题</li><li>index_img     首页显示图片</li><li>date    日期</li><li>hide    文章是否隐藏</li><li>tags      文章标签</li><li>categories    分类</li><li>sticky    优先级，数值越大越靠前</li><li>top    与sticky功能一致</li><li>banner_img    文章页顶部放大图，图片路径必须在source目录下</li><li>excerpt    摘要，首页显示</li></ul><h2 id="添加便签"><a href="#添加便签" class="headerlink" title="添加便签"></a>添加便签</h2><p>​    在markdown中使用如下代码添加便签：</p><figure class="highlight mel"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mel">&#123;% note success %&#125;   <span class="hljs-comment">//单独一行，success为便签类别，具体种类如下</span><br>文字 或者 <span class="hljs-string">`markdown`</span> 均可<br>&#123;% endnote %&#125;    <span class="hljs-comment">//单独一行</span><br></code></pre></div></td></tr></table></figure><p>​    便签种类如下：<img src="/2021/11/09/Hexo%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C/1.png" srcset="/img/loading.gif" lazyload alt="便签种类"></p><h2 id="行内便签"><a href="#行内便签" class="headerlink" title="行内便签"></a>行内便签</h2><p>​    在markdown中加入如下代码来使用Lable:</p><figure class="highlight pgsql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs pgsql">&#123;% label <span class="hljs-keyword">primary</span> @<span class="hljs-type">text</span> %&#125; //label  ***为便签种类，@+<span class="hljs-type">text</span>为显示文字，但<span class="hljs-type">text</span>不能以@开头<br></code></pre></div></td></tr></table></figure><p>​    Lable种类如下：</p><p>​    <span class="label label-primary">primary</span> <span class="label label-default">default</span> <span class="label label-info">info</span> <span class="label label-success">success</span> <span class="label label-warning">warning</span> <span class="label label-danger">danger</span></p><p>​    示例：写下代码<code>&#123;% label primary @12345 %&#125;</code>，将会出现一个Lable：<span class="label label-primary">12345</span></p>]]></content>
    
    
    <categories>
      
      <category>Hexo</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>欢迎到访！</title>
    <link href="/2021/11/09/%E6%AC%A2%E8%BF%8E%E5%88%B0%E8%AE%BF%EF%BC%81/"/>
    <url>/2021/11/09/%E6%AC%A2%E8%BF%8E%E5%88%B0%E8%AE%BF%EF%BC%81/</url>
    
    <content type="html"><![CDATA[<div class="note note-success">            <p><strong>所谓理想，只是同时拥有实力的人才能说的“现实”。</strong></p>          </div><h1 id="本站更新记录"><a href="#本站更新记录" class="headerlink" title="本站更新记录"></a>本站更新记录</h1><h2 id="2021-12-10"><a href="#2021-12-10" class="headerlink" title="2021.12.10"></a>2021.12.10</h2><ul><li>发现了宝藏图片网址：<a href="https://wallhaven.cc/">Awesome Wallpapers</a></li></ul><h2 id="2021-11-9"><a href="#2021-11-9" class="headerlink" title="2021.11.9"></a>2021.11.9</h2><ul><li>字体修改完成，教程在下面</li><li>增加ICP备案号</li></ul><h2 id="2021-11-6"><a href="#2021-11-6" class="headerlink" title="2021.11.6"></a>2021.11.6</h2><ul><li>利用hexo-asset-image插件解决了图片上传的问题，具体见文章</li><li>为域名加上了SSL证书（阿里云可免费申请，百度教程，很快解决），并在github上设置pages为强制HTTPS，这样就算输入HTTP，也会强转为HTTPS，终于是一个安全的站点了</li></ul><h2 id="2021-10-20"><a href="#2021-10-20" class="headerlink" title="2021.10.20"></a>2021.10.20</h2><ul><li>增加了运行时间</li><li>增加了转载版权标识（链接内容有问题，未解决）</li><li>页面底部内容修改</li><li>字体修改：参考：<a href="https://bestzuo.cn/posts/notoserifsc.html">博客网站字体设置：思源宋体 (bestzuo.cn)</a>，<a href="https://www.erenship.com/posts/40222.html#%E8%87%AA%E5%AE%9A%E4%B9%89%E5%AD%97%E4%BD%93">Hexo’s Fluid 主题私人定制（持续更新） - Eren の 宇宙船 (erenship.com)</a></li></ul><h2 id="2021-10-19"><a href="#2021-10-19" class="headerlink" title="2021.10.19"></a>2021.10.19</h2><ul><li>完善个人信息</li><li>增加了网页访问量统计</li><li>发现首页的文章是可以配图的（原来不是主题不好，是我太菜不会用π_π）</li><li>不会加评论功能。。。</li><li>woc，两个小时候评论功能成功了，其实设置好简单。。</li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Hexo解决图片链接问题</title>
    <link href="/2021/11/06/hexo%E8%A7%A3%E5%86%B3%E5%9B%BE%E7%89%87%E9%93%BE%E6%8E%A5%E9%97%AE%E9%A2%98/"/>
    <url>/2021/11/06/hexo%E8%A7%A3%E5%86%B3%E5%9B%BE%E7%89%87%E9%93%BE%E6%8E%A5%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<p>在使用 Hexo 撰写博文时，时常需要将图片嵌入 md 文章中，但往往由于图片保存在本地主机，因此在网页中链接图片时，会无法获取本地主机的图片，导致图片不正常显示，在这里我通过使用Hexo插件的方式，保证图片可以正常上传。</p><ol><li><p>首先安装一个图片路径转换的插件：<code>hexo-asset-image</code>，在Hexo主文件夹下使用如下命令：</p><p><code>npm install https://github.com/CodeFalling/hexo-asset-image --save</code></p></li><li><p> 打开_config.yml文件，将<code>post_asset_folder: false</code>修改为<code>true</code></p></li><li><p> 由于该插件本身可能会存在一下Bug，因此将<code>/node_modules/hexo-asset-image/index.js</code>文件的内容更改为如下代码：</p></li></ol>   <figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-meta">&#x27;use strict&#x27;</span>;<br><span class="hljs-keyword">var</span> cheerio = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;cheerio&#x27;</span>);<br><br><span class="hljs-comment">// http://stackoverflow.com/questions/14480345/how-to-get-the-nth-occurrence-in-a-string</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getPosition</span>(<span class="hljs-params">str, m, i</span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> str.split(m, i).join(m).length;<br>&#125;<br><br><span class="hljs-keyword">var</span> version = <span class="hljs-built_in">String</span>(hexo.version).split(<span class="hljs-string">&#x27;.&#x27;</span>);<br>hexo.extend.filter.register(<span class="hljs-string">&#x27;after_post_render&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">data</span>)</span>&#123;<br>  <span class="hljs-keyword">var</span> config = hexo.config;<br>  <span class="hljs-keyword">if</span>(config.post_asset_folder)&#123;<br>    <span class="hljs-keyword">var</span> link = data.permalink;<br><span class="hljs-keyword">if</span>(version.length &gt; <span class="hljs-number">0</span> &amp;&amp; <span class="hljs-built_in">Number</span>(version[<span class="hljs-number">0</span>]) == <span class="hljs-number">3</span>)<br>   <span class="hljs-keyword">var</span> beginPos = getPosition(link, <span class="hljs-string">&#x27;/&#x27;</span>, <span class="hljs-number">1</span>) + <span class="hljs-number">1</span>;<br><span class="hljs-keyword">else</span><br>   <span class="hljs-keyword">var</span> beginPos = getPosition(link, <span class="hljs-string">&#x27;/&#x27;</span>, <span class="hljs-number">3</span>) + <span class="hljs-number">1</span>;<br><span class="hljs-comment">// In hexo 3.1.1, the permalink of &quot;about&quot; page is like &quot;.../about/index.html&quot;.</span><br><span class="hljs-keyword">var</span> endPos = link.lastIndexOf(<span class="hljs-string">&#x27;/&#x27;</span>) + <span class="hljs-number">1</span>;<br>    link = link.substring(beginPos, endPos);<br><br>    <span class="hljs-keyword">var</span> toprocess = [<span class="hljs-string">&#x27;excerpt&#x27;</span>, <span class="hljs-string">&#x27;more&#x27;</span>, <span class="hljs-string">&#x27;content&#x27;</span>];<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; toprocess.length; i++)&#123;<br>      <span class="hljs-keyword">var</span> key = toprocess[i];<br> <br>      <span class="hljs-keyword">var</span> $ = cheerio.load(data[key], &#123;<br>        <span class="hljs-attr">ignoreWhitespace</span>: <span class="hljs-literal">false</span>,<br>        <span class="hljs-attr">xmlMode</span>: <span class="hljs-literal">false</span>,<br>        <span class="hljs-attr">lowerCaseTags</span>: <span class="hljs-literal">false</span>,<br>        <span class="hljs-attr">decodeEntities</span>: <span class="hljs-literal">false</span><br>      &#125;);<br><br>      $(<span class="hljs-string">&#x27;img&#x27;</span>).each(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br><span class="hljs-keyword">if</span> ($(<span class="hljs-built_in">this</span>).attr(<span class="hljs-string">&#x27;src&#x27;</span>))&#123;<br><span class="hljs-comment">// For windows style path, we replace &#x27;\&#x27; to &#x27;/&#x27;.</span><br><span class="hljs-keyword">var</span> src = $(<span class="hljs-built_in">this</span>).attr(<span class="hljs-string">&#x27;src&#x27;</span>).replace(<span class="hljs-string">&#x27;\\&#x27;</span>, <span class="hljs-string">&#x27;/&#x27;</span>);<br><span class="hljs-keyword">if</span>(!<span class="hljs-regexp">/http[s]*.*|\/\/.*/</span>.test(src) &amp;&amp;<br>   !<span class="hljs-regexp">/^\s*\//</span>.test(src)) &#123;<br>  <span class="hljs-comment">// For &quot;about&quot; page, the first part of &quot;src&quot; can&#x27;t be removed.</span><br>  <span class="hljs-comment">// In addition, to support multi-level local directory.</span><br>  <span class="hljs-keyword">var</span> linkArray = link.split(<span class="hljs-string">&#x27;/&#x27;</span>).filter(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">elem</span>)</span>&#123;<br><span class="hljs-keyword">return</span> elem != <span class="hljs-string">&#x27;&#x27;</span>;<br>  &#125;);<br>  <span class="hljs-keyword">var</span> srcArray = src.split(<span class="hljs-string">&#x27;/&#x27;</span>).filter(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">elem</span>)</span>&#123;<br><span class="hljs-keyword">return</span> elem != <span class="hljs-string">&#x27;&#x27;</span> &amp;&amp; elem != <span class="hljs-string">&#x27;.&#x27;</span>;<br>  &#125;);<br>  <span class="hljs-keyword">if</span>(srcArray.length &gt; <span class="hljs-number">1</span>)<br>srcArray.shift();<br>  src = srcArray.join(<span class="hljs-string">&#x27;/&#x27;</span>);<br>  $(<span class="hljs-built_in">this</span>).attr(<span class="hljs-string">&#x27;src&#x27;</span>, config.root + link + src);<br>  <span class="hljs-built_in">console</span>.info&amp;&amp;<span class="hljs-built_in">console</span>.info(<span class="hljs-string">&quot;update link as:--&gt;&quot;</span>+config.root + link + src);<br>&#125;<br>&#125;<span class="hljs-keyword">else</span>&#123;<br><span class="hljs-built_in">console</span>.info&amp;&amp;<span class="hljs-built_in">console</span>.info(<span class="hljs-string">&quot;no src attr, skipped...&quot;</span>);<br><span class="hljs-built_in">console</span>.info&amp;&amp;<span class="hljs-built_in">console</span>.info($(<span class="hljs-built_in">this</span>));<br>&#125;<br>      &#125;);<br>      data[key] = $.html();<br>    &#125;<br>  &#125;<br>&#125;);<br><br><br></code></pre></div></td></tr></table></figure><ol start="4"><li><p>尝试新建一个md文件，插件会自动在_post目录下生成一个与md文件同名的目录，之后向md文件中加入图片时，需要将该图片先放到同名目录下，然后使用图片链接加入图片，实例：</p><ul><li><p><code>hexo -new &quot;hexo解决图片链接问题&quot;</code></p></li><li><p>接下来会看到_post目录下生成了md文件和同名的文件夹，如图：<img src="/2021/11/06/hexo%E8%A7%A3%E5%86%B3%E5%9B%BE%E7%89%87%E9%93%BE%E6%8E%A5%E9%97%AE%E9%A2%98/1.png" srcset="/img/loading.gif" lazyload alt="生成结果"></p></li><li><p>使用规定的图片链接语法便可以链接图片：<code>[生成结果](1.png)</code>，不需要写路径，插件可以自己转换，只需要把图片名写出来就行。</p></li></ul><p>参考链接：</p><p>​    <a href="https://blog.csdn.net/xjm850552586/article/details/84101345?spm=1001.2101.3001.6650.5&utm_medium=distribute.pc_relevant.none-task-blog-2~default~BlogCommendFromBaidu~default-5.no_search_link&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~BlogCommendFromBaidu~default-5.no_search_link"> hexo引用本地图片无法显示_Ericam_-CSDN博客_hexo 图片</a></p></li></ol>]]></content>
    
    
    <categories>
      
      <category>Hexo</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Add Domain</title>
    <link href="/2021/10/23/add-domain/"/>
    <url>/2021/10/23/add-domain/</url>
    
    <content type="html"><![CDATA[<h1 id="域名添加"><a href="#域名添加" class="headerlink" title="域名添加"></a>域名添加</h1><p>​    在成功配置好博客并部署在github上之后，我们可以通过<code>xxxxx.github.io</code>的方式去访问博客，但是我想为自己的博客配置一个自己    的域名，例如本博客的域名：<a href="www.ziyikee.fun">www.ziyikee.fun</a> ,因此便需要去配置一个自己想要的域名。</p><p>​    首先需要在阿里云或腾讯云等厂商那里去买一个域名，比如我的域名是在阿里云上购买的，在购买域名之后，本来以为需要对域名进行    备案才可以使用该域名，然而在进行IPC备案时，对域名备案又需要备案服务码，你必须有自己的服务器才能获得这个备案服务码，因    此我一直以为还需要再买一台服务器才行，但是由于我的博客是直接部署在github上的，并不需要自己配置服务器，现在也没有使用服    务器的需求（服务器贵的一批），所以我以为配置域名估计要gg了。</p><p>​    但是在知乎查教程发现，将一个域名指向另一个域名其实并不需要备案（π—π），只需要下面几步简单的操作就行了：</p><ul><li><p>首先要购买一个域名，各大厂商都有卖，直接百度搜索即可</p></li><li><p>在域名管理处进行域名解析，添加两条新的记录</p><ol><li>记录类型为：CNAME（将一个域名执行另一个域名），主机记录为：www，记录值为：xxxxx.github.io，保存记录</li><li>记录类型为：CNAME（将一个域名执行另一个域名），主机记录为：@，记录值为：xxxxx.github.io，保存记录</li></ol></li></ul><ul><li><p>之后再本地hexo的source目录下，新建一个CNAME文件，文件内容为你的域名，如ziyikee.fun，保存文件</p></li><li><p>hexo g   hexo d，部署到github之后，便可以通过你的域名直接访问博客。</p></li></ul>]]></content>
    
    
    <categories>
      
      <category>Hexo</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>背包九讲-自译版背包</title>
    <link href="/2021/10/18/%E8%83%8C%E5%8C%85%E4%B9%9D%E8%AE%B2-%E8%87%AA%E8%AF%91%E7%89%88/"/>
    <url>/2021/10/18/%E8%83%8C%E5%8C%85%E4%B9%9D%E8%AE%B2-%E8%87%AA%E8%AF%91%E7%89%88/</url>
    
    <content type="html"><![CDATA[<h1 id="背包九讲—自译版"><a href="#背包九讲—自译版" class="headerlink" title="背包九讲—自译版"></a>背包九讲—自译版</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>所谓自译版，就是将某崔大神的背包九讲，用自己理解的意思抄一遍π﹏π（基本结构与内容与原版一致），在最初理解背包问题时，感觉十分难懂，看半天不知所云，因此本文用自己更容易理解的语言复述一遍“背包九讲”，方便日后复习时更方便快捷。</p><h2 id="1-01背包问题"><a href="#1-01背包问题" class="headerlink" title="1.01背包问题"></a>1.01背包问题</h2><p><strong>题目</strong></p><p>有N件物品和一个容量为V的背包。放入第i件物品所占用的容量是c [ i ] ，得到的价值是w [ i ] ,求将哪些物品装入背包可使价值总和最大.（简单来说，就是怎么在容量有限的情况下，使得这个背包里的物品价值总和最大）。</p><p><strong>基本思路</strong></p><p>这是最基础的背包问题，特点是：每件物品仅有一件，可以选择放或不放（这一条件在后面背包问题的延伸中会有所变化，这里是最典型最基础的背包问题。</p><p>用子问题定义状态：即f [ i ] [ j ]表示前  i 件物品恰放入一个容量为  j 的背包可以获得的最大价值（这里原文中使用了“恰”，但实际并不需要正好装满，在初始化可以区分开这两种情况，下文有提及）。则其状态转移方程便是：</p><figure class="highlight inform7"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs inform7">f<span class="hljs-comment">[i]</span><span class="hljs-comment">[j]</span>=max(f<span class="hljs-comment">[i−1]</span><span class="hljs-comment">[j]</span>,f<span class="hljs-comment">[i−1]</span><span class="hljs-comment">[j−c<span class="hljs-comment">[i]</span>]</span>+w<span class="hljs-comment">[i]</span>)<br></code></pre></div></td></tr></table></figure><p>这个方程非常重要，基本上所有跟背包相关的问题的方程都是由它衍生出来的，因此有必要详细解释一下：“将前 i 件物品放入容量为 j 的背包中”这个子问题，若只考虑第 i 件物品的策略（放或不放），那么就可以转化为一个只与前 i - 1 件物品的问题。如果不放第 i 件物品，那么就转化为“前 i- 1 件物品放入容量为 j 的背包中”，其最大价值为 <em>f</em> [i-1] [j]; 如果放第 i 件物品，那么问题就转化为“前 i -1件物品放入剩下的容量为 j - c[j]的背包中”，此时能获取的最大价值就是 <em>f</em> [i-1] [ j - c[ i ]]再加上第 i 件物品获得的价值 w[i]。其伪代码如下：</p><figure class="highlight apache"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute">F</span>[<span class="hljs-number">0</span>, <span class="hljs-number">0</span>..V ] ← <span class="hljs-number">0</span> //初始值为<span class="hljs-number">0</span>，这与具体问题有关，下面会详细解释<br><span class="hljs-attribute">for</span> i ← <span class="hljs-number">1</span> to N //第<span class="hljs-number">1</span>个装入V，第<span class="hljs-number">2</span>个装入V......<br><span class="hljs-attribute">for</span> v ← Ci to V //第i个装入v，装入v-<span class="hljs-number">1</span>.....<br><span class="hljs-attribute">F</span>[i, v] ← max&#123;F[i − <span class="hljs-number">1</span>, v], F[i − <span class="hljs-number">1</span>, v − Ci] + Wi&#125;<br><br></code></pre></div></td></tr></table></figure><p><strong>优化空间复杂度</strong></p><p>上述方法的时间和空间复杂度均为<em>O</em>（V *N）,其中时间复杂度已经无法继续优化，但空间复杂度可以优化到 <em>O</em>(N)。</p><p>因为每次循环的内部都是：<code>f[i][j]=max(f[i−1][j],f[i−1][j−c[i]]+w[i])</code>，因此在外层循环中，是变量i在已知进行+1的循环，那么如果我们只用<em>f</em> [ j ]用来表示每次循环时，当前循环第 i 次时向容量为 j 的背包中进行选择（针对第 i 个物品放与不放的选择），那么上一次循环（第 i -1次，第 i - 1个物品）计算的结果，到当前循环（第 i 次，第 i 个物品）时，在第二次循环到 j 时，我们的 <em>f</em> [ j ]的值，其实就是 <em>f</em> [ i-1] [ j ]，<em>f</em> [ j - c[i]]的值其实就是上一轮的 <em>f</em> [ i-1] [ j - c[i]]，因此如果我们在第二层循环中使用倒序：j 从V到 c [ i ]，那么我们在计算时，就可以利用上一轮的计算值，将循环语句改为：<code> f[j] = max(f[j], f[j - c[i]] + w[i]);</code>，因为是倒序，所以在未改变前面的值之前，他们保存的是上一轮（第 i - 1轮）的结果，所以核心代码可优化为：</p><figure class="highlight inform7"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs inform7">for (int i = 1; i &lt;= n; i++)<br>    for (int j = V; j &gt;= c<span class="hljs-comment">[i]</span>; j--)<br>        f<span class="hljs-comment">[j]</span> = max(f<span class="hljs-comment">[j]</span>, f<span class="hljs-comment">[j - c<span class="hljs-comment">[i]</span>]</span> + w<span class="hljs-comment">[i]</span>);<br></code></pre></div></td></tr></table></figure><p>因为每次循环都要利用上一次循环运算结果前面的那些值（ j 要用到上一次的 j 和 j - c [i] )，所以要使用倒序来利用上一轮的值，如果使用顺序的话，当前值改变之后，后面的值就无法利用当前值上一轮的结果了，因为已经发生了改变。</p><p><strong>初始化的细节问题</strong></p><p>这里有一个很巧妙的问题，就是在初始化<em>f</em> [ 0 ] [ j ] ( j 从 0 到 V) 或 <em>f</em> [ j ] ( j 从 0 到 V ) 时，是初始化为 0 还是初始化为 负无穷，这两个值其实是针对不同的问题的：</p><ul><li>如果我们要求最终恰好装满背包，那么除了<em>f</em> [ 0 ]以外的数组值，其初始化的值应该设置为负无穷；</li></ul><ul><li>如果我们要求在背包容量的限制下装价值最大就行，并不要求装满，那么初始化的值应该设置为 0；</li></ul><p>造成该差别的原因依然在循环语句中，我们可以仔细分析一下这句：</p><figure class="highlight inform7"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs inform7">f<span class="hljs-comment">[j]</span> = max(f<span class="hljs-comment">[j]</span>, f<span class="hljs-comment">[j - c<span class="hljs-comment">[i]</span>]</span> + w<span class="hljs-comment">[i]</span>);<br></code></pre></div></td></tr></table></figure><p>当我们把值设为负无穷时，在最初，<em>f</em> [ j ]是负无穷，当我们装入第 i 件物品时，如果恰好装满，那么此时 j  - c [ i ] 等于0，这个时候才可以利用 <em>f</em> [0] = 0，再加上w[i]，使得<em>f</em> [ j ]的值被更新为正的，才能保证后续也恰好装满的时候，值为正的。倘若不能恰好装满，我们是没有办法凑出所有 i 的容量加起来等于V，那么在循环过程中 j  - c [ i ] 永远无法等于0，那就算加上了w[ i ]，也是在负无穷上加一个数还是负的，因此只有恰好装满时，最后再能得到正的价值值。</p><p>但如果我们将初始值都设置为 0 时，不管有没有恰好装满，只要可以装进去就行，我们就能在f[j] 和f[j - c[i]]之间选择一个最大的，即在当前容量下，针对 i 件物品所能装的最大价值值，这时是否恰好装满将不再产生影响。</p><p><strong>小结</strong></p><p>01背包问题是最基本的背包问题，它包含了背包问题中设计状态、方程的最基本思想，另外，别的类型的背包问题往往也可以转换成01背包问题求解。故一定要仔细体会上面基本思路的得出方法，状态转移方程的意义，以及最后怎样优化的空间复杂度。</p><p><strong>例题</strong></p><p><a href="https://www.acwing.com/problem/content/2/">AcWing 01背包问题</a><br><a href="https://www.luogu.org/problemnew/show/P2925">Luogu P2925干草出售</a><br><a href="https://www.luogu.org/problemnew/show/P1616">Luogu P1616疯狂的采药</a><br><a href="http://acm.hdu.edu.cn/showproblem.php?pid=3466">HDU 3466 Proud Merchants</a></p><h2 id="2-完全背包问题（待补充）"><a href="#2-完全背包问题（待补充）" class="headerlink" title="2.完全背包问题（待补充）"></a>2.完全背包问题（待补充）</h2><h2 id="参考链接："><a href="#参考链接：" class="headerlink" title="参考链接："></a>参考链接：</h2><p><a href="https://blog.csdn.net/yandaoqiusheng/article/details/84782655">背包九讲通俗易懂版—我就是抄人家的，写的真好</a></p>]]></content>
    
    
    <categories>
      
      <category>算法与刷题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>动态规划</tag>
      
      <tag>背包问题</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>自旋锁</title>
    <link href="/2021/10/18/%E8%87%AA%E6%97%8B%E9%94%81/"/>
    <url>/2021/10/18/%E8%87%AA%E6%97%8B%E9%94%81/</url>
    
    <content type="html"><![CDATA[<h1 id="自旋锁"><a href="#自旋锁" class="headerlink" title="自旋锁"></a>自旋锁</h1><h2 id="1-提出背景："><a href="#1-提出背景：" class="headerlink" title="1.提出背景："></a>1.提出背景：</h2><p>​    由于多处理器环境中，某些资源的有限性，对于多个线程共享的资源进行访问时，需要进行互斥访问，便需要引入锁的概念，只有获取了锁的线程才可以对资源进行访问，由于多线程的核心是CPU的时间分片，所以同一时刻只能有一个线程获取锁。</p><p>​    当锁没有被占用时，尝试获取锁的线程成功获取到锁，之后若有另外的线程尝试获取锁，通常有两种处理方式：</p><p>​        1.没有获取到锁的线程就一直循环等待判断该资源是否已经释放锁，这种锁叫做自旋锁。</p><p>​        2.没有获取到锁的线程将自己阻塞起来，等待重新调度请求，这种锁叫互斥锁。</p><h2 id="2-自旋锁的定义"><a href="#2-自旋锁的定义" class="headerlink" title="2.自旋锁的定义"></a>2.自旋锁的定义</h2><p>​    自旋锁的定义：当一个线程尝试去获取某一把锁的时候，如果这个锁此时已经被别人获取(占用)，那么此线程就无法获取到这把锁，该线程将会等待，间隔一段时间后会再次尝试获取。这种采用循环加锁 -&gt; 等待的机制被称为<code>自旋锁(spinlock)</code>。</p><h2 id="3-自旋锁的原理"><a href="#3-自旋锁的原理" class="headerlink" title="3.自旋锁的原理"></a>3.自旋锁的原理</h2><p>​    如果持有锁的线程能在短时间内释放资源，那么那些等待竞争锁的线程就不需要进行内核态和用户态之间的切换进入阻塞状态，只需要等待锁的释放（自旋一小段时间），等到持有锁的线程释放锁之后即可获取到锁，这样做的好处是避免了用户进程和内核态切换的消耗。</p><p>​    自旋锁适用于临界区代码执行时间较短的情况，其他竞争线程只需要等待一小会儿便可以获取到锁，而不用在操作系统的调度下进入阻塞状态然后再切换回来，减少了上下文切换的次数，因此获取自旋锁的进程实际上一直处于用户态，并未进行用户态与内核态的切换。但如果获取锁的线程需要长时间的占用锁，则此时使用自旋锁的效率并不高，大量线程竞争一个锁，会导致获取锁的时间很长，线程自旋的消耗大于线程阻塞挂起的消耗，其他需要CPU的线程有不能获取到CPU，会造成CPU的浪费。</p><p>​    自旋锁广泛的应用于操作系统内核，是一种轻量级的互斥锁，但是未申请到锁的线程不会被挂起，而是进入忙等待状态。</p><p>​    重点：自旋锁在使用是会自动禁止抢占，这也是为什么不会被操作系统调度的原因，因此如果一个线程一直在自旋等待锁被释放，那么这段时间他还是一直在占用CPU，其他的线程无法抢占他的CPU。</p><h2 id="4-使用自旋锁的注意事项"><a href="#4-使用自旋锁的注意事项" class="headerlink" title="4.使用自旋锁的注意事项"></a>4.使用自旋锁的注意事项</h2><ul><li><p>不应用于长时间加锁</p></li><li><p>被自旋锁保护的临界区不能调用引起睡眠和阻塞的API函数，否则会造成死锁：</p><p>如果线程 A 在持有锁期间进入了休眠状态，那么线程 A 会自动放弃 CPU 使用权。线程 B 开始运行，线程 B 也想要获取锁，但是此时锁被 A 线程持有，而且内核抢占还被禁止了！线程 B 无法被调度出去，那么线程 A 就无法运行，锁也就无法释放，好了，死锁发生了！</p></li><li><p>不能递归申请自旋锁，因为一旦通过递归的方式申请一个你正在持有的锁，那么你就必须“自旋”，等待锁被释放，然而你正处于“自旋”状态，根本没法释放锁。结果就是自己把自己锁死了！</p></li><li><p>在获取锁之前一定要进行之本地中断（当前CPU中断）</p><p>中断中可以使用自旋锁，但是在进入自旋锁的临界区后，又发生了中断，此时新的中断尝试获取锁，但锁正在被原中断持有，现中断无法获取锁，原中断又被打断，无法释放锁，则会造成死锁。</p><p><img src="https://img-blog.csdnimg.cn/20210704161013832.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjA5NzEwOA==,size_16,color_FFFFFF,t_70" srcset="/img/loading.gif" lazyload alt="本地中断导致死锁"></p></li></ul><h2 id="5-具体实现例子待补充……"><a href="#5-具体实现例子待补充……" class="headerlink" title="5.具体实现例子待补充…….."></a>5.具体实现例子待补充……..</h2><h2 id="6-参考链接（纯搬砖）"><a href="#6-参考链接（纯搬砖）" class="headerlink" title="6.参考链接（纯搬砖）"></a>6.参考链接（纯搬砖）</h2><p><a href="http://www.blogjava.net/jinfeng_wang/archive/2016/12/14/432088.html">Java线程 - CAS自旋锁(spin-lock)</a></p><p><a href="https://blog.csdn.net/zhoutianzi12/article/details/103373976"> 什么是自旋锁+自旋锁和互斥锁的区别</a></p><p><a href="https://www.cnblogs.com/cxuanBlog/p/11679883.html">看完你就明白的锁系列之自旋锁</a></p>]]></content>
    
    
    <categories>
      
      <category>OS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>OS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>剑指32-1</title>
    <link href="/2021/09/24/%E5%89%91%E6%8C%8732-1/"/>
    <url>/2021/09/24/%E5%89%91%E6%8C%8732-1/</url>
    
    <content type="html"><![CDATA[<h1 id="剑指-Offer32-I-从上到下打印二叉树"><a href="#剑指-Offer32-I-从上到下打印二叉树" class="headerlink" title="剑指 Offer32-I.从上到下打印二叉树"></a>剑指 Offer32-I.从上到下打印二叉树</h1><hr><p><strong>题目要求：</strong></p><p>从上到下打印出二叉树的每个节点，同一层的节点按照从左到右的顺序打印.</p><p>例如：给定二叉树[3,9,20,null,null,15,7]</p><div class="hljs code-wrapper"><pre><code>    3   / \  9  20     / \    15 7 </code></pre></div><p>返回：[3,9,20,15,7]</p><p><strong>题目分析:</strong></p><ul><li>对二叉树进行打印实际就是对其进行遍历，根据题目要求，同一层节点按照从左到右的顺序进行遍历，所以应采用层序遍历的方法去遍历。</li><li>层序遍历：借助队列进行实现，要保证读取当前节点后，接下里读取器左右节点，然后是左子节点的左右节点，然后是右子节点的左右节点。起初思路有些错误，想通过递归去进行读取，但是递归一旦深入到一棵子树中，便会继续深入下去，是无法返回保证按层读取的，实际上并不需要递归处理。</li><li>通过队列实现层序遍历：首先将根节点加入队列，然后当队列不为空时进入循环，每一次循环，取出队列头结点，并读取节点数据，然后将其左右节点加入队列（子节点不为空），这样的话，下一次左子节点从队列头取出，同时将其左右子节点加入队列，这样就保证了队列中的数据顺序是按照层序遍历的顺序弹出的。</li><li>注意事项：针对根节点为空，做出针对处理。队列集合对象为Integer,先用Integer数组保存数据，然后转化成int[],返回数组。</li></ul><p><strong>代码实现：</strong></p><div class="hljs code-wrapper"><pre><code>class Solution &#123;ArrayList&lt;Integer&gt; b = new ArrayList&lt;Integer&gt;(1004);Queue&lt;TreeNode&gt; q = new ArrayDeque&lt;&gt;(1004);public int[] levelOrder(TreeNode root) &#123;    if(root == null) &#123;        int[] a = new int[0];        return a;    &#125;    q.add(root);    int i = 0;    TreeNode tem  =  new TreeNode(0) ;    while(!(q.isEmpty()))&#123;        tem = q.remove();        b.add(tem.val);        if(tem.left != null)&#123;            q.add(tem.left);        &#125;        if(tem.right != null)&#123;            q.add(tem.right);        &#125;    &#125;    int[] a = new int[b.size()];    Iterator&lt;Integer&gt; in = b.iterator();    while(in.hasNext())&#123;        a[i++] = in.next();    &#125;    return a;    &#125;&#125;</code></pre></div><p>通过本题主要复习一下使用队列进行层序遍历，以及熟悉Markdown写法。</p>]]></content>
    
    
    <categories>
      
      <category>算法与刷题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>刷题笔记</tag>
      
      <tag>二叉树</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
